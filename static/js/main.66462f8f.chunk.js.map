{"version":3,"sources":["components/home-component/home-component.js","components/sidebar-component/sidebar-data.js","components/sidebar-component/sidebar-component.js","components/admin-component/admin-component.js","components/login-component/login-component.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Home","Component","SidebarData","title","path","icon","cName","Sidebar","props","toggleSidebar","setState","open","state","className","onClick","this","href","size","style","padding","color","map","item","index","to","console","log","React","Admin","Login","App","exact","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oWAYeA,E,4JATX,WACI,OACI,8BACI,qE,GAJGC,a,wCCyBJC,EArBK,CAChB,CACIC,MAAO,OACPC,KAAM,IACNC,KAAM,cAAC,IAAD,IACNC,MAAO,oBAEX,CACIH,MAAO,QACPC,KAAM,SACNC,KAAM,cAAC,IAAD,IACNC,MAAO,oBAEX,CACIH,MAAO,QACPC,KAAM,SACNC,KAAM,cAAC,IAAD,IACNC,MAAO,qBCoFAC,E,kDAvDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAIVC,cAAgB,WACZ,EAAKC,SAAS,CACVC,MAAO,EAAKC,MAAMD,QALtB,EAAKC,MAAQ,CAAED,MAAM,GAFN,E,0CAWnB,WACI,OACI,sBAAKE,UAAU,gBAAf,UACI,qBAAKA,UAAU,cAAf,SACI,mBAAGC,QAASC,KAAKN,cAAeO,KAAK,IAArC,SACI,cAAC,IAAD,CAAeC,KAAM,GAAIC,MAAO,CAAEC,QAAS,aAGnD,sBACIN,UACIE,KAAKH,MAAMD,KACL,2BACA,oBAJd,UAOI,sBAAKE,UAAU,mBAAf,UACI,8CACA,mBAAGC,QAASC,KAAKN,cAAeO,KAAK,IAArC,SACI,cAAC,IAAD,CAAgBC,KAAM,GAAIG,MAAM,eAIxC,qBAAKP,UAAU,iBAAf,SACI,6BACKX,EAAYmB,KAAI,SAACC,EAAMC,GACpB,OACI,cAAC,IAAD,CAAMV,UAAWS,EAAKhB,MAAOkB,GAAIF,EAAKlB,KAAtC,SACI,+BACKkB,EAAKjB,KACLiB,EAAKnB,QAFDoB,eAWhCE,QAAQC,IAAIX,KAAKH,MAAMD,a,GAlDlBgB,IAAM1B,WCvCb2B,G,kKATX,WACI,OACI,8BACI,sE,GAJI3B,cCUL4B,E,4JATX,WACI,OACI,8BACI,sE,GAJI5B,aCgCL6B,MAvBf,WACI,OACI,cAAC,IAAD,UACI,sBAAKjB,UAAU,6BAAf,UACI,cAAC,EAAD,IACA,qBAAKA,UAAU,iBAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOT,KAAK,SAAZ,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAO2B,OAAK,EAAC3B,KAAK,IAAlB,SACI,cAAC,EAAD,iBCbR4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNhC,QAAQgC,MAAMA,EAAMC,YE/G5BrB,M","file":"static/js/main.66462f8f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./home-component.css\";\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Welcome to the Home component</h1>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\n\nimport { AiOutlineMenu, AiFillHome } from \"react-icons/ai\";\nimport { RiUserSettingsLine } from \"react-icons/ri\";\nimport { VscAccount } from \"react-icons/vsc\";\n\nconst SidebarData = [\n    {\n        title: \"Home\",\n        path: \"/\",\n        icon: <AiFillHome />,\n        cName: \"sidebar-nav-link\",\n    },\n    {\n        title: \"Admin\",\n        path: \"/admin\",\n        icon: <RiUserSettingsLine />,\n        cName: \"sidebar-nav-link\",\n    },\n    {\n        title: \"Login\",\n        path: \"/login\",\n        icon: <VscAccount />,\n        cName: \"sidebar-nav-link\",\n    },\n];\n\nexport default SidebarData;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { IoIosArrowBack } from \"react-icons/io\";\nimport { AiOutlineMenu, AiFillHome } from \"react-icons/ai\";\nimport { RiUserSettingsLine } from \"react-icons/ri\";\nimport \"./sidebar-component.css\";\nimport SidebarData from \"./sidebar-data\";\n\n/*function SidebarOpen(props) {\n    return (\n        <div\n            className={\n                props.status ? \"sidebar-container active\" : \"sidebar-container\"\n            }\n        >\n            <div className=\"header-container\">\n                <h1>LegumeCHOICE</h1>\n                <a href=\"#\">\n                    <IoIosArrowBack size={30} color=\"white\" />\n                </a>\n            </div>\n\n            <div className=\"link-container\">\n                <ul>\n                    {SidebarData.map((item, index) => {\n                        return (\n                            <Link className={item.cName} to={item.path}>\n                                <li key={index}>\n                                    {item.icon}\n                                    {item.title}\n                                </li>\n                            </Link>\n                        );\n                    })}\n                </ul>\n            </div>\n        </div>\n    );\n}*/\n\n/*function SidebarClosed(props) {\n    return (\n        <div className=\"menu-button\">\n            <a href=\"#\">\n                <AiOutlineMenu size={40} style={{ padding: \"2em\" }} />\n            </a>\n            <SidebarOpen status={false} />\n        </div>\n    );\n}*/\n\nclass Sidebar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { open: false };\n    }\n\n    toggleSidebar = () => {\n        this.setState({\n            open: !this.state.open,\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"container_row\">\n                <div className=\"menu-button\">\n                    <a onClick={this.toggleSidebar} href=\"#\">\n                        <AiOutlineMenu size={40} style={{ padding: \"2em\" }} />\n                    </a>\n                </div>\n                <div\n                    className={\n                        this.state.open\n                            ? \"sidebar-container active\"\n                            : \"sidebar-container\"\n                    }\n                >\n                    <div className=\"header-container\">\n                        <h1>LegumeCHOICE</h1>\n                        <a onClick={this.toggleSidebar} href=\"#\">\n                            <IoIosArrowBack size={30} color=\"white\" />\n                        </a>\n                    </div>\n\n                    <div className=\"link-container\">\n                        <ul>\n                            {SidebarData.map((item, index) => {\n                                return (\n                                    <Link className={item.cName} to={item.path}>\n                                        <li key={index}>\n                                            {item.icon}\n                                            {item.title}\n                                        </li>\n                                    </Link>\n                                );\n                            })}\n                        </ul>\n                    </div>\n                </div>\n\n                {console.log(this.state.open)}\n            </div>\n        );\n    }\n}\n\nexport default Sidebar;\n","import React, { Component } from \"react\";\nimport \"./admin-component.css\";\nclass Admin extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Welcome to the Admin component</h1>\n            </div>\n        );\n    }\n}\n\nexport default Admin;\n","import React, { Component } from \"react\";\n\nclass Login extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Welcome to the login component</h1>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import React from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport Home from \"./components/home-component/home-component\";\nimport Sidebar from \"./components/sidebar-component/sidebar-component\";\nimport Admin from \"./components/admin-component/admin-component\";\nimport Login from \"./components/login-component/login-component\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"full-height row-containers\">\n                <Sidebar />\n                <div className=\"page-container\">\n                    <Switch>\n                        <Route path=\"/admin\">\n                            <Admin />\n                        </Route>\n                        <Route path=\"/login\">\n                            <Login />\n                        </Route>\n                        <Route exact path=\"/\">\n                            <Home />\n                        </Route>\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}