{"version":3,"sources":["components/data-entry-component/context-scores-data.js","components/home-component/home-component-markdown.md","components/home-component/home-component.js","components/admin-data-entry-component/admin-data-entry-component.js","components/login-component/login-component.js","components/data-entry-component/agro-ecological-data.js","components/data-entry-component/agro-ecological-filter.js","components/data-entry-component/context-scores-component.js","components/data-entry-component/legumefunctions.js","components/data-entry-component/participatory-matrix-data.js","components/data-entry-component/pairwise-ranking-data.js","components/data-entry-component/participatory-matrix-scoring.js","components/data-entry-component/pairwise-ranking-component.js","components/data-entry-component/data-entry-component.js","components/results-component/results-component.js","components/sidebar-component/sidebar-data.js","components/sidebar-component/sidebar-component.js","App-data.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Home","props","state","file","markdownFile","markdown","axios","get","this","then","response","setState","data","children","Component","Admin","addUserlocal","event","preventDefault","prevUsers","usersLocal","newUser","formEntry","username","some","user","alert","email","handleChange","name","target","value","prevState","deleteUser","params","oldUsers","filter","subsetArrays","array","variable","map","item","saveChanges","usersToAdd","usersToDelete","usersOnline","localusers","includes","length","method","url","newUsers","headers","accept","console","log","catch","error","deleteUsers","bind","className","Form","onSubmit","Group","controlId","Label","Control","type","onChange","Button","variant","index","onClick","e","id","_id","Login","agroEcoData","biofilters","label","minValue","maxValue","AgroEco","tableHeader","tableBody","biofilter","defaultValue","bioFiltersArray","forEach","biofilterSubset","biofilterIndex","parseInt","Table","striped","bordered","hover","typologies","participants","attributes","ContextScores","scores","attributesIndex","push","scoreType","attribute","participantIndex","typologyIndex","participant","typology","ContextScore","scoresArray","changeIndividualScores","changeAverages","arr","query","element","average","averageAttribute","attributetoAverage","reduce","accumulator","currentValue","renderRowAverage","toFixed","contextRow","as","score","allRows","rowSpan","colSpan","legfunc","newSelections","func","matrixdata","farmerAttributes","farmers","legumeFunctions","blankFarmer","number","gender","selections","total","ParticipatoryMatrix","addFarmer","farmersArray","JSON","parse","stringify","newfarmertoAdd","farmEntryFields","scoringInput","farmerNameInput","farmerDetailsSelectInput","updateFarmerName","updateFarmerScore","updateFarmerDetailesSelect","selected","disabled","whichFarmer","farmer","farmerIndex","legumefuncs","whichValue","funct","funcIndex","newScore","updateTotal","selection","tableRows","PairwiseRankingData","male","pairwiseSelection","totals","female","previousidentifiers","outerArrayIndex","function1","innerArrayIndex","function2","intermediateidentifier","sort","identifier","join","funct1","funct2","PairwiseRanking","updateSelections","selectedValue","selectionArr","selectionItem","selectionIndex","pairfemalewiseSelection","upDateTotalScore","totalsArray","totalsItem","totalsIndex","pairWiseTable","pairWiseResultsTable","DataEntry","React","Results","sidebarlinkcName","SidebarData","title","routeKey","component","path","icon","size","cName","Sidebar","toggleSidebar","sideBarOpen","legumeCHOICEState","color","to","appData","dataEntry","agroEcoFilter","contextScores","pairWiseRanking","participatoryMatrix","results","userData","authenticated","role","configurationData","legumes","users","App","changeState","basename","exact","from","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.844dc8e1.chunk.js","sourcesContent":["/* Creating all of the possible combinations for context scores \n Could be done in a better way with a series of map functions, or some sort of recursive for loop\nThis is the quickest/best way I could come up with*/\n\nconst typologies = [\n    {\n        name: \"Low\",\n        label: \"low\",\n    },\n    {\n        name: \"Medium\",\n        label: \"med\",\n    },\n    {\n        name: \"High\",\n        label: \"high\",\n    },\n];\n\nconst participants = [\n    {\n        name: \"Farmer\",\n        label: \"farmer\",\n    },\n    {\n        name: \"Expert\",\n        label: \"expert\",\n    },\n];\n\nconst attributes = [\n    {\n        name: \"Land\",\n        label: \"land\",\n    },\n    {\n        name: \"Labour\",\n        label: \"labour\",\n    },\n    {\n        name: \"Seed\",\n        label: \"seed\",\n    },\n    {\n        name: \"Inputs and services\",\n        label: \"inp-serv\",\n    },\n    {\n        name: \"Knowledge and skills\",\n        label: \"knowl-skill\",\n    },\n    {\n        name: \"Water\",\n        label: \"water\",\n    },\n    {\n        name: \"Markets\",\n        label: \"markets\",\n    },\n];\n\nlet ContextScores = {\n    attributes: attributes,\n    participants: participants,\n    typologies: typologies,\n    scores: [],\n};\n\nfor (\n    let attributesIndex = 0;\n    attributesIndex < attributes.length;\n    attributesIndex++\n) {\n    // Giving room to add average scores for each attribute\n    ContextScores.scores.push({\n        scoreType: \"average\",\n        attribute: attributes[attributesIndex],\n        value: 0,\n    });\n\n    for (\n        let participantIndex = 0;\n        participantIndex < participants.length;\n        participantIndex++\n    ) {\n        for (\n            let typologyIndex = 0;\n            typologyIndex < typologies.length;\n            typologyIndex++\n        ) {\n            // Giving room to add individual scores for each entry\n            ContextScores.scores.push({\n                scoreType: \"individual\",\n                attribute: attributes[attributesIndex],\n                participant: participants[participantIndex],\n                typology: typologies[typologyIndex],\n                value: 0,\n            });\n        }\n    }\n}\nexport default ContextScores;\nexport { typologies };\n","export default __webpack_public_path__ + \"static/media/home-component-markdown.0579c1b4.md\";","import React, { Component } from \"react\";\nimport \"./home-component.css\";\nimport axios from \"axios\";\nimport ReactMarkdown from \"react-markdown\";\nimport markdownFile from \"./home-component-markdown.md\";\n\nclass Home extends Component {\n    // Initialising state for the component\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            file: markdownFile,\n            markdown: \"\",\n        };\n    }\n\n    // Importing markdown when the file is loaded\n    componentDidMount() {\n        axios.get(this.state.file).then((response) => {\n            this.setState({\n                markdown: response.data,\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <ReactMarkdown children={this.state.markdown}></ReactMarkdown>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Form, Button } from \"react-bootstrap\";\n\nimport \"./admin-data-entry-component.css\";\n\nclass Admin extends Component {\n    /////////////////////////////////////////////////////////////////////////////////\n    // Initialising variables\n    /////////////////////////////////////////////////////////////////////////////////\n    constructor(props) {\n        super(props);\n        //console.log(\"Constructor\");\n        this.state = {\n            usersLocal: [],\n            usersOnline: [],\n\n            formEntry: {\n                username: \"\",\n                email: \"\",\n            },\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.addUserlocal = this.addUserlocal.bind(this);\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Loaded when the page loads. Fetches entries from the database\n    /////////////////////////////////////////////////////////////////////////////////\n    componentDidMount() {\n        axios({\n            method: \"get\",\n            url: \"https://l-gorman.com/api/users\",\n            headers: {\n                accept: \"application/json\",\n            },\n        })\n            .then((response) => {\n                this.setState({\n                    usersLocal: response.data,\n                    usersOnline: response.data,\n                });\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Function for adding user\n    /////////////////////////////////////////////////////////////////////////////////\n    addUserlocal = (event) => {\n        event.preventDefault();\n        //console.log(\"About to update state\");\n        const prevUsers = this.state.usersLocal;\n        const newUser = this.state.formEntry;\n\n        // Checking if the username exists already\n        if (newUser.username === \"\") {\n            alert(\"No username entered\");\n            return;\n        }\n        if (prevUsers.some((user) => user.username === newUser.username)) {\n            alert(\"Username already exists\");\n            return;\n        }\n\n        // Checking if the email exists already\n        if (prevUsers.some((user) => user.email === newUser.email)) {\n            alert(\"email already registered\");\n            return;\n        }\n\n        // Updating state\n        this.setState({\n            usersLocal: [...prevUsers, newUser],\n            formEntry: {\n                username: \"\",\n                email: \"\",\n            },\n        });\n    };\n\n    handleChange = (event) => {\n        event.preventDefault();\n        const name = [event.target.name];\n        const value = event.target.value;\n        this.setState((prevState) => ({\n            formEntry: {\n                ...prevState.formEntry,\n                [name]: value,\n            },\n        }));\n    };\n    /////////////////////////////////////////////////////////////////////////////////\n    // Function for deleting user\n    /////////////////////////////////////////////////////////////////////////////////\n    deleteUser = (event, params = {}) => {\n        event.preventDefault();\n\n        const oldUsers = this.state.usersLocal;\n        const newUser = oldUsers.filter(\n            (user) =>\n                user.email !== params.email || user.username !== params.username\n        );\n        //console.log(newUser);\n\n        this.setState((prevState) => ({\n            usersLocal: newUser,\n        }));\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Subset Arrays\n    /////////////////////////////////////////////////////////////////////////////////\n\n    subsetArrays = (array, variable) => {\n        return array.map((item) => {\n            return item[variable];\n        });\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Making Changes to Db\n    /////////////////////////////////////////////////////////////////////////////////\n    saveChanges = (event) => {\n        //event.preventDefault();\n\n        const usersLocal = this.state.usersLocal;\n        const usersOnline = this.state.usersOnline;\n\n        //console.log(this.subsetArrays(usersOnline, \"email\"));\n        let usersToAdd = [];\n        let usersToDelete = [];\n\n        usersToAdd = usersLocal.filter(\n            (localusers) =>\n                !this.subsetArrays(usersOnline, \"email\").includes(\n                    localusers.email\n                ) &&\n                !this.subsetArrays(usersOnline, \"username\").includes(\n                    localusers.username\n                )\n        );\n\n        usersToDelete = usersOnline.filter(\n            (localusers) =>\n                !this.subsetArrays(usersLocal, \"email\").includes(\n                    localusers.email\n                ) &&\n                !this.subsetArrays(usersLocal, \"username\").includes(\n                    localusers.username\n                )\n        );\n\n        //console.log(usersToDelete);\n\n        //console.log(usersToDelete);\n\n        if (usersToAdd.length > 0) {\n            axios({\n                method: \"post\",\n                url: \"https://l-gorman.com/api/users/insertmany/\",\n                data: { newUsers: usersToAdd },\n                headers: {\n                    accept: \"application/json\",\n                    \"Access-Control-Allow-Origin\": \"*\",\n                },\n            })\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch(function (error) {\n                    console.log(error);\n                });\n        }\n\n        if (usersToDelete.length > 0) {\n            axios({\n                method: \"post\",\n                url: \"https://l-gorman.com/api/users/deletemany/\",\n                data: { deleteUsers: usersToDelete },\n                headers: {\n                    accept: \"application/json\",\n                    \"Access-Control-Allow-Origin\": \"*\",\n                },\n            })\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch(function (error) {\n                    console.log(error);\n                });\n        }\n\n        this.setState(() => ({\n            usersOnline: usersLocal,\n        }));\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Checking if the component has updated\n    /////////////////////////////////////////////////////////////////////////////////\n    componentDidUpdate() {\n        console.log(this.state);\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Login component</h1>\n                <div className=\"form-container\">\n                    <h2>New Users</h2>\n                    <Form onSubmit={this.addUserlocal}>\n                        <Form.Group controlId=\"basicusername\">\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control\n                                name=\"username\"\n                                type=\"text\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"basicemail\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                name=\"email\"\n                                type=\"email\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n\n                        <Button\n                            className=\"delete-button\"\n                            variant=\"primary\"\n                            type=\"submit\"\n                        >\n                            Add User\n                        </Button>\n                    </Form>\n                </div>\n                <div className=\"form-container\">\n                    <h2>Users</h2>\n                    {this.state.usersLocal.map((user, index) => {\n                        return (\n                            <div\n                                className=\"user-container\"\n                                key={\"user \" + user.email + \" \" + user.username}\n                            >\n                                {index + 1}. {user.username} ({user.email})\n                                <div className=\"deleteButton\">\n                                    <Button\n                                        onClick={(e) =>\n                                            this.deleteUser(e, {\n                                                id: user._id,\n                                                username: user.username,\n                                                email: user.email,\n                                            })\n                                        }\n                                    >\n                                        Delete User\n                                    </Button>\n                                </div>\n                            </div>\n                        );\n                    })}\n                    <div className=\"user-container\">\n                        <Button\n                            onClick={this.saveChanges}\n                            className=\"deleteButton\"\n                        >\n                            Submit\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Admin;\n","import React, { Component } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nimport \"./login-component.css\";\n\nclass Login extends Component {\n    /////////////////////////////////////////////////////////////////////////////////\n    // Initialising variables\n    /////////////////////////////////////////////////////////////////////////////////\n    constructor(props) {\n        super(props);\n        //console.log(\"Constructor\");\n\n        this.state = {\n            user: \"\",\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Login</h1>\n                <Form>\n                    <Form.Control type=\"text\" />\n                    <Button>Login</Button>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import { FormLabel } from \"react-bootstrap\";\n\nconst agroEcoData = {\n    biofilters: [\n        {\n            name: \"Rainfall (mm/year)\",\n            label: \"rainfall\",\n            minValue: 280,\n            maxValue: 4290,\n            value: (280 + 4290) / 2,\n        },\n        {\n            name: \"Temperature (mean °C/month)\",\n            label: \"temp\",\n            minValue: 0,\n            maxValue: 45,\n            value: 45 / 2,\n        },\n\n        {\n            name: \"Altitude (average masl)\",\n            label: \"alt\",\n            minValue: 0,\n            maxValue: 3800,\n            value: 3800 / 2,\n        },\n\n        {\n            name: \"Soil pH (average)\",\n            label: \"soilpH\",\n            minValue: 4,\n            maxValue: 9,\n            value: (4 + 9) / 2,\n        },\n    ],\n};\n\nexport default agroEcoData;\n","import React, { Component } from \"react\";\nimport { Table, Form } from \"react-bootstrap\";\n\nimport agroEcoData from \"./agro-ecological-data\";\n\nimport \"./agro-ecological-filter.css\";\n\nclass AgroEco extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = agroEcoData;\n    }\n\n    componentDidMount() {\n        console.log(this.state);\n    }\n\n    componentDidUpdate() {\n        console.log(this.state);\n    }\n    tableHeader = () => {\n        return (\n            <thead>\n                <tr>\n                    <th>Biofilters</th>\n                    <th>Site Values</th>\n                </tr>\n            </thead>\n        );\n    };\n\n    tableBody = () => {\n        return (\n            <tbody>\n                {this.state.biofilters.map((biofilter) => {\n                    return (\n                        <tr>\n                            <td>{biofilter.name}</td>\n                            <td>\n                                <Form.Control\n                                    type=\"number\"\n                                    defaultValue={biofilter.value}\n                                    onClick={(event) => {\n                                        this.handleChange(event, biofilter);\n                                    }}\n                                />\n                            </td>\n                        </tr>\n                    );\n                })}\n            </tbody>\n        );\n    };\n\n    handleChange = (event, biofilter) => {\n        const bioFiltersArray = this.state.biofilters;\n\n        if (\n            event.target.value < biofilter.minValue ||\n            event.target.value > biofilter.maxValue\n        ) {\n            alert(\"Outside of range\");\n            return;\n        }\n\n        bioFiltersArray.forEach((biofilterSubset, biofilterIndex) => {\n            if (biofilterSubset === biofilter) {\n                bioFiltersArray[biofilterIndex].value = parseInt(\n                    event.target.value\n                );\n            }\n        });\n\n        this.setState({\n            biofilters: bioFiltersArray,\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <h2>Agroecological Filter</h2>\n\n                <div className=\"table-container\">\n                    <Table\n                        striped\n                        bordered\n                        hover\n                        className=\"agro-eco-table-style\"\n                    >\n                        <this.tableHeader />\n\n                        <this.tableBody />\n                    </Table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AgroEco;\n","import React, { Component } from \"react\";\nimport ContextScores from \"./context-scores-data\";\nimport { Table, Form, Button } from \"react-bootstrap\";\n\nimport \"./context-scores-component.css\";\n\nclass ContextScore extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = ContextScores;\n    }\n\n    componentDidMount() {\n        //console.log(this.state);\n    }\n\n    componentDidUpdate() {\n        //console.log(this.state);\n    }\n\n    handleChange = (event, props) => {\n        props.value = parseInt(event.target.value); // Ensuring that the entered value is an integer\n        const scoresArray = this.state.scores;\n\n        this.changeIndividualScores(scoresArray, props);\n        this.changeAverages(scoresArray, props);\n\n        this.setState({\n            scores: scoresArray,\n        });\n    };\n\n    // Change individual scores in an array through filtering\n    changeIndividualScores = (arr, query) => {\n        arr.forEach((element, index) => {\n            if (\n                element.participant === query.participant &&\n                element.attribute === query.attribute &&\n                element.typology === query.typology\n            ) {\n                arr[index].value = query.value;\n            }\n        });\n    };\n\n    changeAverages = (arr) => {\n        arr.forEach((element, index) => {\n            if (element.scoreType === \"average\") {\n                let average = this.averageAttribute(arr, element.attribute);\n                arr[index].value = average;\n            }\n        });\n    };\n\n    // Update Averages after we see a score change\n    averageAttribute = (arr, attributetoAverage) => {\n        //axisToAverage.forEach((element, index) => {});\n        const scores = [];\n        arr.forEach((element, index) => {\n            if (\n                element.attribute === attributetoAverage &&\n                element.scoreType === \"individual\"\n            ) {\n                scores.push(arr[index].value);\n            }\n        });\n\n        const total = scores.reduce(\n            (accumulator, currentValue) => accumulator + currentValue,\n            0\n        );\n        const average = total / scores.length;\n        return average;\n    };\n\n    renderRowAverage = (props) => {\n        return (\n            <td>\n                {this.averageAttribute(\n                    this.state.scores,\n                    props.attribute\n                ).toFixed(2)}\n            </td>\n        );\n    };\n\n    // A function for generating a row in the input table\n    contextRow = (props) => {\n        return (\n            <tr key={\"row-\" + props.attribute.name}>\n                <td key={\"row-name-\" + props.attribute.name}>\n                    {props.attribute.name}\n                </td>\n                {this.state.typologies.map((typology) => {\n                    return this.state.participants.map((participant) => {\n                        //return <td>{typology.name + participant.name}</td>;\n                        return (\n                            <td\n                                key={\n                                    \"table-entry-\" +\n                                    typology.name +\n                                    \"-\" +\n                                    participant.name +\n                                    \"-\" +\n                                    props.attribute.name\n                                }\n                            >\n                                <Form.Control\n                                    as=\"select\"\n                                    onChange={(event) =>\n                                        this.handleChange(\n                                            event,\n                                            (props = {\n                                                typology: typology,\n                                                participant: participant,\n                                                attribute: props.attribute,\n                                            })\n                                        )\n                                    }\n                                    key={\n                                        \"form-control-\" +\n                                        typology.name +\n                                        \"-\" +\n                                        participant.name +\n                                        \"-\" +\n                                        props.attribute.name\n                                    }\n                                >\n                                    {[0, 1, 2, 3, 4].map((score) => {\n                                        return (\n                                            <option\n                                                key={\n                                                    \"form-option-\" +\n                                                    typology.name +\n                                                    \"-\" +\n                                                    participant.name +\n                                                    \"-\" +\n                                                    props.attribute.name +\n                                                    \"-\" +\n                                                    score\n                                                }\n                                            >\n                                                {score}\n                                            </option>\n                                        );\n                                    })}\n                                </Form.Control>\n                            </td>\n                        );\n                    });\n                })}\n                <this.renderRowAverage attribute={props.attribute} />\n            </tr>\n        );\n    };\n\n    // Using the contextRow and map functions to generate all of the rows in the table\n    allRows = () => {\n        return this.state.attributes.map((attribute) => {\n            return (\n                <this.contextRow\n                    attribute={attribute}\n                    key={\"context-row-\" + attribute.name}\n                />\n            );\n        });\n    };\n\n    // Creating the header for the table. This is a split header which accounts for typologies and participants\n    tableHeader = () => {\n        return (\n            <thead key=\"table-header\">\n                {/* Adding The typology Headers */}\n                <tr key=\"typology-header-row\">\n                    <th key=\"blank-column-head\" rowSpan=\"2\"></th>\n                    {this.state.typologies.map((typology) => {\n                        return (\n                            <th\n                                key={\"typology-header\" + typology.name}\n                                colSpan=\"2\"\n                            >\n                                Typology - {typology.name}\n                            </th>\n                        );\n                    })}\n                    {/* Adding The Average Score Headers */}\n\n                    <th key=\"average-header\" rowSpan=\"2\">\n                        Mean Score (0-4)\n                    </th>\n                </tr>\n                {/* Adding The Participant Headers */}\n                <tr key=\"participant-header-row\">\n                    {this.state.typologies.map((typology) => {\n                        return this.state.participants.map((participant) => {\n                            return (\n                                <th\n                                    key={\n                                        \"participant-header\" + participant.name\n                                    }\n                                >\n                                    {participant.name}\n                                </th>\n                            );\n                        });\n                    })}\n                </tr>\n            </thead>\n        );\n    };\n\n    render() {\n        return (\n            <div key=\"context-score-div\">\n                <h2>Context Scoring</h2>\n                <Table striped bordered hover key=\"table\">\n                    <this.tableHeader key=\"all-table-headers\" />\n                    <tbody key=\"table-body\">\n                        <this.allRows key=\"all-rows\" />\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default ContextScore;\n","const legfunc = [\n    {\n        name: \"Food\",\n        label: \"food\",\n    },\n    {\n        name: \"Feed\",\n        label: \"feed\",\n    },\n    {\n        name: \"Income\",\n        label: \"income\",\n    },\n    {\n        name: \"Erosion Control\",\n        label: \"erosion-control\",\n    },\n    {\n        name: \"Fuel\",\n        label: \"fuel\",\n    },\n    {\n        name: \"Soil Fertility\",\n        label: \"soil-fertility\",\n    },\n];\n\nexport default legfunc;\n","import legfunc from \"./legumefunctions\";\nimport { typologies } from \"./context-scores-data\";\n\nconst newSelections = legfunc;\nnewSelections.map((func) => {\n    func.score = 0;\n});\nconst newFarmer = {\n    number: 0,\n    name: \"\",\n    gender: \"\",\n    typology: \"\",\n    selections: newSelections,\n    total: 0,\n};\n\nconst matrixdata = {\n    farmerAttributes: [\n        {\n            name: \"Number\",\n            label: \"number\",\n        },\n        {\n            name: \"Name\",\n            label: \"name\",\n        },\n        {\n            name: \"Gender\",\n            label: \"gender\",\n        },\n        {\n            name: \"Typology\",\n            label: \"typology\",\n        },\n        {\n            name: \"Matrix Selections\",\n            label: \"selections\",\n        },\n        {\n            name: \"Total\",\n            label: \"total\",\n        },\n    ],\n    farmers: [],\n    legumeFunctions: legfunc,\n    blankFarmer: newFarmer,\n    typology: typologies,\n    gender: [\n        {\n            name: \"Male\",\n            label: \"male\",\n        },\n        {\n            name: \"Female\",\n            label: \"female\",\n        },\n    ],\n};\n\nexport default matrixdata;\n","import legfunc from \"./legumefunctions\";\n\nlet PairwiseRankingData = {\n    legumeFunctions: legfunc,\n    male: {\n        pairwiseSelection: [],\n        totals: [],\n    },\n    female: {\n        pairwiseSelection: [],\n        totals: [],\n    },\n    pairwiseSelection: [],\n    totals: [],\n};\n\n// Creating all of the potential pairwise functions for each of the entries\nlet previousidentifiers = [];\nfor (\n    let outerArrayIndex = 0;\n    outerArrayIndex < PairwiseRankingData.legumeFunctions.length;\n    outerArrayIndex++\n) {\n    let function1 = PairwiseRankingData.legumeFunctions[outerArrayIndex];\n    PairwiseRankingData.totals.push({\n        attribute: function1,\n        value: 0,\n    });\n\n    PairwiseRankingData.male.totals.push({\n        attribute: function1,\n        value: 0,\n    });\n\n    PairwiseRankingData.female.totals.push({\n        attribute: function1,\n        value: 0,\n    });\n    for (\n        let innerArrayIndex = 0;\n        innerArrayIndex < PairwiseRankingData.legumeFunctions.length;\n        innerArrayIndex++\n    ) {\n        let function2 = PairwiseRankingData.legumeFunctions[innerArrayIndex];\n\n        // Checking if the pair is the same\n        if (function1 !== function2) {\n            let intermediateidentifier = [function1.label, function2.label];\n            intermediateidentifier.sort();\n            let identifier = intermediateidentifier.join(\"_\");\n\n            if (!previousidentifiers.includes(identifier)) {\n                PairwiseRankingData.pairwiseSelection.push({\n                    funct1: function1,\n                    funct2: function2,\n                    identifier: identifier,\n                    value: \"\",\n                });\n\n                PairwiseRankingData.male.pairwiseSelection.push({\n                    funct1: function1,\n                    funct2: function2,\n                    identifier: identifier,\n                    value: \"\",\n                });\n\n                PairwiseRankingData.female.pairwiseSelection.push({\n                    funct1: function1,\n                    funct2: function2,\n                    identifier: identifier,\n                    value: \"\",\n                });\n                previousidentifiers.push(identifier);\n            }\n        }\n    }\n}\nconsole.log(PairwiseRankingData);\nexport default PairwiseRankingData;\n\n// Returning all of the potential combinations using a nested map function. Remember that flatmap returns an unnested list\n/*PairwiseRankingData.pairwiseScores.individual.push(\n    legumeFunctions.flatMap((item, i, arr) => {\n        return arr.flatMap((subitem) => {\n            if (item != subitem) {\n                return {\n                    item1: item,\n                    item2: subitem,\n                    value: {},\n                };\n            } else {\n                return [];\n            }\n        });\n    })\n);*/\n","import React, { Component } from \"react\";\n\nimport \"./participatory-matrix-scoring.css\";\nimport { Table, Button, Form } from \"react-bootstrap\";\n\nimport matrixdata from \"./participatory-matrix-data\";\n\nclass ParticipatoryMatrix extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = matrixdata;\n    }\n\n    componentDidMount() {\n        console.log(this.state);\n        //this.addFarmer();\n    }\n\n    componentDidUpdate() {\n        console.log(this.state.farmers);\n    }\n\n    addFarmer = () => {\n        //This is so important to make sure that we are creating a clean copy\n        //Deep cloning\n        let farmersArray = JSON.parse(JSON.stringify(this.state.farmers));\n        let number = farmersArray.length + 1;\n\n        let newfarmertoAdd = JSON.parse(JSON.stringify(this.state.blankFarmer));\n        newfarmertoAdd.number = number;\n\n        farmersArray.push(newfarmertoAdd);\n\n        this.setState({\n            farmers: farmersArray,\n        });\n    };\n\n    farmEntryFields = (props) => {\n        //console.log(props);\n\n        if (props.attribute.label === \"selections\") {\n            return this.scoringInput(props);\n        } else {\n            if (props.attribute.label === \"name\") {\n                return this.farmerNameInput(props);\n            } else {\n                return this.farmerDetailsSelectInput(props);\n            }\n        }\n    };\n\n    farmerNameInput = (props) => {\n        //console.log(\"name input props-------------------\");\n\n        return (\n            <td>\n                <Form.Control\n                    type=\"text\"\n                    onChange={(event) => this.updateFarmerName(event, props)}\n                />\n            </td>\n        );\n    };\n\n    scoringInput = (props) => {\n        return (\n            <td>\n                <Form.Control\n                    type=\"number\"\n                    onChange={(event) => this.updateFarmerScore(event, props)}\n                />\n            </td>\n        );\n    };\n\n    farmerDetailsSelectInput = (props) => {\n        return (\n            <td>\n                <Form.Control\n                    as=\"select\"\n                    onChange={(event) =>\n                        this.updateFarmerDetailesSelect(event, props)\n                    }\n                >\n                    <option value=\"\" selected disabled>\n                        Please select\n                    </option>\n\n                    {this.state[props.attribute.label].map((attribute) => {\n                        return <option>{attribute.name}</option>;\n                    })}\n                </Form.Control>\n            </td>\n        );\n    };\n\n    updateFarmerScore = (event, props) => {\n        let farmersArray = [...this.state.farmers];\n\n        //console.log(farmersArray);\n        //console.log(props);\n        // Finding which farmer to subset\n        let whichFarmer = \"\";\n        farmersArray.forEach((farmer, farmerIndex) => {\n            if (farmer.number === props.farmer.number) {\n                whichFarmer = farmerIndex;\n            }\n        });\n\n        let legumefuncs = this.state.legumeFunctions;\n        let whichValue = \"\";\n        // Finding which value to update\n        legumefuncs.forEach((funct, funcIndex) => {\n            if (funct.label === props.legumeFunctions.label) {\n                whichValue = funcIndex;\n            }\n        });\n\n        let newScore = { ...farmersArray[whichFarmer].selections[whichValue] };\n        newScore.score = parseInt(event.target.value);\n        farmersArray[whichFarmer].selections[whichValue] = newScore;\n        this.setState({\n            farmers: farmersArray,\n        });\n\n        this.updateTotal();\n    };\n\n    updateTotal = () => {\n        const farmers = this.state.farmers;\n\n        farmers.map((farmer) => {\n            farmer.total = 0;\n\n            farmer.selections.map((selection) => {\n                farmer.total += selection.score;\n            });\n        });\n\n        this.setState({\n            farmers: farmers,\n        });\n    };\n\n    updateFarmerName = (event, props) => {\n        let farmersArray = [...this.state.farmers];\n\n        farmersArray.forEach((farmer, farmerIndex) => {\n            if (farmer.number === props.farmer.number) {\n                farmersArray[farmerIndex].name = event.target.value;\n            }\n        });\n        this.setState({ farmers: farmersArray });\n    };\n\n    updateFarmerDetailesSelect = (event, props) => {\n        let farmersArray = [...this.state.farmers];\n        farmersArray.forEach((farmer, farmerIndex) => {\n            if (farmer.number === props.farmer.number) {\n                farmersArray[farmerIndex][props.attribute.label] =\n                    event.target.value;\n            }\n        });\n        this.setState({ farmers: farmersArray });\n    };\n\n    tableHeader = () => {\n        return (\n            <thead>\n                <tr>\n                    <th rowSpan=\"2\">Farmer Number</th>\n                    <th rowSpan=\"2\">Farmer Name</th>\n                    <th rowSpan=\"2\">Gender</th>\n                    <th rowSpan=\"2\">Typology</th>\n                    <th rowSpan=\"1\" colSpan=\"6\">\n                        Functions\n                    </th>\n                    <th rowSpan=\"2\">Total</th>\n                </tr>\n                <tr>\n                    {this.state.legumeFunctions.map((funct) => {\n                        return <th>{funct.name}</th>;\n                    })}\n                </tr>\n            </thead>\n        );\n    };\n\n    tableRows = () => {\n        return this.state.farmers.map((farmer) => {\n            return (\n                <tr>\n                    {this.state.farmerAttributes.map((attribute) => {\n                        if (attribute.label === \"selections\") {\n                            return farmer.selections.map((selection) => {\n                                return (\n                                    <this.farmEntryFields\n                                        attribute={attribute}\n                                        legumeFunctions={selection}\n                                        farmer={farmer}\n                                    />\n                                );\n                            });\n                        } else if (attribute.label === \"number\") {\n                            return <td>{farmer.number}</td>;\n                        } else if (attribute.label === \"total\") {\n                            return <td>{farmer.total}</td>;\n                        } else {\n                            return (\n                                <this.farmEntryFields\n                                    attribute={attribute}\n                                    farmer={farmer}\n                                />\n                            );\n                        }\n                    })}\n                </tr>\n            );\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <h2>Participatory Matrix Scoring</h2>\n                <p>\n                    Complete participatory matrix scoring exercise. Each\n                    individual has 20 beans which they can distribute across\n                    legume functions. Use the \"Add Farmer\" button to add as many\n                    farmers as you need for the exercises. These scores are\n                    averaged and automatically transcribed into Legume Option\n                    Scores.\n                </p>\n                <Table striped bordered hover>\n                    <this.tableHeader />\n                    <tbody>\n                        <this.tableRows />\n                    </tbody>\n                </Table>\n                <Button className=\"float-right\" onClick={this.addFarmer}>\n                    Add Farmer\n                </Button>\n            </div>\n        );\n    }\n}\n\nexport default ParticipatoryMatrix;\n","import React, { Component } from \"react\";\nimport PairwiseRankingData from \"./pairwise-ranking-data\";\n\nimport \"./pairwise-ranking-component.css\";\n\nimport { Table, Form } from \"react-bootstrap\";\n\nclass PairwiseRanking extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = PairwiseRankingData;\n    }\n\n    componentDidMount() {\n        //console.log(this.state);\n    }\n    componentDidUpdate() {\n        //console.log(this.state);\n    }\n\n    updateSelections = (event, props) => {\n        if (event.target.value == \"\") {\n            alert(\"Must not select empty value\");\n            return;\n        }\n        // Converting legume function name into legume function item\n        let selectedValue = \"\";\n\n        if (event.target.value === props.funct1.name) {\n            selectedValue = props.funct1;\n        }\n        if (event.target.value === props.funct2.name) {\n            selectedValue = props.funct2;\n        }\n\n        let selectionArr = this.state[props.gender].pairwiseSelection;\n        selectionArr.forEach((selectionItem, selectionIndex) => {\n            if (\n                selectionItem.funct1 === props.funct1 &&\n                selectionItem.funct2 === props.funct2\n            ) {\n                selectionArr[selectionIndex].value = selectedValue;\n                //console.log(selectionArr);\n            }\n        });\n\n        const gender = props.gender;\n        this.setState((prevState) => ({\n            [gender]: {\n                ...prevState[gender],\n                pairfemalewiseSelection: selectionArr,\n            },\n        }));\n\n        this.upDateTotalScore(gender);\n    };\n\n    upDateTotalScore = (gender) => {\n        const totalsArray = this.state[gender].totals;\n        totalsArray.forEach((totalsItem, totalsIndex) => {\n            totalsArray[totalsIndex].value = 0;\n            this.state[gender].pairwiseSelection.forEach((selectionItem) => {\n                if (selectionItem.value === totalsItem.attribute) {\n                    totalsArray[totalsIndex].value++;\n                }\n            });\n        });\n        this.setState((prevState) => ({\n            [gender]: {\n                ...prevState[gender],\n                totals: totalsArray,\n            },\n        }));\n    };\n\n    pairWiseTable = (props) => {\n        const tableGender = props.gender;\n        return (\n            <Table className=\"table-style\" striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>Pair</th>\n                        <th>Selection Female</th>\n                        <th>Selection Male</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state[props.gender].pairwiseSelection.map((item) => {\n                        return (\n                            <tr>\n                                <td>\n                                    {item.funct1.name +\n                                        \" vs \" +\n                                        item.funct2.name}\n                                </td>\n                                <td>\n                                    <Form.Control\n                                        as=\"select\"\n                                        onChange={(\n                                            event,\n\n                                            props = {\n                                                funct1: item.funct1,\n                                                funct2: item.funct2,\n                                                gender: \"female\",\n                                            }\n                                        ) =>\n                                            this.updateSelections(event, props)\n                                        }\n                                    >\n                                        <option value=\"\" selected disabled>\n                                            Please select\n                                        </option>\n                                        <option>{item.funct1.name}</option>\n                                        <option>{item.funct2.name}</option>\n                                    </Form.Control>\n                                </td>\n                                <td>\n                                    <Form.Control\n                                        as=\"select\"\n                                        onChange={(\n                                            event,\n\n                                            props = {\n                                                funct1: item.funct1,\n                                                funct2: item.funct2,\n                                                gender: \"male\",\n                                            }\n                                        ) =>\n                                            this.updateSelections(event, props)\n                                        }\n                                    >\n                                        <option value=\"\" selected disabled>\n                                            Please select\n                                        </option>{\" \"}\n                                        <option>{item.funct1.name}</option>\n                                        <option>{item.funct2.name}</option>\n                                    </Form.Control>\n                                </td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    };\n\n    pairWiseResultsTable = (props) => {\n        return (\n            <Table striped bordered hover className=\"table-style\">\n                <thead>\n                    <tr>\n                        <th>Attribute</th>\n                        <th>Count Female</th>\n                        <th>Count Male</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.legumeFunctions.map((item, index) => {\n                        return (\n                            <tr>\n                                <td>{item.name}</td>\n                                <td>{this.state.female.totals[index].value}</td>\n                                <td>{this.state.male.totals[index].value}</td>\n                            </tr>\n                        );\n                    })}\n                    {/*this.state[props.gender].totals.map((item) => {\n                        return (\n                            <tr>\n                                <td>{item.attribute.name}</td>\n                                <td>{item.value}</td>\n                            </tr>\n                        );\n                    })*/}\n                </tbody>\n            </Table>\n        );\n    };\n\n    render() {\n        return (\n            <div>\n                <h2>Pairwise Component Ranking</h2>\n                <p>\n                    Select the most important attribute out of the following\n                    pairs\n                </p>\n                <div className=\"table-container\">\n                    <this.pairWiseTable key=\"pairwise-table\" gender=\"female\" />\n                    <this.pairWiseResultsTable\n                        key=\"pairwise-results-table\"\n                        gender=\"female\"\n                        className=\"results-table-pairwise\"\n                    />\n                </div>\n\n                <div className=\"table-container\"></div>\n            </div>\n        );\n    }\n}\nexport default PairwiseRanking;\n","import React from \"react\";\n\nimport \"./data-entry-component.css\";\n\nimport AgroEco from \"./agro-ecological-filter\";\nimport ContextScore from \"./context-scores-component\";\nimport ParticipatoryMatrix from \"./participatory-matrix-scoring\";\nimport PairwiseRanking from \"./pairwise-ranking-component\";\n\nclass DataEntry extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>Data Entry</h1>\n                <div className=\"data-entry-container\">\n                    <ContextScore />\n                    <PairwiseRanking />\n                    <ParticipatoryMatrix />\n                    <AgroEco />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DataEntry;\n","import React, { Component } from \"react\";\n\nimport \"./results-component.css\";\n\nclass Results extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Results</h1>\n            </div>\n        );\n    }\n}\n\nexport default Results;\n","import React, { Component } from \"react\";\n\nimport { AiOutlineDatabase, AiFillHome } from \"react-icons/ai\";\nimport { RiUserSettingsLine } from \"react-icons/ri\";\nimport { VscAccount } from \"react-icons/vsc\";\nimport { GoGraph } from \"react-icons/go\";\nimport Home from \"../home-component/home-component\";\nimport Admin from \"../admin-data-entry-component/admin-data-entry-component\";\nimport Login from \"../login-component/login-component\";\nimport DataEntry from \"../data-entry-component/data-entry-component\";\nimport Results from \"../results-component/results-component\";\n// Set the icon size for the imported icons\nconst iconSize = 30;\n\nconst sidebarlinkcName = \"sidebar-nav-link\";\n\nconst SidebarData = [\n    {\n        title: \"Home\",\n        routeKey: \"home-route\",\n        component: <Home />,\n        path: \"/home\",\n        icon: <AiFillHome size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n    {\n        title: \"Data Entry\",\n        routeKey: \"data-entry-route\",\n        component: <DataEntry />,\n        path: \"/data-entry\",\n\n        icon: <AiOutlineDatabase size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n    {\n        title: \"Results\",\n        routeKey: \"results-route\",\n        component: <Results />,\n        path: \"/results\",\n\n        icon: <GoGraph size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n    {\n        title: \"Admin\",\n        routeKey: \"admin-route\",\n        component: <Admin />,\n        path: \"/admin\",\n        icon: <RiUserSettingsLine size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n    {\n        title: \"Login\",\n        routeKey: \"login-route\",\n        component: <Login />,\n        path: \"/login\",\n        icon: <VscAccount size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n];\n\nexport default SidebarData;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { IoIosArrowBack } from \"react-icons/io\";\nimport { AiOutlineMenu } from \"react-icons/ai\";\nimport \"./sidebar-component.css\";\nimport SidebarData from \"./sidebar-data\";\n\nclass Sidebar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Setting the initial state to closed\n\n        this.state = {\n            sideBarOpen: false,\n            legumeCHOICEState: props.props,\n        };\n\n        console.log(this.state.legumeCHOICEState);\n    }\n\n    // When this function is trigered, state of the side-bar is change, which triggers a change in the css\n    toggleSidebar = () => {\n        this.setState({\n            sideBarOpen: !this.state.sideBarOpen,\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"container_row\">\n                <div className=\"menu-button\">\n                    <a onClick={this.toggleSidebar}>\n                        <AiOutlineMenu size={50} color=\"black\" />\n                    </a>\n                </div>\n\n                <div\n                    className={\n                        this.state.sideBarOpen\n                            ? \"sidebar-container active\"\n                            : \"sidebar-container\"\n                    }\n                >\n                    <div\n                        key=\"sidebar-header \"\n                        className=\"sidebar-header-container\"\n                    >\n                        <h2>LegumeCHOICE</h2>\n\n                        <a onClick={this.toggleSidebar}>\n                            <div className=\"close-menu-icon\">\n                                <IoIosArrowBack size={40} color=\"white\" />\n                            </div>\n                        </a>\n                    </div>\n\n                    <div className=\"link-container\">\n                        <ul>\n                            {SidebarData.map((item, index) => {\n                                return (\n                                    <Link\n                                        key={index + \"-link-item\"}\n                                        className={item.cName}\n                                        to={item.path}\n                                        onClick={this.toggleSidebar}\n                                    >\n                                        <div className=\"sidebar-list-item\">\n                                            <li\n                                                className=\"sidebar-list-item\"\n                                                key={index + \"-list-item\"}\n                                            >\n                                                <span className=\"side-bar-link-icon\">\n                                                    {item.icon}\n                                                </span>\n                                                <span className=\"side-bar-link-text\">\n                                                    {item.title}\n                                                </span>\n                                            </li>\n                                        </div>\n                                    </Link>\n                                );\n                            })}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Sidebar;\n","const appData = {\n    dataEntry: {\n        agroEcoFilter: {},\n        contextScores: {},\n        pairWiseRanking: {},\n        participatoryMatrix: {},\n        results: {},\n    },\n\n    userData: {\n        username: {},\n        authenticated: true,\n        role: {},\n    },\n\n    configurationData: {\n        legumes: [],\n        users: [],\n    },\n};\n\nexport default appData;\n","import React from \"react\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\n\nimport Sidebar from \"./components/sidebar-component/sidebar-component\";\n\n// In this location, we have all of the details of each of the individual components\nimport SidebarData from \"./components/sidebar-component/sidebar-data\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport appData from \"./App-data\";\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = appData;\n    }\n\n    changeState = () => {};\n\n    render() {\n        return (\n            <Router basename=\"legume-choice-client\">\n                <div>\n                    <Sidebar props={this.state} />\n                    <div className=\"outer-page-container\">\n                        <div className=\"inner-page-container\">\n                            <Switch>\n                                {SidebarData.map((item) => {\n                                    // A function to return each of the components\n                                    // Each component, and all of its\n                                    return (\n                                        <Route\n                                            exact\n                                            path={item.path}\n                                            key={item.routeKey}\n                                        >\n                                            {item.component}\n                                        </Route>\n                                    );\n                                })}\n                                <Redirect exact from=\"/\" to=\"/home\" />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}