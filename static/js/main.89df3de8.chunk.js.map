{"version":3,"sources":["components/data-entry-component/context-scores-data.js","components/home-component/home-component-markdown.md","components/home-component/home-component.js","components/admin-data-entry-component/admin-data-entry-component.js","components/login-component/login-component.js","components/data-entry-component/agro-ecological-filter.js","components/data-entry-component/pairwise-ranking-data.js","components/data-entry-component/context-scores-component.js","components/data-entry-component/participatory-matrix-scoring.js","components/data-entry-component/legumefunctions.js","components/data-entry-component/pairwise-ranking-component.js","components/data-entry-component/data-entry-component.js","components/sidebar-component/sidebar-data.js","components/sidebar-component/sidebar-component.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Home","props","state","file","markdownFile","markdown","axios","get","this","then","response","setState","data","children","Component","Admin","Login","addUserlocal","event","preventDefault","prevUsers","usersLocal","newUser","formEntry","username","some","user","alert","email","handleChange","name","target","value","prevState","deleteUser","params","oldUsers","filter","subsetArrays","array","variable","map","item","saveChanges","usersToAdd","usersToDelete","usersOnline","localusers","includes","length","method","url","newUsers","headers","accept","console","log","catch","error","deleteUsers","bind","className","Form","onSubmit","Group","controlId","Label","Control","type","onChange","Button","variant","index","onClick","e","id","_id","AgroEco","Table","striped","bordered","hover","typologies","label","participants","attributes","ContextScores","scores","attributesIndex","push","scoreType","attribute","participantIndex","typologyIndex","participant","typology","ContextScore","parseInt","scoresArray","changeIndividualScores","changeAverages","arr","query","forEach","element","average","averageAttribute","attributetoAverage","reduce","accumulator","currentValue","renderRowAverage","toFixed","contextRow","as","score","allRows","tableHeader","rowSpan","colSpan","ParticipatoryMatrix","PairwiseRankingData","legumeFunctions","male","pairwiseSelection","totals","female","previousidentifiers","outerArrayIndex","function1","innerArrayIndex","function2","intermediateidentifier","sort","identifier","join","funct1","funct2","PairwiseRanking","updateSelections","selectedValue","selectionArr","gender","selectionItem","selectionIndex","pairfemalewiseSelection","upDateTotalScore","totalsArray","totalsItem","totalsIndex","pairWiseTable","pairWiseResultsTable","DataEntry","React","sidebarlinkcName","SidebarData","title","routeKey","component","path","icon","size","cName","Sidebar","toggleSidebar","open","color","to","App","basename","exact","from","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.89df3de8.chunk.js","sourcesContent":["/* Creating all of the possible combinations for context scores \n Could be done in a better way with a series of map functions, or some sort of recursive for loop\nThis is the quickest/best way I could come up with*/\n\nconst typologies = [\n    {\n        name: \"Low\",\n        label: \"low\",\n    },\n    {\n        name: \"Medium\",\n        label: \"med\",\n    },\n    {\n        name: \"High\",\n        label: \"high\",\n    },\n];\n\nconst participants = [\n    {\n        name: \"Farmer\",\n        label: \"farmer\",\n    },\n    {\n        name: \"Expert\",\n        label: \"expert\",\n    },\n];\n\nconst attributes = [\n    {\n        name: \"Land\",\n        label: \"land\",\n    },\n    {\n        name: \"Labour\",\n        label: \"labour\",\n    },\n    {\n        name: \"Seed\",\n        label: \"seed\",\n    },\n    {\n        name: \"Inputs and services\",\n        label: \"inp-serv\",\n    },\n    {\n        name: \"Knowledge and skills\",\n        label: \"knowl-skill\",\n    },\n    {\n        name: \"Water\",\n        label: \"water\",\n    },\n    {\n        name: \"Markets\",\n        label: \"markets\",\n    },\n];\n\nlet ContextScores = {\n    attributes: attributes,\n    participants: participants,\n    typologies: typologies,\n    scores: [],\n};\n\nfor (\n    let attributesIndex = 0;\n    attributesIndex < attributes.length;\n    attributesIndex++\n) {\n    // Giving room to add average scores for each attribute\n    ContextScores.scores.push({\n        scoreType: \"average\",\n        attribute: attributes[attributesIndex],\n        value: 0,\n    });\n\n    for (\n        let participantIndex = 0;\n        participantIndex < participants.length;\n        participantIndex++\n    ) {\n        for (\n            let typologyIndex = 0;\n            typologyIndex < typologies.length;\n            typologyIndex++\n        ) {\n            // Giving room to add individual scores for each entry\n            ContextScores.scores.push({\n                scoreType: \"individual\",\n                attribute: attributes[attributesIndex],\n                participant: participants[participantIndex],\n                typology: typologies[typologyIndex],\n                value: 0,\n            });\n        }\n    }\n}\nexport default ContextScores;\nexport { typologies };\n","export default __webpack_public_path__ + \"static/media/home-component-markdown.0579c1b4.md\";","import React, { Component } from \"react\";\nimport \"./home-component.css\";\nimport axios from \"axios\";\nimport ReactMarkdown from \"react-markdown\";\nimport markdownFile from \"./home-component-markdown.md\";\n\nclass Home extends Component {\n    // Initialising state for the component\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            file: markdownFile,\n            markdown: \"\",\n        };\n    }\n\n    // Importing markdown when the file is loaded\n    componentDidMount() {\n        axios.get(this.state.file).then((response) => {\n            this.setState({\n                markdown: response.data,\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <ReactMarkdown children={this.state.markdown}></ReactMarkdown>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./admin-data-entry-component.css\";\nclass Admin extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Welcome to the Admin component</h1>\n            </div>\n        );\n    }\n}\n\nexport default Admin;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Form, Button } from \"react-bootstrap\";\n\nimport \"./login-component.css\";\n\nclass Login extends Component {\n    /////////////////////////////////////////////////////////////////////////////////\n    // Initialising variables\n    /////////////////////////////////////////////////////////////////////////////////\n    constructor(props) {\n        super(props);\n        //console.log(\"Constructor\");\n        this.state = {\n            usersLocal: [],\n            usersOnline: [],\n\n            formEntry: {\n                username: \"\",\n                email: \"\",\n            },\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.addUserlocal = this.addUserlocal.bind(this);\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Loaded when the page loads. Fetches entries from the database\n    /////////////////////////////////////////////////////////////////////////////////\n    componentDidMount() {\n        axios({\n            method: \"get\",\n            url: \"https://l-gorman.com/api/users\",\n            headers: {\n                accept: \"application/json\",\n            },\n        })\n            .then((response) => {\n                this.setState({\n                    usersLocal: response.data,\n                    usersOnline: response.data,\n                });\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Function for adding user\n    /////////////////////////////////////////////////////////////////////////////////\n    addUserlocal = (event) => {\n        event.preventDefault();\n        //console.log(\"About to update state\");\n        const prevUsers = this.state.usersLocal;\n        const newUser = this.state.formEntry;\n\n        // Checking if the username exists already\n        if (newUser.username === \"\") {\n            alert(\"No username entered\");\n            return;\n        }\n        if (prevUsers.some((user) => user.username === newUser.username)) {\n            alert(\"Username already exists\");\n            return;\n        }\n\n        // Checking if the email exists already\n        if (prevUsers.some((user) => user.email === newUser.email)) {\n            alert(\"email already registered\");\n            return;\n        }\n\n        // Updating state\n        this.setState({\n            usersLocal: [...prevUsers, newUser],\n            formEntry: {\n                username: \"\",\n                email: \"\",\n            },\n        });\n    };\n\n    handleChange = (event) => {\n        event.preventDefault();\n        const name = [event.target.name];\n        const value = event.target.value;\n        this.setState((prevState) => ({\n            formEntry: {\n                ...prevState.formEntry,\n                [name]: value,\n            },\n        }));\n    };\n    /////////////////////////////////////////////////////////////////////////////////\n    // Function for deleting user\n    /////////////////////////////////////////////////////////////////////////////////\n    deleteUser = (event, params = {}) => {\n        event.preventDefault();\n\n        const oldUsers = this.state.usersLocal;\n        const newUser = oldUsers.filter(\n            (user) =>\n                user.email !== params.email || user.username !== params.username\n        );\n        //console.log(newUser);\n\n        this.setState((prevState) => ({\n            usersLocal: newUser,\n        }));\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Subset Arrays\n    /////////////////////////////////////////////////////////////////////////////////\n\n    subsetArrays = (array, variable) => {\n        return array.map((item) => {\n            return item[variable];\n        });\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Making Changes to Db\n    /////////////////////////////////////////////////////////////////////////////////\n    saveChanges = (event) => {\n        //event.preventDefault();\n\n        const usersLocal = this.state.usersLocal;\n        const usersOnline = this.state.usersOnline;\n\n        //console.log(this.subsetArrays(usersOnline, \"email\"));\n        let usersToAdd = [];\n        let usersToDelete = [];\n\n        usersToAdd = usersLocal.filter(\n            (localusers) =>\n                !this.subsetArrays(usersOnline, \"email\").includes(\n                    localusers.email\n                ) &&\n                !this.subsetArrays(usersOnline, \"username\").includes(\n                    localusers.username\n                )\n        );\n\n        usersToDelete = usersOnline.filter(\n            (localusers) =>\n                !this.subsetArrays(usersLocal, \"email\").includes(\n                    localusers.email\n                ) &&\n                !this.subsetArrays(usersLocal, \"username\").includes(\n                    localusers.username\n                )\n        );\n\n        //console.log(usersToDelete);\n\n        //console.log(usersToDelete);\n\n        if (usersToAdd.length > 0) {\n            axios({\n                method: \"post\",\n                url: \"https://l-gorman.com/api/users/insertmany/\",\n                data: { newUsers: usersToAdd },\n                headers: {\n                    accept: \"application/json\",\n                    \"Access-Control-Allow-Origin\": \"*\",\n                },\n            })\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch(function (error) {\n                    console.log(error);\n                });\n        }\n\n        if (usersToDelete.length > 0) {\n            axios({\n                method: \"post\",\n                url: \"https://l-gorman.com/api/users/deletemany/\",\n                data: { deleteUsers: usersToDelete },\n                headers: {\n                    accept: \"application/json\",\n                    \"Access-Control-Allow-Origin\": \"*\",\n                },\n            })\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch(function (error) {\n                    console.log(error);\n                });\n        }\n\n        this.setState(() => ({\n            usersOnline: usersLocal,\n        }));\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Checking if the component has updated\n    /////////////////////////////////////////////////////////////////////////////////\n    componentDidUpdate() {\n        console.log(this.state);\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Login component</h1>\n                <div className=\"form-container\">\n                    <h2>New Users</h2>\n                    <Form onSubmit={this.addUserlocal}>\n                        <Form.Group controlId=\"basicusername\">\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control\n                                name=\"username\"\n                                type=\"text\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"basicemail\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                name=\"email\"\n                                type=\"email\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n\n                        <Button\n                            className=\"delete-button\"\n                            variant=\"primary\"\n                            type=\"submit\"\n                        >\n                            Add User\n                        </Button>\n                    </Form>\n                </div>\n                <div className=\"form-container\">\n                    <h2>Users</h2>\n                    {this.state.usersLocal.map((user, index) => {\n                        return (\n                            <div\n                                className=\"user-container\"\n                                key={\"user \" + user.email + \" \" + user.username}\n                            >\n                                {index + 1}. {user.username} ({user.email})\n                                <div className=\"deleteButton\">\n                                    <Button\n                                        onClick={(e) =>\n                                            this.deleteUser(e, {\n                                                id: user._id,\n                                                username: user.username,\n                                                email: user.email,\n                                            })\n                                        }\n                                    >\n                                        Delete User\n                                    </Button>\n                                </div>\n                            </div>\n                        );\n                    })}\n                    <div className=\"user-container\">\n                        <Button\n                            onClick={this.saveChanges}\n                            className=\"deleteButton\"\n                        >\n                            Submit\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport { Table, Form } from \"react-bootstrap\";\n\nimport \"./agro-ecological-filter.css\";\n\nclass AgroEco extends Component {\n    render() {\n        return (\n            <div>\n                <h2>Agroecological Filter</h2>\n\n                <div className=\"table-container\">\n                    <Table\n                        striped\n                        bordered\n                        hover\n                        className=\"agro-eco-table-style\"\n                    >\n                        <thead>\n                            <tr>\n                                <th>Biofilters</th>\n                                <th>Site Values</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>Rainfall (mm/year)</td>\n                                <td>\n                                    <Form.Control type=\"number\" />\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Temperature (mean °C/month) </td>\n                                <td>\n                                    <Form.Control type=\"number\" />\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Altitude (average masl)</td>\n                                <td>\n                                    <Form.Control type=\"number\" />\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Soil pH (average)</td>\n                                <td>\n                                    <Form.Control type=\"number\" />\n                                </td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AgroEco;\n","import legfunc from \"./legumefunctions\";\n\nlet PairwiseRankingData = {\n    legumeFunctions: legfunc,\n    male: {\n        pairwiseSelection: [],\n        totals: [],\n    },\n    female: {\n        pairwiseSelection: [],\n        totals: [],\n    },\n    pairwiseSelection: [],\n    totals: [],\n};\n\n// Creating all of the potential pairwise functions for each of the entries\nlet previousidentifiers = [];\nfor (\n    let outerArrayIndex = 0;\n    outerArrayIndex < PairwiseRankingData.legumeFunctions.length;\n    outerArrayIndex++\n) {\n    let function1 = PairwiseRankingData.legumeFunctions[outerArrayIndex];\n    PairwiseRankingData.totals.push({\n        attribute: function1,\n        value: 0,\n    });\n\n    PairwiseRankingData.male.totals.push({\n        attribute: function1,\n        value: 0,\n    });\n\n    PairwiseRankingData.female.totals.push({\n        attribute: function1,\n        value: 0,\n    });\n    for (\n        let innerArrayIndex = 0;\n        innerArrayIndex < PairwiseRankingData.legumeFunctions.length;\n        innerArrayIndex++\n    ) {\n        let function2 = PairwiseRankingData.legumeFunctions[innerArrayIndex];\n\n        // Checking if the pair is the same\n        if (function1 !== function2) {\n            let intermediateidentifier = [function1.label, function2.label];\n            intermediateidentifier.sort();\n            let identifier = intermediateidentifier.join(\"_\");\n\n            if (!previousidentifiers.includes(identifier)) {\n                PairwiseRankingData.pairwiseSelection.push({\n                    funct1: function1,\n                    funct2: function2,\n                    identifier: identifier,\n                    value: \"\",\n                });\n\n                PairwiseRankingData.male.pairwiseSelection.push({\n                    funct1: function1,\n                    funct2: function2,\n                    identifier: identifier,\n                    value: \"\",\n                });\n\n                PairwiseRankingData.female.pairwiseSelection.push({\n                    funct1: function1,\n                    funct2: function2,\n                    identifier: identifier,\n                    value: \"\",\n                });\n                previousidentifiers.push(identifier);\n            }\n        }\n    }\n}\nconsole.log(PairwiseRankingData);\nexport default PairwiseRankingData;\n\n// Returning all of the potential combinations using a nested map function. Remember that flatmap returns an unnested list\n/*PairwiseRankingData.pairwiseScores.individual.push(\n    legumeFunctions.flatMap((item, i, arr) => {\n        return arr.flatMap((subitem) => {\n            if (item != subitem) {\n                return {\n                    item1: item,\n                    item2: subitem,\n                    value: {},\n                };\n            } else {\n                return [];\n            }\n        });\n    })\n);*/\n","import React, { Component } from \"react\";\nimport ContextScores from \"./context-scores-data\";\nimport { Table, Form, Button } from \"react-bootstrap\";\n\nimport \"./context-scores-component.css\";\n\nclass ContextScore extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = ContextScores;\n    }\n\n    componentDidMount() {\n        //console.log(this.state);\n    }\n\n    componentDidUpdate() {\n        //console.log(this.state);\n    }\n\n    handleChange = (event, props) => {\n        props.value = parseInt(event.target.value); // Ensuring that the entered value is an integer\n        const scoresArray = this.state.scores;\n\n        this.changeIndividualScores(scoresArray, props);\n        this.changeAverages(scoresArray, props);\n\n        this.setState({\n            scores: scoresArray,\n        });\n    };\n\n    // Change individual scores in an array through filtering\n    changeIndividualScores = (arr, query) => {\n        arr.forEach((element, index) => {\n            if (\n                element.participant === query.participant &&\n                element.attribute === query.attribute &&\n                element.typology === query.typology\n            ) {\n                arr[index].value = query.value;\n            }\n        });\n    };\n\n    changeAverages = (arr) => {\n        arr.forEach((element, index) => {\n            if (element.scoreType === \"average\") {\n                let average = this.averageAttribute(arr, element.attribute);\n                arr[index].value = average;\n            }\n        });\n    };\n\n    // Update Averages after we see a score change\n    averageAttribute = (arr, attributetoAverage) => {\n        //axisToAverage.forEach((element, index) => {});\n        const scores = [];\n        arr.forEach((element, index) => {\n            if (\n                element.attribute === attributetoAverage &&\n                element.scoreType === \"individual\"\n            ) {\n                scores.push(arr[index].value);\n            }\n        });\n\n        const total = scores.reduce(\n            (accumulator, currentValue) => accumulator + currentValue,\n            0\n        );\n        const average = total / scores.length;\n        return average;\n    };\n\n    renderRowAverage = (props) => {\n        return (\n            <td>\n                {this.averageAttribute(\n                    this.state.scores,\n                    props.attribute\n                ).toFixed(2)}\n            </td>\n        );\n    };\n\n    // A function for generating a row in the input table\n    contextRow = (props) => {\n        return (\n            <tr key={\"row-\" + props.attribute.name}>\n                <td key={\"row-name-\" + props.attribute.name}>\n                    {props.attribute.name}\n                </td>\n                {this.state.typologies.map((typology) => {\n                    return this.state.participants.map((participant) => {\n                        //return <td>{typology.name + participant.name}</td>;\n                        return (\n                            <td\n                                key={\n                                    \"table-entry-\" +\n                                    typology.name +\n                                    \"-\" +\n                                    participant.name +\n                                    \"-\" +\n                                    props.attribute.name\n                                }\n                            >\n                                <Form.Control\n                                    as=\"select\"\n                                    onChange={(event) =>\n                                        this.handleChange(\n                                            event,\n                                            (props = {\n                                                typology: typology,\n                                                participant: participant,\n                                                attribute: props.attribute,\n                                            })\n                                        )\n                                    }\n                                    key={\n                                        \"form-control-\" +\n                                        typology.name +\n                                        \"-\" +\n                                        participant.name +\n                                        \"-\" +\n                                        props.attribute.name\n                                    }\n                                >\n                                    {[0, 1, 2, 3, 4].map((score) => {\n                                        return (\n                                            <option\n                                                key={\n                                                    \"form-option-\" +\n                                                    typology.name +\n                                                    \"-\" +\n                                                    participant.name +\n                                                    \"-\" +\n                                                    props.attribute.name +\n                                                    \"-\" +\n                                                    score\n                                                }\n                                            >\n                                                {score}\n                                            </option>\n                                        );\n                                    })}\n                                </Form.Control>\n                            </td>\n                        );\n                    });\n                })}\n                <this.renderRowAverage attribute={props.attribute} />\n            </tr>\n        );\n    };\n\n    // Using the contextRow and map functions to generate all of the rows in the table\n    allRows = () => {\n        return this.state.attributes.map((attribute) => {\n            return (\n                <this.contextRow\n                    attribute={attribute}\n                    key={\"context-row-\" + attribute.name}\n                />\n            );\n        });\n    };\n\n    // Creating the header for the table. This is a split header which accounts for typologies and participants\n    tableHeader = () => {\n        return (\n            <thead key=\"table-header\">\n                {/* Adding The typology Headers */}\n                <tr key=\"typology-header-row\">\n                    <th key=\"blank-column-head\" rowSpan=\"2\"></th>\n                    {this.state.typologies.map((typology) => {\n                        return (\n                            <th\n                                key={\"typology-header\" + typology.name}\n                                colSpan=\"2\"\n                            >\n                                Typology - {typology.name}\n                            </th>\n                        );\n                    })}\n                    {/* Adding The Average Score Headers */}\n\n                    <th key=\"average-header\" rowSpan=\"2\">\n                        Mean Score (0-4)\n                    </th>\n                </tr>\n                {/* Adding The Participant Headers */}\n                <tr key=\"participant-header-row\">\n                    {this.state.typologies.map((typology) => {\n                        return this.state.participants.map((participant) => {\n                            return (\n                                <th\n                                    key={\n                                        \"participant-header\" + participant.name\n                                    }\n                                >\n                                    {participant.name}\n                                </th>\n                            );\n                        });\n                    })}\n                </tr>\n            </thead>\n        );\n    };\n\n    render() {\n        return (\n            <div key=\"context-score-div\">\n                <h2>Context Scoring</h2>\n                <Table striped bordered hover key=\"table\">\n                    <this.tableHeader key=\"all-table-headers\" />\n                    <tbody key=\"table-body\">\n                        <this.allRows key=\"all-rows\" />\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default ContextScore;\n","import React, { Component } from \"react\";\n\nimport \"./participatory-matrix-scoring.css\";\nimport { Table } from \"react-bootstrap\";\n\nclass ParticipatoryMatrix extends Component {\n    render() {\n        return (\n            <div>\n                <h2>Participatory Matrix Scoring</h2>\n            </div>\n        );\n    }\n}\n\nexport default ParticipatoryMatrix;\n","const legfunc = [\n    {\n        name: \"Food\",\n        label: \"food\",\n    },\n    {\n        name: \"Feed\",\n        label: \"feed\",\n    },\n    {\n        name: \"Income\",\n        label: \"income\",\n    },\n    {\n        name: \"Erosion Control\",\n        label: \"erosion-control\",\n    },\n    {\n        name: \"Fuel\",\n        label: \"fuel\",\n    },\n    {\n        name: \"Soil Fertility\",\n        label: \"soil-fertility\",\n    },\n];\n\nexport default legfunc;\n","import React, { Component } from \"react\";\nimport PairwiseRankingData from \"./pairwise-ranking-data\";\n\nimport \"./pairwise-ranking-component.css\";\n\nimport { Table, Form } from \"react-bootstrap\";\n\nclass PairwiseRanking extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = PairwiseRankingData;\n    }\n\n    componentDidMount() {\n        console.log(this.state);\n    }\n    componentDidUpdate() {\n        console.log(this.state);\n    }\n\n    updateSelections = (event, props) => {\n        if (event.target.value == \"\") {\n            alert(\"Must not select empty value\");\n            return;\n        }\n        // Converting legume function name into legume function item\n        let selectedValue = \"\";\n\n        if (event.target.value === props.funct1.name) {\n            selectedValue = props.funct1;\n        }\n        if (event.target.value === props.funct2.name) {\n            selectedValue = props.funct2;\n        }\n\n        let selectionArr = this.state[props.gender].pairwiseSelection;\n        selectionArr.forEach((selectionItem, selectionIndex) => {\n            if (\n                selectionItem.funct1 === props.funct1 &&\n                selectionItem.funct2 === props.funct2\n            ) {\n                selectionArr[selectionIndex].value = selectedValue;\n                //console.log(selectionArr);\n            }\n        });\n\n        const gender = props.gender;\n        this.setState((prevState) => ({\n            [gender]: {\n                ...prevState[gender],\n                pairfemalewiseSelection: selectionArr,\n            },\n        }));\n\n        this.upDateTotalScore(gender);\n    };\n\n    upDateTotalScore = (gender) => {\n        const totalsArray = this.state[gender].totals;\n        totalsArray.forEach((totalsItem, totalsIndex) => {\n            totalsArray[totalsIndex].value = 0;\n            this.state[gender].pairwiseSelection.forEach((selectionItem) => {\n                if (selectionItem.value === totalsItem.attribute) {\n                    totalsArray[totalsIndex].value++;\n                }\n            });\n        });\n        this.setState((prevState) => ({\n            [gender]: {\n                ...prevState[gender],\n                totals: totalsArray,\n            },\n        }));\n    };\n\n    pairWiseTable = (props) => {\n        const tableGender = props.gender;\n        return (\n            <Table className=\"table-style\" striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>Pair</th>\n                        <th>Selection Female</th>\n                        <th>Selection Male</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state[props.gender].pairwiseSelection.map((item) => {\n                        return (\n                            <tr>\n                                <td>\n                                    {item.funct1.name +\n                                        \" vs \" +\n                                        item.funct2.name}\n                                </td>\n                                <td>\n                                    <Form.Control\n                                        as=\"select\"\n                                        onChange={(\n                                            event,\n\n                                            props = {\n                                                funct1: item.funct1,\n                                                funct2: item.funct2,\n                                                gender: \"female\",\n                                            }\n                                        ) =>\n                                            this.updateSelections(event, props)\n                                        }\n                                    >\n                                        <option></option>\n                                        <option>{item.funct1.name}</option>\n                                        <option>{item.funct2.name}</option>\n                                    </Form.Control>\n                                </td>\n                                <td>\n                                    <Form.Control\n                                        as=\"select\"\n                                        onChange={(\n                                            event,\n\n                                            props = {\n                                                funct1: item.funct1,\n                                                funct2: item.funct2,\n                                                gender: \"male\",\n                                            }\n                                        ) =>\n                                            this.updateSelections(event, props)\n                                        }\n                                    >\n                                        <option></option>\n                                        <option>{item.funct1.name}</option>\n                                        <option>{item.funct2.name}</option>\n                                    </Form.Control>\n                                </td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    };\n\n    pairWiseResultsTable = (props) => {\n        return (\n            <Table striped bordered hover className=\"table-style\">\n                <thead>\n                    <tr>\n                        <th>Attribute</th>\n                        <th>Count Female</th>\n                        <th>Count Male</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.legumeFunctions.map((item, index) => {\n                        return (\n                            <tr>\n                                <td>{item.name}</td>\n                                <td>{this.state.female.totals[index].value}</td>\n                                <td>{this.state.male.totals[index].value}</td>\n                            </tr>\n                        );\n                    })}\n                    {/*this.state[props.gender].totals.map((item) => {\n                        return (\n                            <tr>\n                                <td>{item.attribute.name}</td>\n                                <td>{item.value}</td>\n                            </tr>\n                        );\n                    })*/}\n                </tbody>\n            </Table>\n        );\n    };\n\n    render() {\n        return (\n            <div>\n                <h2>Pairwise Component Ranking</h2>\n                <p>\n                    Select the most important attribute out of the following\n                    pairs\n                </p>\n                <div className=\"table-container\">\n                    <this.pairWiseTable key=\"pairwise-table\" gender=\"female\" />\n                    <this.pairWiseResultsTable\n                        key=\"pairwise-results-table\"\n                        gender=\"female\"\n                        className=\"results-table-pairwise\"\n                    />\n                </div>\n\n                <div className=\"table-container\"></div>\n            </div>\n        );\n    }\n}\n\nexport default PairwiseRanking;\n","import React from \"react\";\n\nimport \"./data-entry-component.css\";\n\nimport AgroEco from \"./agro-ecological-filter\";\nimport ContextScore from \"./context-scores-component\";\nimport ParticipatoryMatrix from \"./participatory-matrix-scoring\";\nimport PairwiseRanking from \"./pairwise-ranking-component\";\n\nclass DataEntry extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>Data Entry</h1>\n                <div className=\"data-entry-container\">\n                    <ContextScore />\n                    <PairwiseRanking />\n                    <ParticipatoryMatrix />\n                    <AgroEco />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DataEntry;\n","import React, { Component } from \"react\";\n\nimport { AiOutlineDatabase, AiFillHome } from \"react-icons/ai\";\nimport { RiUserSettingsLine } from \"react-icons/ri\";\nimport { VscAccount } from \"react-icons/vsc\";\n\nimport Home from \"../home-component/home-component\";\nimport Admin from \"../admin-data-entry-component/admin-data-entry-component\";\nimport Login from \"../login-component/login-component\";\nimport DataEntry from \"../data-entry-component/data-entry-component\";\n\n// Set the icon size for the imported icons\nconst iconSize = 30;\n\nconst sidebarlinkcName = \"sidebar-nav-link\";\n\nconst SidebarData = [\n    {\n        title: \"Home\",\n        routeKey: \"home-route\",\n        component: <Home />,\n        path: \"/home\",\n        icon: <AiFillHome size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n    {\n        title: \"Data Entry\",\n        routeKey: \"data-entry-route\",\n        component: <DataEntry />,\n        path: \"/data-entry\",\n        icon: <AiOutlineDatabase size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n    {\n        title: \"Admin\",\n        routeKey: \"admin-route\",\n        component: <Admin />,\n        path: \"/admin\",\n        icon: <RiUserSettingsLine size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n    {\n        title: \"Login\",\n        routeKey: \"login-route\",\n        component: <Login />,\n        path: \"/login\",\n        icon: <VscAccount size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n];\n\nexport default SidebarData;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { IoIosArrowBack } from \"react-icons/io\";\nimport { AiOutlineMenu } from \"react-icons/ai\";\nimport \"./sidebar-component.css\";\nimport SidebarData from \"./sidebar-data\";\n\nclass Sidebar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Setting the initial state to closed\n        this.state = { open: false };\n    }\n\n    // When this function is trigered, state of the side-bar is change, which triggers a change in the css\n    toggleSidebar = () => {\n        this.setState({\n            open: !this.state.open,\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"container_row\">\n                <div className=\"menu-button\">\n                    <a onClick={this.toggleSidebar}>\n                        <AiOutlineMenu size={50} color=\"black\" />\n                    </a>\n                </div>\n\n                <div\n                    className={\n                        this.state.open\n                            ? \"sidebar-container active\"\n                            : \"sidebar-container\"\n                    }\n                >\n                    <div\n                        key=\"sidebar-header \"\n                        className=\"sidebar-header-container\"\n                    >\n                        <h2>LegumeCHOICE</h2>\n\n                        <a onClick={this.toggleSidebar}>\n                            <div className=\"close-menu-icon\">\n                                <IoIosArrowBack size={40} color=\"white\" />\n                            </div>\n                        </a>\n                    </div>\n\n                    <div className=\"link-container\">\n                        <ul>\n                            {SidebarData.map((item, index) => {\n                                return (\n                                    <Link\n                                        key={index + \"-link-item\"}\n                                        className={item.cName}\n                                        to={item.path}\n                                        onClick={this.toggleSidebar}\n                                    >\n                                        <div className=\"sidebar-list-item\">\n                                            <li\n                                                className=\"sidebar-list-item\"\n                                                key={index + \"-list-item\"}\n                                            >\n                                                <span className=\"side-bar-link-icon\">\n                                                    {item.icon}\n                                                </span>\n                                                <span className=\"side-bar-link-text\">\n                                                    {item.title}\n                                                </span>\n                                            </li>\n                                        </div>\n                                    </Link>\n                                );\n                            })}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Sidebar;\n","import React from \"react\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\n\nimport Sidebar from \"./components/sidebar-component/sidebar-component\";\n\n// In this location, we have all of the details of each of the individual components\nimport SidebarData from \"./components/sidebar-component/sidebar-data\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <Router basename=\"legume-choice-client\">\n            <div>\n                <Sidebar />\n                <div className=\"outer-page-container\">\n                    <div className=\"inner-page-container\">\n                        <Switch>\n                            {SidebarData.map((item) => {\n                                // A function to return each of the components\n                                // Each component, and all of its\n                                return (\n                                    <Route\n                                        exact\n                                        path={item.path}\n                                        key={item.routeKey}\n                                    >\n                                        {item.component}\n                                    </Route>\n                                );\n                            })}\n                            <Redirect exact from=\"/\" to=\"/home\" />\n                        </Switch>\n                    </div>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}