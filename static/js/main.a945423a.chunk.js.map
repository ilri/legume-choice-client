{"version":3,"sources":["components/home-component/home-component-markdown.md","components/home-component/home-component.js","AppContext.js","components/admin-data-entry-component/admin-data-entry-component.js","components/login-component/login-component.js","components/data-entry-component/data-entry-data.js","components/agro-ecological-filter-component/agro-ecological-data.js","components/agro-ecological-filter-component/agro-ecological-filter.js","components/context-scores-component/context-scores-data.js","components/context-scores-component/context-scores-component.js","components/participatory-matrix-scoring-component/participatory-matrix-data.js","components/participatory-matrix-scoring-component/participatory-matrix-scoring.js","components/pairwise-ranking-component/pairwise-ranking-data.js","components/pairwise-ranking-component/pairwise-ranking-component.js","components/data-entry-component/data-entry-component.js","components/results-component/results-data.js","components/results-component/results-component.js","components/view-context-component/view-context-component.js","components/map-polygon-component/map-polygon-component.js","components/project-information-component/project-information-component.js","components/project-information-component/countries-list.js","components/submit-data-component/submit-data-component.js","components/legumes-component/legume-information-clean.js","components/legumes-component/legume-data.js","components/legumes-component/legumes-component.js","components/sidebar-component/sidebar-data.js","components/sidebar-component/sidebar-component.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Home","props","state","file","markdownFile","markdown","axios","get","this","then","response","setState","data","className","children","type","href","download","Button","Component","AppContext","createContext","Login","handleChange","event","variable","target","value","authenticateUser","preventDefault","authenticated","username","password","undefined","context","currentProject","user","newState","_","cloneDeep","newContext","Form","Label","Control","onChange","onClick","React","contextType","legfunc","name","label","typologies","participants","attributes","biofilters","minValue","maxValue","validity","AgroEcoData","AgroEco","tableHeader","renderDefaultValue","tableBody","map","biofilter","index","FormControl","bioFiltersArray","forEach","biofilterSubset","biofilterIndex","parseFloat","agroEcoData","console","log","Card","Header","Body","Text","Table","striped","bordered","hover","ContextScoreData","scores","attributesIndex","length","push","scoreType","attribute","score","participantIndex","typologyIndex","participant","typology","ContextScore","renderRadarChart","avergeScores","scoreLabels","radarData","meta","class","color","defaultOptions","size","axes","scales","captions","captionMargin","dots","zoomDistance","setViewBox","options","smoothing","points","d","toFixed","i","axisProps","scaleProps","fill","shapeProps","captionProps","textAnchor","fontSize","fontFamily","dotProps","mouseEnter","dot","mouseLeave","parseInt","scoresArray","element","averageAttributes","arr","total","numberofscores","average","scoreIndex","averageAttribute","attributetoAverage","scoresLength","renderRowAverage","valueToReturn","contextRow","rowAttribute","rowTypology","rowParticipant","as","allRows","key","rowSpan","colSpan","contextScores","newSelections","JSON","parse","stringify","func","includes","MatrixData","farmerAttributes","farmers","legumeFunctions","blankFarmer","number","gender","selections","summary","scoreTypes","scoresIndividual","legumefunction","legumeFunction","ParticipatoryMatrix","addFarmer","farmersArray","newfarmertoAdd","tempFarmers","updateTotal","farmEntryFields","scoringInput","farmerNameInput","farmerDetailsSelectInput","farmer","updateFarmerName","updateFarmerScore","defaultValue","updateFarmerDetailesSelect","whichFarmer","farmerIndex","legumefuncs","whichValue","funct","funcIndex","newScore","selection","updateFarmerSummary","tableRows","deleteFarmer","farmerNumber","allFarmers","splice","calculateAttributeRank","individualScore","firstScore","secondScore","numberOfScores","numberOfOccurences","occurences","conversion","rank","prevState","updateTypologyScore","scoresByLegumeFunction","individualScores","mapThroughFarmers","scoreError","summaryscore","summaryScoreIndex","totalScoreTemp","farmerSelection","selectionIndex","resultsTable","scoreTypeIndex","bind","participatoryMatrixScores","scoreSum","relevantFarmers","farmerSelectionIndex","toLowerCase","style","PairwiseRankingData","male","pairwiseSelection","totals","female","averages","previousidentifiers","outerArrayIndex","function1","innerArrayIndex","function2","intermediateidentifier","sort","identifier","join","funct1","funct2","PairwiseRanking","updateSelections","selectedValue","selectionArr","selectionItem","upDateTotalScore","alert","totalsArray","totalsItem","totalsIndex","updateAverage","totalsArrayMale","totalsArrayFemale","newAverages","newAverage","pairWiseTable","item","itemIndex","pairWiseResultsTable","pairWiseScores","DataEntry","renderComponents","components","window","scrollTo","component","functionFitForm","legfuncCopy","contextFitForm","attributesCopy","legumeResultsToAdd","functionFit","contextFit","agroEcoFit","overallFit","overallRank","legfunction","agroEcoCopy","agroecofiltter","agroEcoFilter","biofiltersCopy","biofiltersCleaned","resultsData","agroEcoFilters","agroEcoFitSummary","functionFitSummary","contextFitSummary","emptyScoresForLegume","legumes","resultsFilter","selectOptions","orderOptions","numberOfLegumesOptions","whichResults","order","numberOfLegumes","formFilled","Results","initialiseResults","newLegumes","legumeData","allLegumes","newLegume","results","contextData","newContextAverages","newcontextscore","contextscore","pairWiseData","participatoryMatrixData","newFunctionAverages","newfunction","pairwisescoreaverages","pairwisescore","matrixscore","calculateLegumeScores","legumeContextScores","legumecontext","formcontext","scoreToReturn","legumeFunctionScores","formfunction","legumeAgroEcoScores","legumeMin","legumeMax","formvalue","newLegumeState","legume","legumeContextScore","contextAttribute","functionAttribute","legumeAgroEco","agroEcoSummary","min","max","agroecoscoreAccumulator","agroecoscore","contextAccumulator","contextScore","functionAccumulator","functionScore","avgFit","firstLegume","valuesEncountered","secondLegume","checkFormFilled","returnResultsForSummaryTable","agroEcoTable","orderAndFilterLegume","agroEcoItem","contextFitTable","contextItem","functionFitTable","functionItem","returnRank","returnScore","compareScores","a","b","scoreA","scoreB","filter","legumeArr","slice","changeCellColour","summaryTable","renderLegumeResults","changeSelection","resultsFilters","FormGroup","controlId","FormLabel","selectionoption","orderoption","numberoption","renderBody","ViewContext","initialiseContext","appData","center","lat","lng","markerpositions","DraggableMarker","markerRef","useRef","updateMarker","useMemo","dragend","marker","current","newArray","clone","newLat","getLatLng","newLng","changeMarkerPositions","Marker","draggable","eventHandlers","position","ref","DraggablePolygon","Polygon","pathOptions","positions","location","MapPolygon","useState","markerPositions","mapCenter","AppContextMap","useContext","useEffect","MapContainer","zoom","scrollWheelZoom","TileLayer","attribution","url","countryNames","code","country","projectID","uuidv4","ProjectInformation","firstname","surname","email","institution","projectName","majorRegion","minorRegion","communityName","communityType","description","date","Date","projectInfo","FormText","placeholder","readOnly","selected","rows","projectSecret","ManageData","makeDataPublic","dataAvailability","dateToSubmit","dateAvailable","todaysDate","year","getFullYear","month","getMonth","day","getDate","checkAllFieldsComplete","agreeToSubmit","submitData","dataToSubmit","method","headers","accept","catch","error","downLoadData","dataToDownload","encodeURIComponent","variant","uploadData","FormFile","fileUploadButton","fileOnload","jsonFile","result","files","reader","FileReader","onload","readAsText","GetCorrectURL","testOrGenuine","realOrTestProject","secretKey","rel","disabled","food","feed","income","fuel","land","labour","seed","water","markets","rainfall","temp","alt","soilpH","legumeTypes","sources","source","legumesData","blankLegume","provisionData","requirements","LegumesComponent","LegumeFunctionsTable","provisionVariable","SortLegumes","LegumeRequirementsTable","requirement","LegumeAgroEcoTable","agroEcoVariable","LegumeTableAll","addLegume","LegumeDetailsForm","legumetype","LegumeFunctionsForm","provisionType","LegumeRequirmentsForm","changeAgroEcoValue","arrayToChange","minmax","AgroEcoForm","agroEcovariable","LegumeForm","iconSize","sidebarlinkcName","SidebarData","title","routeKey","path","icon","cName","Sidebar","toggleSidebar","sideBarOpen","returnTopBarInformation","project","projectInformationComplete","legumesComplete","dataEntryComplete","resultsComplete","newProject","projectInfoState","legumeState","dataEntryState","resultsState","to","App","Provider","exact","from","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a945423a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/home-component-markdown.173c5c14.md\";","import React, { Component } from \"react\";\nimport \"./home-component.css\";\nimport axios from \"axios\";\nimport ReactMarkdown from \"react-markdown\";\nimport markdownFile from \"./home-component-markdown.md\";\n\nimport { Button } from \"react-bootstrap\";\nclass Home extends Component {\n    // Initialising state for the component\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            file: markdownFile,\n            markdown: \"\",\n        };\n    }\n\n    // Importing markdown when the file is loaded\n    componentDidMount() {\n        axios.get(this.state.file).then((response) => {\n            this.setState({\n                markdown: response.data,\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"markdown-container\">\n                <ReactMarkdown children={this.state.markdown}></ReactMarkdown>\n                <a\n                    type=\"button\"\n                    href={\"legume_CHOICE_guide.pdf\"}\n                    download=\"legume_CHOICE_guide.pdf\"\n                >\n                    <Button>Download Guide</Button>\n                </a>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React, { createContext } from \"react\";\n\n// Skeleton of the app data\n/*\n    user: {},\n    agroEcoData: {},\n    contextScores: {},\n    pairWiseScores: {},\n    participatoryMatrixScores: {},\n    results: {},\n*/\n\n// Creating the app context to be used with the react contextapi\nconst AppContext = createContext();\n\nexport default AppContext;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Form, Button } from \"react-bootstrap\";\n\nimport \"./admin-data-entry-component.css\";\n\nclass Admin extends Component {\n    /////////////////////////////////////////////////////////////////////////////////\n    // Initialising variables\n    /////////////////////////////////////////////////////////////////////////////////\n    constructor(props) {\n        super(props);\n        //console.log(\"Constructor\");\n        this.state = {\n            usersLocal: [],\n            usersOnline: [],\n\n            formEntry: {\n                username: \"\",\n                email: \"\",\n            },\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.addUserlocal = this.addUserlocal.bind(this);\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Loaded when the page loads. Fetches entries from the database\n    /////////////////////////////////////////////////////////////////////////////////\n    componentDidMount() {\n        axios({\n            method: \"get\",\n            url: \"https://l-gorman.com/api/users\",\n            headers: {\n                accept: \"application/json\",\n            },\n        })\n            .then((response) => {\n                this.setState({\n                    usersLocal: response.data,\n                    usersOnline: response.data,\n                });\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Function for adding user\n    /////////////////////////////////////////////////////////////////////////////////\n    addUserlocal = (event) => {\n        event.preventDefault();\n        //console.log(\"About to update state\");\n        const prevUsers = this.state.usersLocal;\n        const newUser = this.state.formEntry;\n\n        // Checking if the username exists already\n        if (newUser.username === \"\") {\n            alert(\"No username entered\");\n            return;\n        }\n        if (prevUsers.some((user) => user.username === newUser.username)) {\n            alert(\"Username already exists\");\n            return;\n        }\n\n        // Checking if the email exists already\n        if (prevUsers.some((user) => user.email === newUser.email)) {\n            alert(\"email already registered\");\n            return;\n        }\n\n        // Updating state\n        this.setState({\n            usersLocal: [...prevUsers, newUser],\n            formEntry: {\n                username: \"\",\n                email: \"\",\n            },\n        });\n    };\n\n    handleChange = (event) => {\n        event.preventDefault();\n        const name = [event.target.name];\n        const value = event.target.value;\n        this.setState((prevState) => ({\n            formEntry: {\n                ...prevState.formEntry,\n                [name]: value,\n            },\n        }));\n    };\n    /////////////////////////////////////////////////////////////////////////////////\n    // Function for deleting user\n    /////////////////////////////////////////////////////////////////////////////////\n    deleteUser = (event, params = {}) => {\n        event.preventDefault();\n\n        const oldUsers = this.state.usersLocal;\n        const newUser = oldUsers.filter(\n            (user) =>\n                user.email !== params.email || user.username !== params.username\n        );\n        //console.log(newUser);\n\n        this.setState((prevState) => ({\n            usersLocal: newUser,\n        }));\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Subset Arrays\n    /////////////////////////////////////////////////////////////////////////////////\n\n    subsetArrays = (array, variable) => {\n        return array.map((item) => {\n            return item[variable];\n        });\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Making Changes to Db\n    /////////////////////////////////////////////////////////////////////////////////\n    saveChanges = (event) => {\n        //event.preventDefault();\n\n        const usersLocal = this.state.usersLocal;\n        const usersOnline = this.state.usersOnline;\n\n        //console.log(this.subsetArrays(usersOnline, \"email\"));\n        let usersToAdd = [];\n        let usersToDelete = [];\n\n        usersToAdd = usersLocal.filter(\n            (localusers) =>\n                !this.subsetArrays(usersOnline, \"email\").includes(\n                    localusers.email\n                ) &&\n                !this.subsetArrays(usersOnline, \"username\").includes(\n                    localusers.username\n                )\n        );\n\n        usersToDelete = usersOnline.filter(\n            (localusers) =>\n                !this.subsetArrays(usersLocal, \"email\").includes(\n                    localusers.email\n                ) &&\n                !this.subsetArrays(usersLocal, \"username\").includes(\n                    localusers.username\n                )\n        );\n\n        //console.log(usersToDelete);\n\n        //console.log(usersToDelete);\n\n        if (usersToAdd.length > 0) {\n            axios({\n                method: \"post\",\n                url: \"https://l-gorman.com/api/users/insertmany/\",\n                data: { newUsers: usersToAdd },\n                headers: {\n                    accept: \"application/json\",\n                    \"Access-Control-Allow-Origin\": \"*\",\n                },\n            })\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch(function (error) {\n                    console.log(error);\n                });\n        }\n\n        if (usersToDelete.length > 0) {\n            axios({\n                method: \"post\",\n                url: \"https://l-gorman.com/api/users/deletemany/\",\n                data: { deleteUsers: usersToDelete },\n                headers: {\n                    accept: \"application/json\",\n                    \"Access-Control-Allow-Origin\": \"*\",\n                },\n            })\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch(function (error) {\n                    console.log(error);\n                });\n        }\n\n        this.setState(() => ({\n            usersOnline: usersLocal,\n        }));\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // Checking if the component has updated\n    /////////////////////////////////////////////////////////////////////////////////\n    componentDidUpdate() {\n        console.log(this.state);\n    }\n\n    userForm = () => {\n        return (\n            <>\n                <div className=\"form-container\">\n                    <h2>New Users</h2>\n                    <Form onSubmit={this.addUserlocal}>\n                        <Form.Group controlId=\"basicusername\">\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control\n                                name=\"username\"\n                                type=\"text\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"basicemail\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                name=\"email\"\n                                type=\"email\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n\n                        <Button\n                            className=\"delete-button\"\n                            variant=\"primary\"\n                            type=\"submit\"\n                        >\n                            Add User\n                        </Button>\n                    </Form>\n                </div>\n                <div className=\"form-container\">\n                    <h2>Users</h2>\n                    {this.state.usersLocal.map((user, index) => {\n                        return (\n                            <div\n                                className=\"user-container\"\n                                key={\"user \" + user.email + \" \" + user.username}\n                            >\n                                {index + 1}. {user.username} ({user.email})\n                                <div className=\"deleteButton\">\n                                    <Button\n                                        onClick={(e) =>\n                                            this.deleteUser(e, {\n                                                id: user._id,\n                                                username: user.username,\n                                                email: user.email,\n                                            })\n                                        }\n                                    >\n                                        Delete User\n                                    </Button>\n                                </div>\n                            </div>\n                        );\n                    })}\n                    <div className=\"user-container\">\n                        <Button\n                            onClick={this.saveChanges}\n                            className=\"deleteButton\"\n                        >\n                            Submit\n                        </Button>\n                    </div>\n                </div>\n            </>\n        );\n    };\n\n    render() {\n        return (\n            <div>\n                <h1>Admin component</h1>\n                <this.userForm />\n            </div>\n        );\n    }\n}\n\nexport default Admin;\n","import React, { Component } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nimport AppContext from \"../../AppContext\";\n\nimport _ from \"lodash\";\n\nimport \"./login-component.css\";\n\nclass Login extends React.Component {\n    // Initialising context\n    //static contextType = AppContext;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: \"\",\n            password: \"\",\n            authenticated: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.context.currentProject === undefined) {\n            this.context.currentProject = {};\n        }\n        if (this.context.currentProject.user !== undefined) {\n            const newState = _.cloneDeep(this.context.currentProject.user);\n            this.setState(newState);\n        }\n\n        if (this.context.currentProject.user === undefined) {\n            const newContext = _.cloneDeep(this.state);\n            this.context.currentProject.user = newContext;\n        }\n    }\n    componentDidUpdate() {\n        const newContext = _.cloneDeep(this.state);\n        this.context.currentProject.user = newContext;\n    }\n\n    handleChange = (event, props) => {\n        this.setState({\n            [props.variable]: event.target.value,\n        });\n    };\n\n    authenticateUser = (event) => {\n        event.preventDefault();\n        this.setState({\n            authenticated: true,\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"form-container\">\n                <h1>Login</h1>\n                <Form>\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        value={this.state.username}\n                        onChange={(event) =>\n                            this.handleChange(event, { variable: \"username\" })\n                        }\n                    />\n                    {/* <Form.Label>Project ID</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        value={this.state.projectID}\n                        onChange={(event) =>\n                            this.handleChange(event, { variable: \"projectID\" })\n                        }\n                    /> */}\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        value={this.state.password}\n                        onChange={(event) =>\n                            this.handleChange(event, { variable: \"password\" })\n                        }\n                    />\n\n                    <Button\n                        className=\"submitButton\"\n                        type=\"submit\"\n                        onClick={this.authenticateUser}\n                    >\n                        Authenticate\n                    </Button>\n                </Form>\n            </div>\n        );\n    }\n}\n\nLogin.contextType = AppContext;\n\nexport default Login;\n","export const legfunc = [\n    {\n        name: \"Food\",\n        label: \"food\",\n    },\n    {\n        name: \"Feed\",\n        label: \"feed\",\n    },\n    {\n        name: \"Income\",\n        label: \"income\",\n    },\n    {\n        name: \"Erosion Control\",\n        label: \"erosion-control\",\n    },\n    {\n        name: \"Fuel\",\n        label: \"fuel\",\n    },\n    {\n        name: \"Soil Fertility\",\n        label: \"soil-fertility\",\n    },\n];\n\nexport const typologies = [\n    {\n        name: \"Low\",\n        label: \"low\",\n    },\n    {\n        name: \"Medium\",\n        label: \"med\",\n    },\n    {\n        name: \"High\",\n        label: \"high\",\n    },\n];\n\nexport const participants = [\n    {\n        name: \"Farmer\",\n        label: \"farmer\",\n    },\n    {\n        name: \"Expert\",\n        label: \"expert\",\n    },\n];\n\nexport const attributes = [\n    {\n        name: \"Land\",\n        label: \"land\",\n    },\n    {\n        name: \"Labour\",\n        label: \"labour\",\n    },\n    {\n        name: \"Seed\",\n        label: \"seed\",\n    },\n    {\n        name: \"Inputs and services\",\n        label: \"inp-serv\",\n    },\n    {\n        name: \"Knowledge and skills\",\n        label: \"knowl-skill\",\n    },\n    {\n        name: \"Water\",\n        label: \"water\",\n    },\n    {\n        name: \"Markets\",\n        label: \"markets\",\n    },\n];\n\nexport const biofilters = [\n    {\n        name: \"Rainfall (mm/year)\",\n        label: \"rainfall\",\n        minValue: 280,\n        maxValue: 4290,\n        value: (280 + 4290) / 2,\n        validity: \"Valid\",\n    },\n    {\n        name: \"Temperature (mean °C/month)\",\n        label: \"temp\",\n        minValue: 0,\n        maxValue: 45,\n        value: 45 / 2,\n        validity: \"Valid\",\n    },\n\n    {\n        name: \"Altitude (average masl)\",\n        label: \"alt\",\n        minValue: 0,\n        maxValue: 3800,\n        value: 3800 / 2,\n        validity: \"Valid\",\n    },\n\n    {\n        name: \"Soil pH (average)\",\n        label: \"soilpH\",\n        minValue: 4,\n        maxValue: 9,\n        value: (4 + 9) / 2,\n        validity: \"Valid\",\n    },\n];\n","import { biofilters } from \"../data-entry-component/data-entry-data\";\nimport _ from \"lodash\";\n\nconst biofiltersCopy = _.cloneDeep(biofilters);\nconst AgroEcoData = {\n    biofilters: biofiltersCopy,\n};\n\nexport { AgroEcoData };\n","// Component to render the \"agro-ecological-filter\" for data entry\n// This component allows users to specify the context for their study\n\nimport React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\n\nimport { Card } from \"react-bootstrap\";\n\nimport _ from \"lodash\";\nimport { AgroEcoData } from \"./agro-ecological-data\";\n\nimport \"./agro-ecological-filter.css\";\nimport \"../data-entry-component/data-entry-component.css\";\nimport AppContext from \"../../AppContext\";\n\nclass AgroEco extends React.Component {\n    //static contextType = AppContext;\n\n    constructor(props) {\n        super(props);\n\n        this.state = _.cloneDeep(AgroEcoData);\n    }\n\n    componentDidMount() {\n        if (this.context.currentProject.agroEcoData !== undefined) {\n            const newState = _.cloneDeep(\n                this.context.currentProject.agroEcoData\n            );\n            this.setState(newState);\n        } else {\n            const newContext = _.cloneDeep(this.state);\n            this.context.currentProject.agroEcoData = newContext;\n        }\n    }\n\n    componentDidUpdate() {\n        const newContext = _.cloneDeep(this.state);\n        this.context.currentProject.agroEcoData = newContext;\n        console.log(this.context.currentProject.agroEcoData);\n    }\n    tableHeader = () => {\n        return (\n            <thead>\n                <tr>\n                    <th>Biofilters</th>\n                    <th>Site Values</th>\n                    <th>Validity</th>\n                </tr>\n            </thead>\n        );\n    };\n\n    renderDefaultValue = (props) => {\n        return props.value;\n    };\n    tableBody = () => {\n        return (\n            <tbody>\n                {this.state.biofilters.map((biofilter, index) => {\n                    return (\n                        <tr key={\"agro-eco-table\" + biofilter.label}>\n                            <td>{biofilter.name}</td>\n                            <td>\n                                <FormControl\n                                    type=\"number\"\n                                    value={this.renderDefaultValue({\n                                        value: biofilter.value,\n                                    })}\n                                    onChange={(event) => {\n                                        this.handleChange(event, {\n                                            biofilter: biofilter,\n                                        });\n                                    }}\n                                />\n                            </td>\n                            <td>{biofilter.validity}</td>\n                        </tr>\n                    );\n                })}\n            </tbody>\n        );\n    };\n\n    handleChange = (event, props) => {\n        const bioFiltersArray = _.cloneDeep(this.state.biofilters);\n\n        let validity = \"Valid\";\n        bioFiltersArray.forEach((biofilterSubset, biofilterIndex) => {\n            if (biofilterSubset.label === props.biofilter.label) {\n                if (event.target.value < biofilterSubset.minValue) {\n                    validity = \"Too low\";\n                }\n                if (event.target.value > biofilterSubset.maxValue) {\n                    validity = \"Too high\";\n                }\n                bioFiltersArray[biofilterIndex].value = parseFloat(\n                    event.target.value\n                );\n                bioFiltersArray[biofilterIndex].validity = validity;\n            }\n        });\n\n        this.setState({\n            biofilters: bioFiltersArray,\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"table-container\">\n                <div className=\"card-container\">\n                    <Card>\n                        <Card.Header className=\"bg-dark text-white\">\n                            <h2>Agroecological Filter</h2>\n                        </Card.Header>\n                        <Card.Body>\n                            <Card.Text>\n                                Using your own knowledge of the field site fill\n                                the green cells with representative data. These\n                                data are used to assess agro-ecological\n                                suitability of the field site for different\n                                legume options in the Legume Option Scores\n                                sheet.\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                </div>\n                <div>\n                    <Form>\n                        <Table striped bordered hover>\n                            {this.tableHeader()}\n\n                            {this.tableBody()}\n                        </Table>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n\nAgroEco.contextType = AppContext;\n\nexport default AgroEco;\n","/* Creating all of the possible combinations for context scores \n Could be done in a better way with a series of map functions, or some sort of recursive for loop\nThis is the quickest/best way I could come up with*/\n\nimport {\n    typologies,\n    participants,\n    attributes,\n} from \"../data-entry-component/data-entry-data\";\n\nconst ContextScoreData = {\n    attributes: attributes,\n    participants: participants,\n    typologies: typologies,\n    scores: [],\n};\n\nfor (\n    let attributesIndex = 0;\n    attributesIndex < attributes.length;\n    attributesIndex++\n) {\n    // Giving room to add average scores for each attribute\n    ContextScoreData.scores.push({\n        scoreType: \"average\",\n        attribute: attributes[attributesIndex],\n        score: 0,\n    });\n\n    for (\n        let participantIndex = 0;\n        participantIndex < participants.length;\n        participantIndex++\n    ) {\n        for (\n            let typologyIndex = 0;\n            typologyIndex < typologies.length;\n            typologyIndex++\n        ) {\n            // Giving room to add individual scores for each entry\n            ContextScoreData.scores.push({\n                scoreType: \"individual\",\n                attribute: attributes[attributesIndex],\n                participant: participants[participantIndex],\n                typology: typologies[typologyIndex],\n                score: 0,\n            });\n        }\n    }\n}\n\nexport { ContextScoreData };\n","import React from \"react\";\n\n// Context scores data is based off of data-entry data\nimport { ContextScoreData } from \"./context-scores-data\";\nimport { Card } from \"react-bootstrap\";\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport _ from \"lodash\";\n\nimport RadarChart from \"react-svg-radar-chart\";\nimport \"react-svg-radar-chart/build/css/index.css\";\n\nimport \"./context-scores-component.css\";\nimport \"../data-entry-component/data-entry-component.css\";\nimport AppContext from \"../../AppContext\";\n\nclass ContextScore extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = _.cloneDeep(ContextScoreData);\n    }\n\n    // Checking for previously existing context, and update state with that previous information\n    componentDidMount() {\n        if (this.context.currentProject === undefined) {\n            this.context.currentProject = {};\n        }\n\n        if (this.context.currentProject.contextScores !== undefined) {\n            const newState = _.cloneDeep(\n                this.context.currentProject.contextScores\n            );\n            this.setState(newState);\n        }\n        if (this.context.currentProject.contextScores === undefined) {\n            const newContext = _.cloneDeep(this.state);\n            this.context.currentProject.contextScores = newContext;\n        }\n    }\n\n    // Update context with new state\n    componentDidUpdate() {\n        let newContext = _.cloneDeep(this.state);\n        this.context.currentProject.contextScores = newContext;\n    }\n\n    //Taken from the react-svg-radar-chart documentation and adapted\n    renderRadarChart = () => {\n        const avergeScores = {};\n        const scoreLabels = {};\n        this.state.scores.forEach((score) => {\n            if (score.scoreType === \"average\") {\n                avergeScores[score.attribute.label] = score.score / 4;\n                scoreLabels[score.attribute.label] = score.attribute.name;\n            }\n        });\n\n        const radarData = [\n            {\n                data: avergeScores,\n                meta: {\n                    class: \"radar-style\",\n                    color: \"green\",\n                },\n            },\n        ];\n\n        const noSmoothing = (points) => {\n            let d =\n                \"M\" + points[0][0].toFixed(4) + \",\" + points[0][1].toFixed(4);\n            for (let i = 1; i < points.length; i++) {\n                d +=\n                    \"L\" +\n                    points[i][0].toFixed(4) +\n                    \",\" +\n                    points[i][1].toFixed(4);\n            }\n            return d + \"z\";\n        };\n\n        const defaultOptions = {\n            size: 200,\n            axes: true, // show axes?\n            scales: 4, // show scale circles?\n            captions: true, // show captions?\n            captionMargin: 10,\n            dots: true, // show dots?\n            zoomDistance: 1.2, // where on the axes are the captions?\n            setViewBox: (options) =>\n                `-${options.captionMargin} 0 ${\n                    options.size + options.captionMargin * 2\n                } ${options.size}`, // custom viewBox ?\n            smoothing: noSmoothing, // shape smoothing function\n            axisProps: () => ({ className: \"axis\" }),\n            scaleProps: () => ({ className: \"scale\", fill: \"none\" }),\n            shapeProps: () => ({ className: \"shape\" }),\n            captionProps: () => ({\n                className: \"caption\",\n                textAnchor: \"middle\",\n                fontSize: 10,\n                fontFamily: \"sans-serif\",\n            }),\n            dotProps: () => ({\n                className: \"dot\",\n                mouseEnter: (dot) => {\n                    console.log(dot);\n                },\n                mouseLeave: (dot) => {\n                    console.log(dot);\n                },\n            }),\n        };\n\n        return (\n            <div className=\"radar-container\">\n                <RadarChart\n                    captions={scoreLabels}\n                    data={radarData}\n                    size={450}\n                    options={defaultOptions}\n                />\n            </div>\n        );\n    };\n\n    // Handling a change in an individual input.\n    // Props includes the information on the individual input (person, typology, attribute)\n    // to ensure the correct score is updated.\n    // Following this, the average score is updated based on the new input\n    handleChange = (event, props) => {\n        props.score = parseInt(event.target.value); // Ensuring that the entered value is an integer\n        let scoresArray = this.state.scores;\n        console.log(props);\n\n        scoresArray.forEach((element, index) => {\n            console.log(element);\n            if (element.scoreType == \"individual\") {\n                if (\n                    element.participant.label == props.participant.label &&\n                    element.attribute.label == props.attribute.label &&\n                    element.typology.label == props.typology.label\n                ) {\n                    scoresArray[index].score = parseInt(props.score);\n                }\n            }\n        });\n\n        this.setState(\n            {\n                scores: scoresArray,\n            },\n            // Update averages after new score\n            () => this.averageAttributes()\n        );\n    };\n\n    // updating all the averages\n    averageAttributes = () => {\n        const arr = _.cloneDeep(this.state.scores);\n\n        this.state.attributes.forEach((attribute) => {\n            let total = 0;\n            let numberofscores = 0;\n\n            arr.forEach((score) => {\n                if (\n                    score.scoreType === \"individual\" &&\n                    score.attribute.label === attribute.label\n                ) {\n                    total += score.score;\n                    console.log(\"total: \" + total);\n                    numberofscores += 1;\n                    console.log(\"number of scores: \" + numberofscores);\n                }\n            });\n            const average = total / numberofscores;\n            arr.forEach((score, scoreIndex) => {\n                if (\n                    score.scoreType === \"average\" &&\n                    score.attribute.label === attribute.label\n                ) {\n                    console.log(average);\n                    arr[scoreIndex].score = average;\n                }\n            });\n\n            this.setState({\n                scores: arr,\n            });\n        });\n\n        // arr.forEach((score, scoreIndex) => {\n        //     this.state.attributes.forEach((attribute) => {\n        //         if (\n        //             score.scoreType === \"average\" &&\n        //             score.attribute.label === attribute.label\n        //         ) {\n        //             let average = this.averageAttribute(arr, attribute);\n        //             console.log(average);\n        //             arr[scoreIndex].score = average;\n        //         }\n        //     });\n        // });\n        this.setState({\n            scores: arr,\n        });\n    };\n    // Update Averages for specific element\n    averageAttribute = (arr, attributetoAverage) => {\n        let scores = 0;\n        let scoresLength = 0;\n        arr.forEach((element, index) => {\n            if (\n                element.attribute.label === attributetoAverage.label &&\n                element.scoreType === \"individual\"\n            ) {\n                //scores.push(arr[index].score);\n                scores += arr[index].score;\n                scoresLength += 1;\n            }\n        });\n\n        const average = scores / scoresLength;\n        return average;\n    };\n\n    // Rendering the row average for the table\n    renderRowAverage = (props) => {\n        return this.state.scores.map((score) => {\n            if (\n                score.scoreType == \"average\" &&\n                score.attribute.label == props.attribute.label\n            ) {\n                return <td>{score.score.toFixed(2)}</td>;\n            }\n        });\n    };\n\n    // Ensuring that the correct values are preselected in the table\n    renderDefaultValue = (props) => {\n        {\n            let valueToReturn = \"\";\n            this.state.scores.forEach((score) => {\n                if (\n                    score.scoreType === \"individual\" &&\n                    score.attribute.label === props.attribute.label &&\n                    score.participant.label === props.participant.label &&\n                    score.typology.label === props.typology.label\n                ) {\n                    //console.log(\"found it: \" + score.score);\n                    valueToReturn = score.score;\n                }\n            });\n\n            return valueToReturn;\n        }\n    };\n\n    // A function for generating a row in the input table\n    contextRow = (props) => {\n        const rowAttribute = props.attribute;\n        return (\n            <tr>\n                {/* Mapping across the different attributes to return a form to enter score (0-4).\n                e.g \n                - Typology-low-> Farmer -> Land score\n                - Typology-high -> Expert -> Seed score*/}\n                <td>{rowAttribute.name}</td>\n                {this.state.typologies.map((rowTypology) => {\n                    return this.state.participants.map((rowParticipant) => {\n                        return (\n                            <td\n                                key={\n                                    \"table-entry-\" +\n                                    rowTypology.name +\n                                    \"-\" +\n                                    rowParticipant.name +\n                                    \"-\" +\n                                    rowAttribute.name\n                                }\n                            >\n                                <FormControl\n                                    as=\"select\"\n                                    key={props.key}\n                                    value={this.renderDefaultValue({\n                                        typology: rowTypology,\n                                        participant: rowParticipant,\n                                        attribute: rowAttribute,\n                                    })}\n                                    onChange={(event) =>\n                                        this.handleChange(event, {\n                                            typology: rowTypology,\n                                            participant: rowParticipant,\n                                            attribute: rowAttribute,\n                                        })\n                                    }\n                                    key={\n                                        \"form-control-\" +\n                                        rowTypology.name +\n                                        \"-\" +\n                                        rowParticipant.name +\n                                        \"-\" +\n                                        rowAttribute.name\n                                    }\n                                >\n                                    {[0, 1, 2, 3, 4].map((score) => {\n                                        return (\n                                            <option\n                                                key={\n                                                    \"form-option-\" +\n                                                    rowTypology.name +\n                                                    \"-\" +\n                                                    rowParticipant.name +\n                                                    \"-\" +\n                                                    rowAttribute.name +\n                                                    \"-\" +\n                                                    score\n                                                }\n                                            >\n                                                {score}\n                                            </option>\n                                        );\n                                    })}\n                                </FormControl>\n                            </td>\n                        );\n                    });\n                })}\n                {this.renderRowAverage({ attribute: rowAttribute })}\n            </tr>\n        );\n    };\n\n    // Using the contextRow and map functions to generate all of the rows in the table\n    allRows = () => {\n        if (this.state !== null) {\n            // console.log(\"rendering all rows\");\n            return this.state.attributes.map((attribute) => {\n                return this.contextRow({\n                    attribute: attribute,\n                    key: \"context-row-\" + attribute.name,\n                });\n            });\n        } else {\n            return <h1>Null State</h1>;\n        }\n    };\n\n    // Creating the header for the table. This is a split header which accounts for typologies and participants\n    tableHeader = () => {\n        if (this.state !== null) {\n            // console.log(\"Header rendering\");\n            return (\n                <thead>\n                    {/* Adding The typology Headers */}\n                    <tr>\n                        <th rowSpan=\"2\"></th>\n                        {this.state.typologies.map((typology) => {\n                            return (\n                                <th\n                                    key={\"typology-header\" + typology.name}\n                                    colSpan=\"2\"\n                                >\n                                    Typology - {typology.name}\n                                </th>\n                            );\n                        })}\n                        {/* Adding The Average Score Headers */}\n\n                        <th key=\"average-header\" rowSpan=\"2\">\n                            Mean Score (0-4)\n                        </th>\n                    </tr>\n                    {/* Adding The Participant Headers */}\n                    <tr key=\"participant-header-row\">\n                        {this.state.typologies.map((typology) => {\n                            return this.state.participants.map(\n                                (participant) => {\n                                    return (\n                                        <th\n                                            key={\n                                                \"participant-header\" +\n                                                participant.name\n                                            }\n                                        >\n                                            {participant.name}\n                                        </th>\n                                    );\n                                }\n                            );\n                        })}\n                    </tr>\n                </thead>\n            );\n        } else {\n            return <h1>Null State</h1>;\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"radar-container\">\n                <div className=\"card-container\">\n                    <Card>\n                        <Card.Header className=\"bg-dark text-white\">\n                            <h2>Context Assessment</h2>\n                        </Card.Header>\n                        <Card.Body>\n                            <Card.Text>\n                                The purpose of the exercise is to come up with a\n                                series of scores from zero to four that indicate\n                                the strength of a series of generic constraints\n                                to legume production. The exercise is carried\n                                out with a group – the questions are asked and\n                                on the basis of the responses, the group is\n                                asked to come up with a score for each\n                                constraint. The facilitator also assigns a score\n                                based on his assessment. This exercise is\n                                conducted separately with the 3 typology groups\n                                and the average for each attribute is the\n                                rounded average of all 6 scores (3 typologies x\n                                2 score types per attribute)\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                </div>\n                <div className=\"context-table\">\n                    <Form>\n                        <Table striped bordered hover>\n                            {this.tableHeader()}\n                            <tbody>{this.allRows()}</tbody>\n                        </Table>\n                    </Form>\n                </div>\n                {this.renderRadarChart()}\n            </div>\n        );\n    }\n}\nContextScore.contextType = AppContext;\n\nexport default ContextScore;\n","import { typologies, legfunc } from \"../data-entry-component/data-entry-data\";\n\nconst newSelections = JSON.parse(JSON.stringify(legfunc));\nnewSelections.forEach((func, index) => {\n    if ([0, 1].includes(index)) {\n        func.score = 4;\n    }\n    if ([2, 3, 4, 5].includes(index)) {\n        func.score = 3;\n    }\n});\nconst newFarmer = {\n    // Setting initial values\n    number: 0,\n    name: \"Jane Bloggs\",\n    gender: \"Female\",\n    typology: \"Medium\",\n    selections: newSelections,\n    total: 0,\n};\n\nconst MatrixData = {\n    farmerAttributes: [\n        {\n            name: \"Number\",\n            label: \"number\",\n        },\n        {\n            name: \"Name\",\n            label: \"name\",\n        },\n        {\n            name: \"Gender\",\n            label: \"gender\",\n        },\n        {\n            name: \"Typology\",\n            label: \"typology\",\n        },\n        {\n            name: \"Matrix Selections\",\n            label: \"selections\",\n        },\n        {\n            name: \"Total\",\n            label: \"total\",\n        },\n    ],\n    farmers: [],\n    legumeFunctions: legfunc,\n    blankFarmer: newFarmer,\n    typology: typologies,\n    gender: [\n        {\n            name: \"Male\",\n            label: \"male\",\n        },\n        {\n            name: \"Female\",\n            label: \"female\",\n        },\n    ],\n    summary: {\n        scoreTypes: [],\n        scoresIndividual: [],\n    },\n};\n\nlegfunc.forEach((legumefunction) => {\n    MatrixData.summary.scoresIndividual.push({\n        legumeFunction: legumefunction,\n        scores: [\n            {\n                name: \"Total\",\n                label: \"total\",\n                score: 0,\n            },\n            {\n                name: \"Score (0-5)\",\n                label: \"score\",\n                score: 0,\n            },\n            {\n                name: \"Average Rank\",\n                label: \"rank\",\n                score: 0,\n            },\n        ],\n    });\n});\n\nlegfunc.forEach((legumefunction, index) => {\n    MatrixData.gender.map((gender) => {\n        MatrixData.summary.scoresIndividual[index].scores.push({\n            name: gender.name + \" (0-5)\",\n            label: gender.label,\n            type: \"gender\",\n            score: 0,\n        });\n    });\n    MatrixData.typology.map((typology) => {\n        MatrixData.summary.scoresIndividual[index].scores.push({\n            name: typology.name + \" (0-5)\",\n            label: typology.name,\n            type: \"typology\",\n            score: 0,\n        });\n    });\n});\n\nMatrixData.summary.scoreTypes = MatrixData.summary.scoresIndividual[0].scores;\n\nexport { MatrixData };\n","import React from \"react\";\nimport _ from \"lodash\";\n\nimport \"./participatory-matrix-scoring.css\";\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport { Card } from \"react-bootstrap\";\nimport { MatrixData } from \"./participatory-matrix-data\";\n\nimport AppContext from \"../../AppContext\";\n\nclass ParticipatoryMatrix extends React.Component {\n    //static contextType = AppContext;\n    constructor(props) {\n        super(props);\n        this.state = _.cloneDeep(MatrixData);\n\n        this.addFarmer = this.addFarmer.bind(this);\n        this.farmEntryFields = this.farmEntryFields.bind(this);\n        this.farmerNameInput = this.farmerNameInput.bind(this);\n        this.scoringInput = this.scoringInput.bind(this);\n        this.farmerDetailsSelectInput = this.farmerDetailsSelectInput.bind(\n            this\n        );\n        this.updateFarmerScore = this.updateFarmerScore.bind(this);\n        this.updateTotal = this.updateTotal.bind(this);\n        this.updateFarmerName = this.updateFarmerName.bind(this);\n        this.updateFarmerDetailesSelect = this.updateFarmerDetailesSelect.bind(\n            this\n        );\n        this.tableHeader = this.tableHeader.bind(this);\n        this.tableRows = this.tableRows.bind(this);\n    }\n\n    componentDidMount() {\n        if (\n            this.context.currentProject.participatoryMatrixScores !== undefined\n        ) {\n            const newState = this.context.currentProject\n                .participatoryMatrixScores;\n            this.setState(newState);\n        } else {\n            const newContext = this.state;\n            this.context.currentProject.participatoryMatrixScores = newContext;\n\n            this.addFarmer();\n        }\n        //console.log(this.state);\n    }\n\n    componentDidUpdate() {\n        const newContext = this.state;\n        this.context.currentProject.participatoryMatrixScores = newContext;\n\n        //console.log(this.state);\n    }\n\n    addFarmer = () => {\n        //This is so important to make sure that we are creating a clean copy\n        //Deep cloning\n        let farmersArray = _.cloneDeep(this.state.farmers);\n        let number = farmersArray.length + 1;\n\n        let newfarmertoAdd = _.cloneDeep(this.state.blankFarmer);\n        newfarmertoAdd.number = number;\n\n        farmersArray.push(newfarmertoAdd);\n\n        this.setState(\n            {\n                farmers: farmersArray,\n                tempFarmers: farmersArray,\n            },\n            () => {\n                this.updateTotal();\n            }\n        );\n    };\n\n    farmEntryFields = (props) => {\n        //console.log(props);\n\n        if (props.attribute.label === \"selections\") {\n            return this.scoringInput(props);\n        } else {\n            if (props.attribute.label === \"name\") {\n                return this.farmerNameInput(props);\n            } else {\n                return this.farmerDetailsSelectInput(props);\n            }\n        }\n    };\n\n    farmerNameInput = (props) => {\n        return (\n            <td>\n                <FormControl\n                    value={props.farmer.name}\n                    type=\"text\"\n                    onChange={(event) => this.updateFarmerName(event, props)}\n                />\n            </td>\n        );\n    };\n\n    scoringInput = (props) => {\n        return (\n            <td>\n                <FormControl\n                    value={props.legumeFunctions.score}\n                    type=\"number\"\n                    onChange={(event) => this.updateFarmerScore(event, props)}\n                />\n            </td>\n        );\n    };\n\n    farmerDetailsSelectInput = (props) => {\n        return (\n            <td>\n                <FormControl\n                    as=\"select\"\n                    defaultValue={props.farmer[props.attribute.label]}\n                    onChange={(event) =>\n                        this.updateFarmerDetailesSelect(event, props)\n                    }\n                >\n                    {this.state[props.attribute.label].map((attribute) => {\n                        return (\n                            <option\n                                key={\n                                    \"form-option-\" +\n                                    props.attribute.label +\n                                    \"-\" +\n                                    props.farmer.number +\n                                    \"-\" +\n                                    attribute.label\n                                }\n                            >\n                                {attribute.name}\n                            </option>\n                        );\n                    })}\n                </FormControl>\n            </td>\n        );\n    };\n\n    updateFarmerScore = (event, props) => {\n        //let farmersArray = [...this.state.farmers];\n        let farmersArray = _.cloneDeep(this.state.farmers);\n\n        //console.log(farmersArray);\n        //console.log(props);\n        // Finding which farmer to subset\n        let whichFarmer = \"\";\n        farmersArray.forEach((farmer, farmerIndex) => {\n            if (farmer.number === props.farmer.number) {\n                whichFarmer = farmerIndex;\n            }\n        });\n\n        let legumefuncs = this.state.legumeFunctions;\n        let whichValue = \"\";\n        // Finding which value to update\n        legumefuncs.forEach((funct, funcIndex) => {\n            if (funct.label === props.legumeFunctions.label) {\n                whichValue = funcIndex;\n            }\n        });\n\n        let newScore = { ...farmersArray[whichFarmer].selections[whichValue] };\n        newScore.score = parseInt(event.target.value);\n        farmersArray[whichFarmer].selections[whichValue] = newScore;\n        this.setState(\n            {\n                tempFarmers: farmersArray,\n            },\n            () => {\n                this.updateTotal();\n            }\n        );\n    };\n\n    updateTotal = () => {\n        //const farmers = this.state.farmers;\n        const farmers = _.cloneDeep(this.state.tempFarmers);\n\n        farmers.map((farmer) => {\n            farmer.total = 0;\n\n            farmer.selections.map((selection) => {\n                farmer.total += selection.score;\n            });\n        });\n\n        this.setState(\n            {\n                tempFarmers: farmers,\n            },\n            () => {\n                this.updateFarmerSummary();\n            }\n        );\n    };\n\n    updateFarmerName = (event, props) => {\n        let farmersArray = [...this.state.farmers];\n\n        farmersArray.forEach((farmer, farmerIndex) => {\n            if (farmer.number === props.farmer.number) {\n                farmersArray[farmerIndex].name = event.target.value;\n            }\n        });\n        this.setState({ farmers: farmersArray });\n    };\n\n    updateFarmerDetailesSelect = (event, props) => {\n        //let farmersArray = [...this.state.farmers]; // making a shallow copy\n        let farmersArray = _.cloneDeep(this.state.farmers); // making a deep copy\n        farmersArray.forEach((farmer, farmerIndex) => {\n            if (farmer.number === props.farmer.number) {\n                farmersArray[farmerIndex][props.attribute.label] =\n                    event.target.value;\n            }\n        });\n        //this.setState({ farmers: farmersArray });\n        //this.updateFarmerSummary();\n\n        this.setState({ tempFarmers: farmersArray }, () => {\n            this.updateFarmerSummary();\n        });\n    };\n\n    tableHeader = () => {\n        if (this.state !== null) {\n            return (\n                <thead>\n                    <tr>\n                        <th rowSpan=\"2\">Farmer Number</th>\n                        <th rowSpan=\"2\">Farmer Name</th>\n                        <th rowSpan=\"2\">Gender</th>\n                        <th rowSpan=\"2\">Typology</th>\n                        <th rowSpan=\"1\" colSpan=\"6\">\n                            Functions\n                        </th>\n                        <th rowSpan=\"2\">Total</th>\n                        <th rowSpan=\"2\">Delete Farmer</th>\n                    </tr>\n                    <tr>\n                        {this.state.legumeFunctions.map((funct) => {\n                            return (\n                                <th\n                                    key={\n                                        \"participatory-matrix-head-\" +\n                                        funct.label\n                                    }\n                                >\n                                    {funct.name}\n                                </th>\n                            );\n                        })}\n                    </tr>\n                </thead>\n            );\n        } else {\n            return <h1>Null State</h1>;\n        }\n    };\n\n    tableRows = () => {\n        if (this.state !== null) {\n            return this.state.farmers.map((farmer) => {\n                return (\n                    <tr key={\"participatory-matrix-body-\" + farmer.number}>\n                        {this.state.farmerAttributes.map((attribute) => {\n                            // Returning a value for each of the potential selections\n                            if (attribute.label === \"selections\") {\n                                return farmer.selections.map((selection) => {\n                                    return this.farmEntryFields({\n                                        key:\n                                            \"participatory-matrix-body-\" +\n                                            farmer.number +\n                                            selection.label,\n                                        attribute: attribute,\n                                        farmer: farmer,\n                                        legumeFunctions: selection,\n                                        farmer: farmer,\n                                    });\n                                });\n\n                                // Return the farmers number for the row number\n                            } else if (attribute.label === \"number\") {\n                                return (\n                                    <td\n                                        key={\n                                            \"select-input\" +\n                                            farmer.number +\n                                            \"-\" +\n                                            attribute.label\n                                        }\n                                    >\n                                        {farmer.number}\n                                    </td>\n                                );\n                                // Return the total score for that particular farmer\n                            } else if (attribute.label === \"total\") {\n                                return (\n                                    <td\n                                        key={\n                                            \"select-input\" +\n                                            farmer.number +\n                                            \"-\" +\n                                            attribute.label\n                                        }\n                                    >\n                                        {farmer.total}\n                                    </td>\n                                );\n                            } else {\n                                return this.farmEntryFields({\n                                    key:\n                                        \"farmEntry-field-\" +\n                                        attribute.label +\n                                        \"-\" +\n                                        farmer.number,\n                                    attribute: attribute,\n                                    farmer: farmer,\n                                });\n                            }\n                        })}\n\n                        <td key={\"delete-farmer\" + farmer.number}>\n                            <Button\n                                onClick={(event) => {\n                                    this.deleteFarmer(event, {\n                                        farmerNumber: farmer.number,\n                                    });\n                                }}\n                            >\n                                Delete\n                            </Button>\n                        </td>\n                    </tr>\n                );\n            });\n        } else {\n            return <h1>Null State</h1>;\n        }\n    };\n\n    deleteFarmer = (event, props) => {\n        console.log(props);\n        console.log(this.state);\n        const allFarmers = _.cloneDeep(this.state.farmers);\n\n        // Removing the correct farmer\n        allFarmers.forEach((farmer, index) => {\n            if (farmer.number === props.farmerNumber) {\n                allFarmers.splice(index, 1);\n            }\n        });\n\n        allFarmers.forEach((farmer, index) => {\n            farmer.number = index + 1;\n        });\n\n        this.setState({\n            farmers: allFarmers,\n        });\n    };\n    calculateAttributeRank = () => {\n        const scoresIndividual = _.cloneDeep(\n            this.state.summary.scoresIndividual\n        );\n\n        // Initialise the ranks\n        scoresIndividual.forEach((individualScore) => {\n            // Setting rank to zero\n            individualScore.scores[2].score = 1;\n        });\n\n        // Actually ranking the scores (draws included)\n        scoresIndividual.forEach((firstScore) => {\n            scoresIndividual.forEach((secondScore) => {\n                if (firstScore.scores[1].score > secondScore.scores[1].score) {\n                    firstScore.scores[2].score = firstScore.scores[2].score;\n                }\n                if (firstScore.scores[1].score < secondScore.scores[1].score) {\n                    firstScore.scores[2].score += 1;\n                }\n            });\n        });\n\n        // Averaging the ranks based on number of ties\n        const numberOfScores = this.state.legumeFunctions.length;\n        const numberOfOccurences = [];\n        for (let i = 0; i < numberOfScores; i++) {\n            numberOfOccurences[i] = {\n                number: i + 1,\n                occurences: 0,\n                conversion: i + 1,\n            };\n        }\n\n        // Finding out how to convert to ranking average\n        scoresIndividual.forEach((firstScore) => {\n            numberOfOccurences.forEach((rank) => {\n                if (firstScore.scores[2].score == rank.number) {\n                    rank.occurences += 1;\n                    rank.conversion =\n                        (rank.occurences + 2 * rank.number - 1) / 2;\n                }\n            });\n        });\n\n        //applying ranking average conversion\n        scoresIndividual.forEach((firstScore) => {\n            numberOfOccurences.forEach((rank) => {\n                if (firstScore.scores[2].score == rank.number) {\n                    firstScore.scores[2].score = rank.conversion;\n                }\n            });\n        });\n\n        this.setState((prevState) => {\n            return {\n                ...prevState,\n                summary: {\n                    ...prevState.summary,\n                    scoresIndividual: scoresIndividual,\n                },\n            };\n        });\n    };\n\n    // Return a score from the farmer if they match the correct criteria\n    mapThroughFarmers(props) {\n        const farmers = _.cloneDeep(this.state.farmers);\n\n        let scoreSum = 0;\n        let relevantFarmers = 0;\n\n        farmers.map((farmer, farmerIndex) => {\n            farmer.selections.map((farmerSelection, farmerSelectionIndex) => {\n                // If the farmer has the correct gender\n                // If the farmer is selecting the correct attribute\n                // return Score\n                // else\n                // return 0\n\n                if (props.variable === \"typology\") {\n                    if (\n                        props.typology.toLowerCase() ===\n                            farmer.typology.toLowerCase() &&\n                        props.selection.label === farmerSelection.label\n                    ) {\n                        relevantFarmers += 1;\n                        scoreSum += parseFloat(\n                            (farmerSelection.score * 5) / 20\n                        );\n                    }\n                }\n                if (props.variable === \"gender\") {\n                    if (\n                        props.gender.toLowerCase() ===\n                            farmer.gender.toLowerCase() &&\n                        props.selection.label === farmerSelection.label\n                    ) {\n                        relevantFarmers += 1;\n                        scoreSum += parseFloat(\n                            (farmerSelection.score * 5) / 20\n                        );\n                    }\n                }\n            });\n        });\n\n        if (relevantFarmers > 0) {\n            return parseFloat(scoreSum / relevantFarmers).toFixed(2);\n        }\n\n        return parseFloat(scoreSum).toFixed(2);\n    }\n\n    updateTypologyScore = () => {\n        const summary = _.cloneDeep(this.state.summary.scoresIndividual);\n\n        summary.map((scoresByLegumeFunction) => {\n            scoresByLegumeFunction.scores.map((individualScores) => {\n                if (individualScores.type === \"typology\") {\n                    individualScores.score = this.mapThroughFarmers({\n                        variable: \"typology\",\n                        typology: individualScores.label,\n                        selection: scoresByLegumeFunction.legumeFunction,\n                    });\n                }\n                if (individualScores.type === \"gender\") {\n                    individualScores.score = this.mapThroughFarmers({\n                        variable: \"gender\",\n                        gender: individualScores.label,\n                        selection: scoresByLegumeFunction.legumeFunction,\n                    });\n                }\n            });\n        });\n\n        this.setState(\n            (prevState) => {\n                return {\n                    ...prevState,\n                    summary: {\n                        ...prevState.summary,\n                        scoresIndividual: summary,\n                    },\n                };\n            },\n            () => {\n                this.calculateAttributeRank();\n            }\n        );\n    };\n\n    updateFarmerSummary = () => {\n        const summary = _.cloneDeep(this.state.summary.scoresIndividual);\n        //const farmers = _.cloneDeep(this.state.farmers);\n        const farmers = _.cloneDeep(this.state.tempFarmers);\n        // Update total score per attribute\n        console.log(this.state);\n        let scoreError = false;\n\n        summary.forEach((summaryscore, summaryScoreIndex) => {\n            summary[summaryScoreIndex].scores[0].score = 0;\n            let totalScoreTemp = _.cloneDeep(\n                summary[summaryScoreIndex].scores[0].score\n            );\n            farmers.forEach((farmer) => {\n                farmer.selections.forEach((farmerSelection, selectionIndex) => {\n                    if (\n                        farmerSelection.label ==\n                        summaryscore.legumeFunction.label\n                    ) {\n                        // Setting total score\n\n                        totalScoreTemp +=\n                            farmerSelection.score / farmers.length;\n\n                        if (farmer.total > 20 || farmerSelection.score < 0) {\n                            scoreError = true;\n                            //alert(\"Incorrect score\");\n                        }\n                        summary[summaryScoreIndex].scores[0].score = parseFloat(\n                            parseFloat(totalScoreTemp).toFixed(2)\n                        );\n                        // Setting 0-5 score\n                        summary[summaryScoreIndex].scores[1].score = parseFloat(\n                            parseFloat((totalScoreTemp * 5) / 20).toFixed(2)\n                        );\n                    }\n                });\n            });\n        });\n\n        if (scoreError == false) {\n            this.setState(\n                (prevState) => {\n                    return {\n                        //...prevState,\n                        tempFarmers: [],\n                        farmers: farmers,\n                        summary: {\n                            ...prevState.summary,\n                            scoresIndividual: summary,\n                        },\n                    };\n                },\n                () => {\n                    //this.updateGenderScore();\n                    this.updateTypologyScore();\n                }\n            );\n        }\n    };\n\n    resultsTable = () => {\n        return (\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th rowSpan=\"2\">Summary Type</th>\n                        <th\n                            rowSpan=\"1\"\n                            colSpan={this.state.legumeFunctions.length}\n                        >\n                            Function\n                        </th>\n                    </tr>\n\n                    <tr>\n                        {this.state.legumeFunctions.map((funct) => {\n                            return (\n                                <th\n                                    key={\n                                        \"participatory-matrix-head-\" +\n                                        funct.label\n                                    }\n                                >\n                                    {funct.name}\n                                </th>\n                            );\n                        })}\n                    </tr>\n                </thead>\n\n                <tbody>\n                    {this.state.summary.scoreTypes.map(\n                        (type, scoreTypeIndex) => {\n                            return (\n                                <tr>\n                                    <td>{type.name}</td>\n                                    {this.state.summary.scoresIndividual.map(\n                                        (individualScore) => {\n                                            return (\n                                                <td>\n                                                    {\n                                                        individualScore.scores[\n                                                            scoreTypeIndex\n                                                        ].score\n                                                    }\n                                                </td>\n                                            );\n                                        }\n                                    )}\n                                </tr>\n                            );\n                        }\n                    )}\n                </tbody>\n            </Table>\n        );\n    };\n\n    render() {\n        return (\n            <div className=\"card-container\">\n                <div className=\"card-container\">\n                    <Card>\n                        <Card.Header className=\"bg-dark text-white\">\n                            <h2>Participatory Matrix Scoring</h2>\n                        </Card.Header>\n                        <Card.Body>\n                            <Card.Text>\n                                Purpose of the exercise is to assess what\n                                individual farmers of different gender and\n                                typology would look for in any new intervention\n                                involving legumes. This is a separate approach\n                                to establishing/validating community aspirations\n                                on legume functions. This helps to triangulate\n                                the results of the previous exercise. Farmers\n                                are given 20 beans/seeds and asked to allocate\n                                them according to the importance of the various\n                                functions for their future aspirations. The data\n                                from this exercise produces an overall community\n                                score for each legume function but also allows\n                                variation according to type and gender to be\n                                assessed.\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                </div>\n                <Form>\n                    <Table striped bordered hover>\n                        {this.tableHeader()}\n                        <tbody>{this.tableRows()}</tbody>\n                    </Table>\n                    <Button\n                        style={{ \"margin-bottom\": \"2em\" }}\n                        className=\"float-right\"\n                        onClick={this.addFarmer}\n                    >\n                        Add Farmer\n                    </Button>\n                </Form>\n\n                {this.resultsTable()}\n            </div>\n        );\n    }\n}\n\nParticipatoryMatrix.contextType = AppContext;\n\nexport default ParticipatoryMatrix;\n","import { legfunc } from \"../data-entry-component/data-entry-data\";\n\nlet PairwiseRankingData = {\n    legumeFunctions: legfunc,\n    male: {\n        pairwiseSelection: [],\n        totals: [],\n    },\n    female: {\n        pairwiseSelection: [],\n        totals: [],\n    },\n    averages: [],\n};\n\n// Creating all of the potential pairwise functions for each of the entries\nlet previousidentifiers = [];\nfor (\n    let outerArrayIndex = 0;\n    outerArrayIndex < PairwiseRankingData.legumeFunctions.length;\n    outerArrayIndex++\n) {\n    let function1 = PairwiseRankingData.legumeFunctions[outerArrayIndex];\n\n    PairwiseRankingData.male.totals.push({\n        attribute: function1,\n        value: 0,\n    });\n\n    PairwiseRankingData.female.totals.push({\n        attribute: function1,\n        value: 0,\n    });\n\n    PairwiseRankingData.averages.push({\n        attribute: function1,\n        value: 0,\n    });\n\n    for (\n        let innerArrayIndex = 0;\n        innerArrayIndex < PairwiseRankingData.legumeFunctions.length;\n        innerArrayIndex++\n    ) {\n        let function2 = PairwiseRankingData.legumeFunctions[innerArrayIndex];\n\n        // Checking if the pair is the same\n        if (function1 !== function2) {\n            let intermediateidentifier = [function1.label, function2.label];\n            intermediateidentifier.sort();\n            let identifier = intermediateidentifier.join(\"_\");\n\n            if (!previousidentifiers.includes(identifier)) {\n                PairwiseRankingData.male.pairwiseSelection.push({\n                    funct1: function1,\n                    funct2: function2,\n                    identifier: identifier,\n                    value: function1,\n                });\n\n                PairwiseRankingData.female.pairwiseSelection.push({\n                    funct1: function1,\n                    funct2: function2,\n                    identifier: identifier,\n                    value: function1,\n                });\n                previousidentifiers.push(identifier);\n            }\n        }\n    }\n}\nexport default PairwiseRankingData;\n","import React, { Component } from \"react\";\nimport PairwiseRankingData from \"./pairwise-ranking-data\";\n\nimport \"./pairwise-ranking-component.css\";\nimport \"../data-entry-component/data-entry-component.css\";\n\nimport { Card } from \"react-bootstrap\";\n\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\n\nimport AppContext from \"../../AppContext\";\n\nimport _ from \"lodash\";\n\nclass PairwiseRanking extends Component {\n    //static contextType = AppContext;\n    constructor(props) {\n        super(props);\n\n        this.state = _.cloneDeep(PairwiseRankingData);\n    }\n\n    componentDidMount() {\n        //console.log(this.state);\n\n        if (this.context.currentProject.pairWiseScores !== undefined) {\n            let newState = _.cloneDeep(\n                this.context.currentProject.pairWiseScores\n            );\n            this.setState(newState, () => {\n                this.upDateTotalScore(\"male\");\n                this.upDateTotalScore(\"female\");\n            });\n        } else {\n            let newContext = _.cloneDeep(this.state);\n            this.context.currentProject.pairWiseScores = newContext;\n            this.upDateTotalScore(\"male\");\n            this.upDateTotalScore(\"female\");\n        }\n    }\n    componentDidUpdate() {\n        let newContext = _.cloneDeep(this.state);\n        this.context.currentProject.pairWiseScores = newContext;\n        console.log(this.state);\n    }\n\n    updateSelections = (event, props) => {\n        if (event.target.value == \"\") {\n            alert(\"Must not select empty value\");\n            return;\n        }\n        // Converting legume function name into legume function item\n        let selectedValue = \"\";\n\n        if (event.target.value === props.funct1.name) {\n            selectedValue = props.funct1;\n        }\n        if (event.target.value === props.funct2.name) {\n            selectedValue = props.funct2;\n        }\n\n        let selectionArr = _.cloneDeep(\n            this.state[props.gender].pairwiseSelection\n        );\n        selectionArr.forEach((selectionItem, selectionIndex) => {\n            if (\n                selectionItem.funct1.label === props.funct1.label &&\n                selectionItem.funct2.label === props.funct2.label\n            ) {\n                selectionArr[selectionIndex].value = selectedValue;\n                console.log(selectionArr);\n            }\n        });\n        //console.log(\"selection: \" + JSON.stringify(selectionArr));\n\n        const gender = props.gender;\n        this.setState(\n            (prevState) => ({\n                [gender]: {\n                    ...prevState[gender],\n                    pairwiseSelection: selectionArr,\n                },\n            }),\n            () => {\n                this.upDateTotalScore(gender);\n            }\n        );\n    };\n\n    upDateTotalScore = (gender) => {\n        const totalsArray = _.cloneDeep(this.state[gender].totals);\n        totalsArray.forEach((totalsItem, totalsIndex) => {\n            totalsArray[totalsIndex].value = 0;\n            this.state[gender].pairwiseSelection.forEach((selectionItem) => {\n                if (selectionItem.value.label === totalsItem.attribute.label) {\n                    totalsArray[totalsIndex].value++;\n                }\n            });\n        });\n        this.setState(\n            (prevState) => ({\n                [gender]: {\n                    ...prevState[gender],\n                    totals: totalsArray,\n                },\n            }),\n            () => {\n                this.updateAverage();\n            }\n        );\n\n        //this.updateAverage();\n    };\n\n    updateAverage = () => {\n        const totalsArrayMale = _.cloneDeep(this.state[\"male\"].totals);\n        const totalsArrayFemale = _.cloneDeep(this.state[\"female\"].totals);\n\n        const newAverages = _.cloneDeep(this.state.averages);\n\n        newAverages.map((average, index) => {\n            const newAverage =\n                (totalsArrayMale[index].value +\n                    totalsArrayFemale[index].value) /\n                2;\n            newAverages[index].value = newAverage;\n            this.setState({\n                averages: newAverages,\n            });\n        });\n    };\n\n    pairWiseTable = (props) => {\n        const tableGender = props.gender;\n        return (\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>Pair</th>\n                        <th>Selection Female</th>\n                        <th>Selection Male</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state[props.gender].pairwiseSelection.map(\n                        (item, itemIndex) => {\n                            return (\n                                <tr\n                                    key={\n                                        \"pairwise-ranking-table-row\" +\n                                        item.funct1.name +\n                                        item.funct2.name\n                                    }\n                                >\n                                    <td\n                                        key={\n                                            \"pairwise-ranking-table-item-name\" +\n                                            item.funct1.name +\n                                            \"-\" +\n                                            item.funct2.name\n                                        }\n                                    >\n                                        {item.funct1.name +\n                                            \" vs \" +\n                                            item.funct2.name}\n                                    </td>\n                                    <td\n                                        key={\n                                            \"pairwise-ranking-table-item-form\" +\n                                            item.funct1.name +\n                                            \"-\" +\n                                            item.funct2.name +\n                                            \"-female\"\n                                        }\n                                    >\n                                        <FormControl\n                                            value={\n                                                this.state[\"female\"]\n                                                    .pairwiseSelection[\n                                                    itemIndex\n                                                ].value.name\n                                            }\n                                            key={\n                                                \"pairwise-ranking-table-form\" +\n                                                item.funct1.name +\n                                                \"-\" +\n                                                item.funct2.name +\n                                                \"-female\"\n                                            }\n                                            as=\"select\"\n                                            onChange={(event) =>\n                                                this.updateSelections(event, {\n                                                    funct1: item.funct1,\n                                                    funct2: item.funct2,\n                                                    gender: \"female\",\n                                                })\n                                            }\n                                        >\n                                            <option>{item.funct1.name}</option>\n                                            <option>{item.funct2.name}</option>\n                                        </FormControl>\n                                    </td>\n                                    <td\n                                        key={\n                                            \"pairwise-ranking-table-item-form\" +\n                                            item.funct1.name +\n                                            \"-\" +\n                                            item.funct2.name +\n                                            \"-male\"\n                                        }\n                                    >\n                                        <FormControl\n                                            as=\"select\"\n                                            value={\n                                                this.state[\"male\"]\n                                                    .pairwiseSelection[\n                                                    itemIndex\n                                                ].value.name\n                                            }\n                                            key={\n                                                \"pairwise-ranking-table-form\" +\n                                                item.funct1.name +\n                                                \"-\" +\n                                                item.funct2.name +\n                                                \"-male\"\n                                            }\n                                            onChange={(event) =>\n                                                this.updateSelections(event, {\n                                                    funct1: item.funct1,\n                                                    funct2: item.funct2,\n                                                    gender: \"male\",\n                                                })\n                                            }\n                                        >\n                                            <option>{item.funct1.name}</option>\n                                            <option>{item.funct2.name}</option>\n                                        </FormControl>\n                                    </td>\n                                </tr>\n                            );\n                        }\n                    )}\n                </tbody>\n            </Table>\n        );\n    };\n\n    pairWiseResultsTable = (props) => {\n        return (\n            <Table striped bordered hover className=\"table-style\">\n                <thead>\n                    <tr>\n                        <th>Attribute</th>\n                        <th>Count Female</th>\n                        <th>Count Male</th>\n                        <th>Average Count</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.legumeFunctions.map((item, index) => {\n                        return (\n                            <tr key={\"pairwise-results-table-row-\" + item.name}>\n                                <td\n                                    key={\n                                        \"pairwise-results-table-row-item-\" +\n                                        item.name\n                                    }\n                                >\n                                    {item.name}\n                                </td>\n                                <td\n                                    key={\n                                        \"pairwise-results-table-row-item-female-\" +\n                                        item.name\n                                    }\n                                >\n                                    {this.state.female.totals[index].value}\n                                </td>\n                                <td\n                                    key={\n                                        \"pairwise-results-table-row-item-male-\" +\n                                        item.name\n                                    }\n                                >\n                                    {this.state.male.totals[index].value}\n                                </td>\n\n                                <td\n                                    key={\n                                        \"pairwise-results-table-row-item-average-\" +\n                                        item.name\n                                    }\n                                >\n                                    {this.state.averages[index].value}\n                                </td>\n                            </tr>\n                        );\n                    })}\n                    {/*this.state[props.gender].totals.map((item) => {\n                        return (\n                            <tr>\n                                <td>{item.attribute.name}</td>\n                                <td>{item.value}</td>\n                            </tr>\n                        );\n                    })*/}\n                </tbody>\n            </Table>\n        );\n    };\n\n    render() {\n        return (\n            <div className=\"card-container\">\n                <div className=\"card-container\">\n                    <Card>\n                        <Card.Header className=\"bg-dark text-white\">\n                            <h2>Pairwise Component Ranking</h2>\n                        </Card.Header>\n                        <Card.Body>\n                            <Card.Text>\n                                This exercise is carried out as a group. The\n                                method for this exercise involves presenting all\n                                possible pairs of functions to participants and\n                                asking them to vote on which is more important.\n                                The exercise is conducted separately for men and\n                                women.\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                </div>\n                <div className=\"table-container\">\n                    <Form className=\"table-container\">\n                        {this.pairWiseTable({ gender: \"female\" })}\n                    </Form>\n                    {this.pairWiseResultsTable({\n                        gender: \"female\",\n                        className: \"results-table-pairwise\",\n                    })}\n                </div>\n\n                <div className=\"table-container\"></div>\n            </div>\n        );\n    }\n}\nPairwiseRanking.contextType = AppContext;\n\nexport default PairwiseRanking;\n","import React from \"react\";\n\nimport \"./data-entry-component.css\";\n\n// These are all of the subcomponents used for data-enetry\nimport AgroEco from \"../agro-ecological-filter-component/agro-ecological-filter\";\nimport ContextScore from \"../context-scores-component/context-scores-component\";\nimport ParticipatoryMatrix from \"../participatory-matrix-scoring-component/participatory-matrix-scoring\";\nimport PairwiseRanking from \"../pairwise-ranking-component/pairwise-ranking-component\";\n\nimport AppContext from \"../../AppContext\";\n\n/* This component simply calls all of the smaller subcomponents\nrequired for data-entry*/\n\nclass DataEntry extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            components: [\n                <ContextScore key=\"contextScore\" />,\n                <PairwiseRanking key=\"pairwise\" />,\n                <ParticipatoryMatrix key=\"matrix\" />,\n                <AgroEco key=\"agroeco\" />,\n            ],\n        };\n    }\n\n    componentDidMount() {\n        // Ensures the user arrives at the top of the page\n        window.scrollTo(0, 0);\n    }\n\n    renderComponents = () => {};\n    render() {\n        return (\n            <div>\n                <div className=\"data-entry-container\">\n                    {/* Renders each of the individual components with a map function */}\n                    {this.state.components.map((component) => {\n                        return component;\n                    })}\n                    ;\n                </div>\n            </div>\n        );\n    }\n}\n\nDataEntry.contextType = AppContext;\n\nexport default DataEntry;\n","import {\n    legfunc,\n    attributes,\n    biofilters,\n} from \"../data-entry-component/data-entry-data\";\nimport _ from \"lodash\";\n\n// data on all of the legumes initially\n\n// go through the legume functions, and average matrix score and pairwise ranking score\nconst functionFitForm = [];\nlet legfuncCopy = _.cloneDeep(legfunc);\nlegfuncCopy.forEach((legumefunction) => {\n    functionFitForm.push({\n        legumeFunction: legumefunction,\n        score: 0,\n    });\n});\n\n// simply pass through the context scores\nconst contextFitForm = [];\nlet attributesCopy = _.cloneDeep(attributes);\nattributesCopy.forEach((attribute) => {\n    contextFitForm.push({\n        attribute: attribute,\n        score: 0,\n    });\n});\n\n// Adding all of the attributes to the initial legumes\n// For each component we have to add an averageScore and an overall rank\n// For the final summary, we are only presenting the ranks\nlet legumeResultsToAdd = {\n    functionFit: [],\n    contextFit: [],\n    agroEcoFit: [],\n    overallFit: [],\n};\n\n// Adding legume function scores to each legume\nattributesCopy.map((attribute) => {\n    legumeResultsToAdd.contextFit.push({\n        attribute: attribute,\n        score: 0,\n    });\n});\nlegumeResultsToAdd.contextFit.push({\n    overallFit: 0,\n});\nlegumeResultsToAdd.contextFit.push({\n    overallRank: 1,\n});\n\n// Adding context scores to each legume\nlegfuncCopy.map((legfunction) => {\n    legumeResultsToAdd.functionFit.push({\n        legumeFunction: legfunction,\n        score: 0,\n    });\n});\nlegumeResultsToAdd.functionFit.push({\n    overallFit: 0,\n});\nlegumeResultsToAdd.functionFit.push({\n    overallRank: 1,\n});\n\n// Adding agroEco scores to each legume\nconst agroEcoCopy = _.cloneDeep(biofilters);\n\nagroEcoCopy.map((agroecofiltter) => {\n    legumeResultsToAdd.agroEcoFit.push({\n        agroEcoFilter: agroecofiltter,\n        score: 0,\n    });\n});\nlegumeResultsToAdd.agroEcoFit.push({\n    overallFit: 0,\n});\nlegumeResultsToAdd.agroEcoFit.push({\n    overallRank: 1,\n});\n\n// Overall Scores\nlegumeResultsToAdd.overallFit.push({\n    overallFit: 0,\n});\nlegumeResultsToAdd.overallFit.push({\n    overallRank: 1,\n});\n\nconst agroEcoFilters = [];\n\nconst biofiltersCopy = _.cloneDeep(biofilters);\nconst biofiltersCleaned = [];\nbiofiltersCopy.map((biofilter) => {\n    biofiltersCleaned.push({\n        name: biofilter.name,\n        label: biofilter.label,\n    });\n});\n\n// Compiling all of the results data together\nconst resultsData = {\n    legumeFunctions: legfuncCopy,\n    attributes: attributes,\n    agroEcoFilters: biofiltersCleaned,\n    agroEcoFitSummary: agroEcoCopy,\n\n    functionFitSummary: functionFitForm,\n    contextFitSummary: contextFitForm,\n    emptyScoresForLegume: legumeResultsToAdd,\n    legumes: [],\n\n    resultsFilter: {\n        selectOptions: [\n            \"Summary\",\n            \"AgroEco Scores\",\n            \"Context Scores\",\n            \"Function Scores\",\n        ],\n        orderOptions: [\n            \"Overall Score\",\n            \"AgroEco Score\",\n            \"Context Score\",\n            \"Function Score\",\n        ],\n        numberOfLegumesOptions: [\"5\", \"10\", \"20\", \"All\"],\n\n        selection: {\n            whichResults: \"Summary\",\n            order: \"Overall Score\",\n            numberOfLegumes: \"5\",\n        },\n    },\n\n    formFilled: false,\n};\n\nexport { resultsData };\n","import React, { Component } from \"react\";\n\nimport { Table, Card } from \"react-bootstrap\";\n\nimport _ from \"lodash\";\nimport \"./results-component.css\";\n\nimport { resultsData } from \"./results-data\";\nimport AppContext from \"../../AppContext\";\n\nimport { Form, FormControl, FormLabel, FormGroup } from \"react-bootstrap\";\n\n//import { legumesData } from \"../legumes-component/legume-data\";\n\nclass Results extends Component {\n    //static contextType = AppContext;\n\n    constructor(props) {\n        super(props);\n        this.state = resultsData;\n\n        this.initialiseResults = this.initialiseResults.bind(this);\n        this.legumeContextScores = this.legumeContextScores.bind(this);\n        this.legumeFunctionScores = this.legumeFunctionScores.bind(this);\n        this.legumeAgroEcoScores = this.legumeAgroEcoScores.bind(this);\n        this.calculateLegumeScores = this.calculateLegumeScores.bind(this);\n        this.checkFormFilled = this.checkFormFilled.bind(this);\n    }\n\n    // Adding empty results attribute to fill for each of the legumes\n    // Loading the results from the form and getting the correct averages\n\n    initialiseResults = () => {\n        // Adding empty results to each legume\n        //const newLegumes = _.cloneDeep(legumesData.allLegumes.slice(0, 10));\n        const newLegumes = _.cloneDeep(\n            this.context.currentProject.legumeData.allLegumes\n        );\n        newLegumes.map((newLegume) => {\n            newLegume.results = _.cloneDeep(this.state.emptyScoresForLegume);\n        });\n\n        // Adding form Results\n\n        // Not much editing for agroeco\n        const agroEcoData = _.cloneDeep(\n            this.context.currentProject.agroEcoData\n        );\n\n        //Extract average scores for context\n        const contextData = _.cloneDeep(\n            this.context.currentProject.contextScores.scores\n        );\n        const newContextAverages = _.cloneDeep(this.state.contextFitSummary);\n\n        newContextAverages.map((newcontextscore) => {\n            contextData.map((contextscore) => {\n                if (\n                    contextscore.scoreType === \"average\" &&\n                    newcontextscore.attribute.label ===\n                        contextscore.attribute.label\n                ) {\n                    newcontextscore.score = 4 - contextscore.score;\n                }\n            });\n        });\n\n        // For the functional summary, need to average results from the pairwise selections and\n        // from the participatory score matching\n\n        const pairWiseData = _.cloneDeep(\n            this.context.currentProject.pairWiseScores.averages\n        );\n        const participatoryMatrixData = _.cloneDeep(\n            this.context.currentProject.participatoryMatrixScores.summary\n                .scoresIndividual\n        );\n\n        const newFunctionAverages = _.cloneDeep(this.state.functionFitSummary);\n\n        newFunctionAverages.map((newfunction) => {\n            pairWiseData.map((pairwisescoreaverages) => {\n                if (\n                    pairwisescoreaverages.attribute.label ===\n                    newfunction.legumeFunction.label\n                ) {\n                    newfunction.pairwisescore = pairwisescoreaverages.value;\n                }\n            });\n        });\n\n        newFunctionAverages.map((newfunction) => {\n            participatoryMatrixData.map((matrixscore) => {\n                if (\n                    matrixscore.legumeFunction.label ===\n                    newfunction.legumeFunction.label\n                ) {\n                    newfunction.matrixscore = matrixscore.scores[1].score;\n                }\n            });\n        });\n\n        newFunctionAverages.map((newfunction) => {\n            newfunction.score = parseFloat(\n                (\n                    newfunction.pairwisescore / 2 +\n                    newfunction.matrixscore / 2\n                ).toFixed(2)\n            );\n        });\n\n        // Set initial state and then calculate initial results for legumes\n        this.setState(\n            {\n                legumes: newLegumes,\n                agroEcoFitSummary: agroEcoData.biofilters,\n                contextFitSummary: newContextAverages,\n                functionFitSummary: newFunctionAverages,\n            },\n            () => {\n                this.calculateLegumeScores();\n            }\n        );\n    };\n\n    legumeContextScores = (props) => {\n        // Context Scores\n        // console.log(\"Legume Context: \" + props.legumecontext);\n        // console.log(\"Form Context: \" + props.formcontext);\n\n        let legumecontext = parseFloat(props.legumecontext);\n        let formcontext = parseFloat(props.formcontext);\n        // Condition 1\n        if (\n            legumecontext - formcontext > -0.5 &&\n            legumecontext - formcontext <= 0\n        ) {\n            let scoreToReturn = 4 + (legumecontext - formcontext) / 2;\n            if (scoreToReturn > 0) {\n                return scoreToReturn;\n            }\n        }\n\n        // Condition 2\n        if (\n            legumecontext - formcontext < 0.5 &&\n            legumecontext - formcontext >= 0\n        ) {\n            let scoreToReturn = 4 - (legumecontext - formcontext) / 2;\n            if (scoreToReturn > 0) {\n                return scoreToReturn;\n            }\n        }\n\n        // Condition 3\n        if (legumecontext > formcontext) {\n            let scoreToReturn = 4 - (legumecontext - formcontext) * 2;\n            if (scoreToReturn > 0) {\n                return scoreToReturn;\n            }\n        }\n\n        // Condition 4\n        if (formcontext > legumecontext) {\n            return 4;\n        }\n\n        return 0;\n    };\n\n    legumeFunctionScores = (props) => {\n        // Calculating the averages for each of the legumes\n        // Function Scores\n\n        let formfunction = props.formfunction;\n        let legumefunction = props.legumefunction;\n        if (formfunction === 0) {\n            return 0;\n        }\n        if (legumefunction < formfunction) {\n            return (legumefunction * formfunction) / 8;\n        }\n        return (legumefunction * formfunction) / 4;\n    };\n\n    legumeAgroEcoScores = (props) => {\n        //console.log(props.legumeMin);\n        //console.log(props.legumeMax);\n        //console.log(props.formvalue);\n\n        let legumeMin = props.legumeMin;\n        let legumeMax = props.legumeMax;\n        let formvalue = props.formvalue;\n\n        if (formvalue >= legumeMin && formvalue <= legumeMax) {\n            return 1;\n        } else {\n            return 0;\n        }\n    };\n\n    calculateLegumeScores = () => {\n        const newLegumeState = _.cloneDeep(this.state.legumes);\n\n        newLegumeState.map((legume) => {\n            // Set context scores\n            // map through individual legumes\n            legume.results.contextFit.map((legumeContextScore) => {\n                // Map through the contextFit summaries\n                this.state.contextFitSummary.map((contextAttribute) => {\n                    if (legumeContextScore.attribute !== undefined) {\n                        // Match the attribute in the legume to the attribute in the context fit sumary\n                        if (\n                            contextAttribute.attribute.label ===\n                            legumeContextScore.attribute.label\n                        ) {\n                            // Assign the context score\n                            // console.log(legumeContextScore);\n                            // console.log(contextAttribute);\n                            // console.log(\n                            //     \"Legume Attribute: \" +\n                            //         contextAttribute.attribute.label\n                            // );\n                            //console.log(legume);\n\n                            legumeContextScore.score = this.legumeContextScores(\n                                // Props to send to the function\n                                {\n                                    legumecontext:\n                                        legume[\n                                            contextAttribute.attribute.label\n                                        ],\n                                    formcontext: contextAttribute.score,\n                                }\n                            );\n                            // console.log(legumeContextScore.score);\n                        }\n                    }\n                });\n            });\n\n            // Set function scores\n            legume.results.functionFit.map((legumeFunction) => {\n                this.state.functionFitSummary.map((functionAttribute) => {\n                    if (\n                        functionAttribute.legumeFunction !== undefined &&\n                        legumeFunction.legumeFunction !== undefined\n                    ) {\n                        if (\n                            functionAttribute.legumeFunction.label ===\n                            legumeFunction.legumeFunction.label\n                        ) {\n                            legumeFunction.score = this.legumeFunctionScores({\n                                formfunction: functionAttribute.score,\n                                legumefunction:\n                                    legume[\n                                        functionAttribute.legumeFunction.label\n                                    ],\n                            });\n                        }\n                    }\n                });\n            });\n\n            // set agroeco scores\n            legume.results.agroEcoFit.map((legumeAgroEco) => {\n                this.state.agroEcoFitSummary.map((agroEcoSummary) => {\n                    if (legumeAgroEco.agroEcoFilter !== undefined) {\n                        if (\n                            legumeAgroEco.agroEcoFilter.label ===\n                            agroEcoSummary.label\n                        ) {\n                            legumeAgroEco.score = this.legumeAgroEcoScores({\n                                legumeMin: legume[agroEcoSummary.label][0].min,\n                                legumeMax: legume[agroEcoSummary.label][0].max,\n                                formvalue: agroEcoSummary.value,\n                            });\n                            // console.log(legumeAgroEco);\n                            // console.log(agroEcoSummary);\n                            // console.log(legume[agroEcoSummary.label][0].min);\n                            // console.log(legume[agroEcoSummary.label][0].max);\n                        }\n                    }\n                });\n            });\n        });\n\n        // Update overall scores\n        newLegumeState.map((legume) => {\n            // Sum agroEco Scores\n            let agroecoscoreAccumulator = 0;\n            legume.results.agroEcoFit.forEach((agroecoscore) => {\n                if (agroecoscore.agroEcoFilter !== undefined) {\n                    agroecoscoreAccumulator += agroecoscore.score;\n                }\n            });\n            legume.results.agroEcoFit.forEach((agroecoscore) => {\n                if (agroecoscore.overallFit !== undefined) {\n                    agroecoscore.overallFit = agroecoscoreAccumulator;\n                }\n            });\n\n            // Sum context Scores\n            let contextAccumulator = 0;\n            legume.results.contextFit.forEach((contextScore) => {\n                if (contextScore.attribute !== undefined) {\n                    contextAccumulator += contextScore.score;\n                }\n            });\n            legume.results.contextFit.forEach((contextScore) => {\n                if (contextScore.overallFit !== undefined) {\n                    contextScore.overallFit = contextAccumulator;\n                }\n            });\n            // Sum function scores\n            let functionAccumulator = 0;\n            legume.results.functionFit.forEach((functionScore) => {\n                if (functionScore.legumeFunction !== undefined) {\n                    functionAccumulator += functionScore.score;\n                }\n            });\n            legume.results.functionFit.forEach((functionScore) => {\n                if (functionScore.overallFit !== undefined) {\n                    functionScore.overallFit = functionAccumulator;\n                }\n            });\n\n            // Set overall Score\n            legume.results.overallFit.map((avgFit) => {\n                if (avgFit.overallFit !== undefined) {\n                    avgFit.overallFit =\n                        (agroecoscoreAccumulator /\n                            this.state.agroEcoFilters.length +\n                            contextAccumulator /\n                                (this.state.attributes.length * 4) +\n                            functionAccumulator /\n                                (this.state.legumeFunctions.length * 4)) /\n                        3;\n                }\n            });\n        });\n\n        // Set ranking the scores (draws included)\n        newLegumeState.forEach((firstLegume) => {\n            // Overall rank is the fifth item in the array\n            firstLegume.results.agroEcoFit[5].overallRank = 1;\n            let valuesEncountered = [];\n            newLegumeState.forEach((secondLegume) => {\n                //-------------------------------------------------------------------------------------------------\n                // AgroEco Rank\n                if (\n                    // Overall rank is the fifth item in the array\n\n                    firstLegume.results.agroEcoFit[4].overallFit <\n                        secondLegume.results.agroEcoFit[4].overallFit &&\n                    // Making sure the value has not been encountered before.\n                    // If it has, there is no need to push the rank further down the list\n                    !valuesEncountered.includes(\n                        secondLegume.results.agroEcoFit[4].overallFit\n                    )\n                ) {\n                    //\n                    valuesEncountered.push(\n                        secondLegume.results.agroEcoFit[4].overallFit\n                    );\n                    firstLegume.results.agroEcoFit[5].overallRank += 1;\n                }\n                //-------------------------------------------------------------------------------------------------\n                // Context Rank\n                if (\n                    // Overall rank is the 8th item in the array\n\n                    firstLegume.results.contextFit[7].overallFit <\n                        secondLegume.results.contextFit[7].overallFit &&\n                    // Making sure the value has not been encountered before.\n                    // If it has, there is no need to push the rank further down the list\n                    !valuesEncountered.includes(\n                        secondLegume.results.contextFit[7].overallFit\n                    )\n                ) {\n                    //\n                    valuesEncountered.push(\n                        secondLegume.results.contextFit[7].overallFit\n                    );\n                    firstLegume.results.contextFit[8].overallRank += 1;\n                }\n                // Function Rank\n                //-------------------------------------------------------------------------------------------------\n                if (\n                    // Overall rank is the 7th item in the array\n\n                    firstLegume.results.functionFit[6].overallFit <\n                        secondLegume.results.functionFit[6].overallFit &&\n                    // Making sure the value has not been encountered before.\n                    // If it has, there is no need to push the rank further down the list\n                    !valuesEncountered.includes(\n                        secondLegume.results.functionFit[6].overallFit\n                    )\n                ) {\n                    //\n                    valuesEncountered.push(\n                        secondLegume.results.functionFit[6].overallFit\n                    );\n                    firstLegume.results.functionFit[7].overallRank += 1;\n                }\n\n                // Overall Rank\n                //-------------------------------------------------------------------------------------------------\n                if (\n                    // Overall rank is the first item in the array\n\n                    firstLegume.results.overallFit[0].overallFit <\n                        secondLegume.results.overallFit[0].overallFit &&\n                    // Making sure the value has not been encountered before.\n                    // If it has, there is no need to push the rank further down the list\n                    !valuesEncountered.includes(\n                        secondLegume.results.overallFit[0].overallFit\n                    )\n                ) {\n                    //\n                    valuesEncountered.push(\n                        secondLegume.results.overallFit[0].overallFit\n                    );\n                    firstLegume.results.overallFit[1].overallRank += 1;\n                }\n            });\n        });\n\n        this.setState({\n            legumes: newLegumeState,\n        });\n    };\n\n    checkFormFilled = () => {\n        if (\n            this.context.currentProject.agroEcoData !== undefined &&\n            this.context.currentProject.contextScores !== undefined &&\n            this.context.currentProject.pairWiseScores !== undefined &&\n            this.context.currentProject.participatoryMatrixScores !==\n                undefined &&\n            this.context.currentProject.legumeData !== undefined\n        ) {\n            this.setState(\n                {\n                    formFilled: true,\n                },\n                () => {\n                    this.initialiseResults();\n                }\n            );\n        }\n    };\n\n    componentDidMount() {\n        if (this.context.currentProject === undefined) {\n            this.context.currentProject = {};\n        }\n        if (this.context.currentProject.results !== undefined) {\n            const newState = _.cloneDeep(this.context.currentProject.results);\n            this.setState(newState);\n        } else {\n            const newContext = _.cloneDeep(this.state);\n            this.context.currentProject.results = newContext;\n        }\n        //console.log(this.state);\n\n        this.checkFormFilled();\n    }\n    componentDidUpdate() {\n        const newContext = _.cloneDeep(this.state);\n        this.context.currentProject.results = newContext;\n        console.log(this.state);\n    }\n\n    returnResultsForSummaryTable = (props) => {\n        if (props.item.score !== undefined) {\n            return <td>{parseFloat(props.item.score).toFixed(2)}</td>;\n        }\n        if (props.item.overallFit !== undefined) {\n            return <td>{parseFloat(props.item.overallFit).toFixed(2)}</td>;\n        }\n        if (props.item.overallRank !== undefined) {\n            return <td>{parseInt(props.item.overallRank)}</td>;\n        }\n    };\n\n    agroEcoTable = () => {\n        return (\n            <div>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Legume Name</th>\n                            {this.state.agroEcoFilters.map((agroEcoFilter) => {\n                                return <th>{agroEcoFilter.label}</th>;\n                            })}\n                            <th>total agro-eco score</th>\n                            <th>agro-eco rank</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.orderAndFilterLegume().map((legume) => {\n                            return (\n                                <tr>\n                                    <td>{legume.name}</td>\n                                    {legume.results.agroEcoFit.map(\n                                        (agroEcoItem) => {\n                                            return this.returnResultsForSummaryTable(\n                                                {\n                                                    item: agroEcoItem,\n                                                }\n                                            );\n                                        }\n                                    )}\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    };\n\n    contextFitTable = () => {\n        return (\n            <div>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Legume Name</th>\n                            {this.state.attributes.map((attribute) => {\n                                return <th>{attribute.label}</th>;\n                            })}\n                            <th>context score</th>\n                            <th>context rank</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.orderAndFilterLegume().map((legume) => {\n                            return (\n                                <tr>\n                                    <td>{legume.name}</td>\n                                    {legume.results.contextFit.map(\n                                        (contextItem) => {\n                                            return this.returnResultsForSummaryTable(\n                                                {\n                                                    item: contextItem,\n                                                }\n                                            );\n                                        }\n                                    )}\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    };\n\n    functionFitTable = () => {\n        return (\n            <div>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Legume Name</th>\n                            {this.state.legumeFunctions.map(\n                                (legumeFunction) => {\n                                    return <th>{legumeFunction.label}</th>;\n                                }\n                            )}\n                            <th>function score</th>\n                            <th>function rank</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.orderAndFilterLegume().map((legume) => {\n                            return (\n                                <tr>\n                                    <td>{legume.name}</td>\n                                    {legume.results.functionFit.map(\n                                        (functionItem) => {\n                                            return this.returnResultsForSummaryTable(\n                                                {\n                                                    item: functionItem,\n                                                }\n                                            );\n                                        }\n                                    )}\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    };\n\n    returnRank = (props) => {\n        let scoreToReturn = 0;\n        props.arr.map((item) => {\n            if (item.overallRank !== undefined) {\n                scoreToReturn = item.overallRank;\n            }\n        });\n\n        return scoreToReturn;\n    };\n\n    returnScore = (props) => {\n        let scoreToReturn = 0;\n        props.arr.map((item) => {\n            if (item.overallFit !== undefined) {\n                scoreToReturn = item.overallFit;\n            }\n        });\n\n        return parseFloat(scoreToReturn).toFixed(2);\n    };\n\n    compareScores = (a, b, props) => {\n        let scoreA = \"\";\n        a.results[props.scoreType].map((item) => {\n            if (item.overallFit !== undefined) {\n                scoreA = item.overallFit;\n            }\n        });\n        let scoreB = \"\";\n        b.results[props.scoreType].map((item) => {\n            if (item.overallFit !== undefined) {\n                scoreB = item.overallFit;\n            }\n        });\n\n        if (scoreA < scoreB) {\n            return 1;\n        }\n        if (scoreA > scoreB) {\n            return -1;\n        }\n        return 0;\n    };\n\n    orderAndFilterLegume = () => {\n        const filter = this.state.resultsFilter.selection.order;\n\n        let legumeArr = _.cloneDeep(this.state.legumes);\n\n        // Filter by overall score\n        if (filter === \"Overall Score\") {\n            legumeArr.sort((a, b) =>\n                this.compareScores(a, b, { scoreType: \"overallFit\" })\n            );\n            console.log(legumeArr);\n        }\n        // Filter by AgroEcoScore\n        if (filter === \"AgroEco Score\") {\n            legumeArr.sort((a, b) =>\n                this.compareScores(a, b, { scoreType: \"agroEcoFit\" })\n            );\n            console.log(legumeArr);\n        }\n        // Filter by ContextScore\n        if (filter === \"Context Score\") {\n            legumeArr.sort((a, b) =>\n                this.compareScores(a, b, { scoreType: \"contextFit\" })\n            );\n            console.log(legumeArr);\n        }\n        // Filter by Function Fit\n        if (filter === \"Function Score\") {\n            legumeArr.sort((a, b) =>\n                this.compareScores(a, b, { scoreType: \"functionFit\" })\n            );\n            console.log(legumeArr);\n        }\n\n        if (this.state.resultsFilter.selection.numberOfLegumes == \"5\") {\n            legumeArr = legumeArr.slice(0, 5);\n        }\n\n        if (this.state.resultsFilter.selection.numberOfLegumes == \"10\") {\n            legumeArr = legumeArr.slice(0, 10);\n        }\n\n        if (this.state.resultsFilter.selection.numberOfLegumes == \"20\") {\n            legumeArr = legumeArr.slice(0, 20);\n        }\n\n        return legumeArr;\n    };\n\n    changeCellColour = () => {\n        return \"blue\";\n    };\n\n    summaryTable = () => {\n        return (\n            <div>\n                <Table bordered striped hover>\n                    <thead>\n                        <tr>\n                            <th>Legume Name</th>\n                            <th>Agro-Eco score</th>\n                            <th>Agro-Eco rank</th>\n                            <th>Context score</th>\n                            <th>Context rank</th>\n                            <th>Function score</th>\n                            <th>Function rank</th>\n\n                            <th>Overall score (0-1)</th>\n                            <th>Overall rank</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.orderAndFilterLegume().map((legume) => {\n                            return (\n                                <tr>\n                                    <td>{legume.name}</td>\n                                    <td\n                                    // style={{\n                                    //     backgroundColor: this.changeCellColour(),\n                                    // }}\n                                    >\n                                        {this.returnScore({\n                                            arr: legume.results.agroEcoFit,\n                                        })}\n                                    </td>\n                                    <td>\n                                        {this.returnRank({\n                                            arr: legume.results.agroEcoFit,\n                                        })}\n                                    </td>\n                                    <td>\n                                        {this.returnScore({\n                                            arr: legume.results.contextFit,\n                                        })}\n                                    </td>\n                                    <td>\n                                        {this.returnRank({\n                                            arr: legume.results.contextFit,\n                                        })}\n                                    </td>\n                                    <td>\n                                        {this.returnScore({\n                                            arr: legume.results.functionFit,\n                                        })}\n                                    </td>\n                                    <td>\n                                        {this.returnRank({\n                                            arr: legume.results.functionFit,\n                                        })}\n                                    </td>\n                                    <td>\n                                        {this.returnScore({\n                                            arr: legume.results.overallFit,\n                                        })}\n                                    </td>\n                                    <td>\n                                        {this.returnRank({\n                                            arr: legume.results.overallFit,\n                                        })}\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    };\n\n    renderLegumeResults = () => {\n        if (this.state.resultsFilter.selection.whichResults === \"Summary\") {\n            return this.summaryTable();\n        }\n\n        if (\n            this.state.resultsFilter.selection.whichResults === \"AgroEco Scores\"\n        ) {\n            return this.agroEcoTable();\n        }\n\n        if (\n            this.state.resultsFilter.selection.whichResults === \"Context Scores\"\n        ) {\n            return this.contextFitTable();\n        }\n\n        if (\n            this.state.resultsFilter.selection.whichResults ===\n            \"Function Scores\"\n        ) {\n            return this.functionFitTable();\n        }\n    };\n\n    changeSelection = (event, props) => {\n        this.setState(\n            (prevState) => {\n                return {\n                    ...prevState,\n                    resultsFilter: {\n                        ...prevState.resultsFilter,\n                        selection: {\n                            ...prevState.resultsFilter.selection,\n                            [props.type]: event.target.value,\n                        },\n                    },\n                };\n            },\n            () => this.orderAndFilterLegume()\n        );\n    };\n\n    resultsFilters = () => {\n        return (\n            <div className=\"card-container\">\n                <Card>\n                    <Card.Header className=\"bg-dark text-white\">\n                        <h2>Filter Results</h2>\n                    </Card.Header>\n                    <Card.Body>\n                        <Form className=\"results-form\">\n                            <FormGroup\n                                controlId=\"resultsSelect\"\n                                className=\"form-item\"\n                            >\n                                <FormLabel>Results</FormLabel>\n\n                                <FormControl\n                                    value={\n                                        this.state.resultsFilter.selection\n                                            .whichResults\n                                    }\n                                    onChange={(event) =>\n                                        this.changeSelection(event, {\n                                            type: \"whichResults\",\n                                        })\n                                    }\n                                    as=\"select\"\n                                >\n                                    {this.state.resultsFilter.selectOptions.map(\n                                        (selectionoption) => {\n                                            return (\n                                                <option>\n                                                    {selectionoption}\n                                                </option>\n                                            );\n                                        }\n                                    )}\n                                </FormControl>\n                            </FormGroup>\n\n                            <FormGroup\n                                value={this.state.resultsFilter.selection.order}\n                                onChange={(event) =>\n                                    this.changeSelection(event, {\n                                        type: \"order\",\n                                    })\n                                }\n                                controlId=\"resultsFilter\"\n                                className=\"form-item\"\n                            >\n                                <FormLabel>Order by:</FormLabel>\n\n                                <FormControl\n                                    as=\"select\"\n                                    value={\n                                        this.state.resultsFilter.selection.order\n                                    }\n                                    onChange={(event) =>\n                                        this.changeSelection(event, {\n                                            type: \"order\",\n                                        })\n                                    }\n                                >\n                                    {this.state.resultsFilter.orderOptions.map(\n                                        (orderoption) => {\n                                            return (\n                                                <option>{orderoption}</option>\n                                            );\n                                        }\n                                    )}\n                                </FormControl>\n                            </FormGroup>\n\n                            <FormGroup\n                                controlId=\"resultsFilter\"\n                                className=\"form-item\"\n                            >\n                                <FormLabel>\n                                    Number of Legumes Displayed\n                                </FormLabel>\n\n                                <FormControl\n                                    as=\"select\"\n                                    value={\n                                        this.state.resultsFilter.selection\n                                            .numberOfLegumes\n                                    }\n                                    onChange={(event) =>\n                                        this.changeSelection(event, {\n                                            type: \"numberOfLegumes\",\n                                        })\n                                    }\n                                >\n                                    {this.state.resultsFilter.numberOfLegumesOptions.map(\n                                        (numberoption) => {\n                                            return (\n                                                <option>{numberoption}</option>\n                                            );\n                                        }\n                                    )}\n                                </FormControl>\n                            </FormGroup>\n                        </Form>\n                    </Card.Body>\n                </Card>\n            </div>\n        );\n    };\n\n    renderBody = () => {\n        if (this.state.formFilled === false) {\n            return (\n                <h1>\n                    Either no data or legume information entered yet. Please\n                    fill in data-entry form, or go to legumes page.\n                </h1>\n            );\n        }\n        if (this.state.formFilled === true) {\n            return (\n                <div className=\"results-container\">\n                    {this.resultsFilters()}\n                    <div>{this.renderLegumeResults()}</div>\n                </div>\n            );\n        }\n    };\n\n    render() {\n        return <div>{this.renderBody()}</div>;\n    }\n}\n\nResults.contextType = AppContext;\n\nexport default Results;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\n\nimport AppContext from \"../../AppContext\";\n\nclass ViewContext extends Component {\n    static contextType = AppContext;\n\n    constructor(props) {\n        super(props);\n        console.log(AppContext);\n\n        this.state = {};\n    }\n\n    componentDidMount() {\n        this.initialiseContext();\n    }\n\n    initialiseContext = () => {\n        const appVariables = [\n            \"agroEcoData\",\n            \"contextScores\",\n            \"location\",\n            \"pairWiseScores\",\n            \"participatoryMatrixScores\",\n            \"projectInfo\",\n            \"results\",\n            \"user\",\n        ];\n\n        const appData = {};\n\n        appVariables.map((variable) => {\n            if (this.context[variable] !== undefined) {\n                appData[variable] = _.cloneDeep(this.context[variable]);\n            }\n        });\n\n        this.setState(appData);\n    };\n\n    render() {\n        return (\n            <div>\n                <h1>App Context</h1>\n                <pre>{JSON.stringify(this.state, null, 2)}</pre>\n            </div>\n        );\n    }\n}\n\nexport default ViewContext;\n","import React, {\n    useState,\n    useCallback,\n    useRef,\n    useMemo,\n    useEffect,\n    useContext,\n    createContext,\n} from \"react\";\n\nimport _ from \"lodash\";\nimport \"./map-polygon-component.css\";\n\nimport AppContext from \"../../AppContext\";\n\nimport { MapContainer, Marker, Popup, TileLayer, Polygon } from \"react-leaflet\";\n\n// Defining an initial center to focus the map\nlet center = {\n    lat: 5.26,\n    lng: 22.7,\n};\n\nlet markerpositions = [];\n\n// Setting an initial location for all of the marker points.\nif (AppContext.currentProject === undefined) {\n    AppContext.currentProject = {};\n}\nif (AppContext.currentProject.location === undefined) {\n    markerpositions = [\n        {\n            lat: center.lat + 10,\n            lng: center.lng - 10,\n        },\n        {\n            lat: center.lat + 10,\n            lng: center.lng + 10,\n        },\n        {\n            lat: center.lat - 10,\n            lng: center.lng + 10,\n        },\n        {\n            lat: center.lat - 10,\n            lng: center.lng - 10,\n        },\n    ];\n}\n\n// Checking if previous location can be found in context. If so, setting the initial arker positions to the location defined in state\nif (AppContext.currentProject.location !== undefined) {\n    markerpositions = AppContext.currentProject.location;\n}\n\n// This is based on the example \"draggable marker\" found on the react-leaflet documentation: https://react-leaflet.js.org/docs/example-draggable-marker/\n// This produces a single draggable marker, with a state that can be updated on dragging.\nfunction DraggableMarker(props) {\n    const markerRef = useRef(null);\n\n    const updateMarker = useMemo(\n        () => ({\n            dragend() {\n                const marker = markerRef.current;\n\n                if (marker != null) {\n                    let newArray = _.clone(props.center);\n                    let newLat = marker.getLatLng().lat;\n                    let newLng = marker.getLatLng().lng;\n                    newArray[props.index].lat = newLat;\n                    newArray[props.index].lng = newLng;\n                    props.changeMarkerPositions(newArray);\n\n                    //console.log(marker.getLatLng().lat);\n                }\n            },\n        }),\n        []\n    );\n\n    return (\n        <>\n            <Marker\n                draggable={true}\n                eventHandlers={updateMarker}\n                position={props.center[props.index]}\n                ref={markerRef}\n            ></Marker>\n        </>\n    );\n}\n\n//Props includes the positions of all of the markers. The polygon shape is determined by the positions\n// of each of these markers\nfunction DraggablePolygon(props) {\n    return (\n        <Polygon\n            pathOptions={{ color: \"purple\" }}\n            positions={props.positions}\n        />\n    );\n}\n\nfunction MapPolygon(location) {\n    const [markerPositions, changeMarkerPositions] = useState(markerpositions);\n\n    const [mapCenter, changeCenter] = useState(center);\n\n    const AppContextMap = useContext(AppContext);\n\n    console.log(AppContextMap.currentProject);\n\n    // This effect runs only once, when the component loads\n    useEffect(() => {\n        if (AppContextMap.currentProject.location !== undefined) {\n            changeMarkerPositions(AppContextMap.currentProject.location);\n        }\n    }, []);\n\n    // This effect runs any time state changes in the application\n    useEffect(() => {\n        AppContextMap.currentProject.location = markerPositions;\n        // console.log(markerPositions);\n    });\n\n    return (\n        <div className=\"leaflet-container\">\n            {/*The example map container given by react-leaflet */}\n            <MapContainer center={mapCenter} zoom={3} scrollWheelZoom={false}>\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n\n                {/* Redering the polygon, followed by each of the four markers */}\n                <DraggablePolygon positions={markerPositions} />\n\n                <DraggableMarker\n                    center={markerPositions}\n                    index={0}\n                    changeMarkerPositions={changeMarkerPositions}\n                />\n                <DraggableMarker\n                    center={markerPositions}\n                    index={1}\n                    changeMarkerPositions={changeMarkerPositions}\n                />\n                <DraggableMarker\n                    center={markerPositions}\n                    index={2}\n                    changeMarkerPositions={changeMarkerPositions}\n                />\n                <DraggableMarker\n                    center={markerPositions}\n                    index={3}\n                    changeMarkerPositions={changeMarkerPositions}\n                />\n            </MapContainer>\n        </div>\n    );\n}\n\nexport default MapPolygon;\n","import React, { Component } from \"react\";\nimport AppContext from \"../../AppContext\";\n\nimport MapPolygon from \"../map-polygon-component/map-polygon-component\";\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Card } from \"react-bootstrap\";\nimport _ from \"lodash\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport \"./project-information-component.css\";\nimport \"../../App.css\";\nimport { countryList } from \"./countries-list\";\nimport {\n    Button,\n    Form,\n    FormControl,\n    FormText,\n    FormLabel,\n    FormGroup,\n} from \"react-bootstrap\";\n\nlet countryNames = [];\n\ncountryList.forEach((country) => {\n    countryNames.push(country.name);\n});\n\n// This project ID is loaded when the component is first called\nconst projectID = uuidv4();\n\n/* This is the main component for all of the metadata. There are two primary sub-components.\n1. The meta-data form, a basic form component to enter user information and project information.\n2. The mapping component. Most of which was adapted from the draggable marker example in the react-leaflet documentation. */\n\nclass ProjectInformation extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: {\n                firstname: \"\",\n                surname: \"\",\n                email: \"\",\n                institution: \"\",\n            },\n            projectName: \"\",\n            projectID: projectID,\n            country: \"\",\n            majorRegion: \"\",\n            minorRegion: \"\",\n            communityName: \"\",\n            communityType: \"\",\n            description: \"\",\n            date: new Date(),\n            countryNames: countryNames,\n        };\n    }\n\n    componentDidMount() {\n        // Ensuring the window starts at the top (It was starting at the map componenent originally)\n        window.scrollTo(0, 0);\n\n        /* Checking whether previous context exists. If the context exists then\n        replace the current state with the context*/\n\n        if (this.context.currentProject === undefined) {\n            this.context.currentProject = {};\n        }\n        if (this.context.currentProject.projectInfo === undefined) {\n            const newContext = _.cloneDeep(this.state);\n            this.context.currentProject.projectInfo = newContext;\n        }\n        if (this.context.currentProject.projectInfo !== undefined) {\n            const newState = _.cloneDeep(\n                this.context.currentProject.projectInfo\n            );\n            this.setState(newState);\n        }\n    }\n\n    componentDidUpdate() {\n        // Updating context based on new state\n        const newContext = _.cloneDeep(this.state);\n        this.context.currentProject.projectInfo = newContext;\n    }\n\n    render() {\n        return (\n            <div className=\"project-info-container\">\n                {/* USER FORM */}\n                <div className=\"card-container\">\n                    <Card>\n                        <Card.Header className=\"bg-dark text-white\">\n                            <h2>User Information</h2>\n                        </Card.Header>\n                    </Card>\n                </div>\n\n                <Form className=\"form-display\">\n                    <FormGroup className=\"short-form-entry\">\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl\n                            type=\"text\"\n                            value={this.state.user.firstname}\n                            onChange={(event) =>\n                                this.setState((prevState) => {\n                                    return {\n                                        ...prevState,\n                                        user: {\n                                            ...prevState.user,\n                                            firstname: event.target.value,\n                                        },\n                                    };\n                                })\n                            }\n                        />\n                    </FormGroup>\n                    <FormGroup className=\"short-form-entry\">\n                        <FormLabel>Surname</FormLabel>\n                        <FormControl\n                            type=\"text\"\n                            value={this.state.user.surname}\n                            onChange={(event) =>\n                                this.setState((prevState) => {\n                                    return {\n                                        ...prevState,\n                                        user: {\n                                            ...prevState.user,\n                                            surname: event.target.value,\n                                        },\n                                    };\n                                })\n                            }\n                        />\n                    </FormGroup>\n                    <FormGroup className=\"short-form-entry\">\n                        <FormLabel>Institution</FormLabel>\n                        <FormControl\n                            type=\"text\"\n                            value={this.state.user.institution}\n                            onChange={(event) =>\n                                this.setState((prevState) => {\n                                    return {\n                                        ...prevState,\n                                        user: {\n                                            ...prevState.user,\n                                            institution: event.target.value,\n                                        },\n                                    };\n                                })\n                            }\n                        />\n                        <FormText>\n                            The organisation responsible for data collection\n                        </FormText>\n                    </FormGroup>\n                    <FormGroup className=\"short-form-entry\">\n                        <FormLabel>Email</FormLabel>\n                        <FormControl\n                            type=\"email\"\n                            value={this.state.user.email}\n                            onChange={(event) =>\n                                this.setState((prevState) => {\n                                    return {\n                                        ...prevState,\n                                        user: {\n                                            ...prevState.user,\n                                            email: event.target.value,\n                                        },\n                                    };\n                                })\n                            }\n                        />\n                    </FormGroup>\n                </Form>\n                {/* PROJECT INFORMATION FORM */}\n                <div className=\"card-container\">\n                    <Card>\n                        <Card.Header className=\"bg-dark text-white\">\n                            <h2>Project Metadata</h2>\n                        </Card.Header>\n                    </Card>\n                </div>\n                <Form className=\"form-display\">\n                    <FormGroup className=\"short-form-entry\">\n                        <FormLabel>Project Name</FormLabel>\n                        <FormControl\n                            type=\"text\"\n                            value={this.state.projectName}\n                            onChange={(event) =>\n                                this.setState({\n                                    projectName: event.target.value,\n                                })\n                            }\n                        />\n                        <FormText className=\"text-muted\">\n                            A memorable name for your project.\n                        </FormText>\n                    </FormGroup>\n\n                    <FormGroup className=\"short-form-entry\">\n                        <FormLabel>Project ID</FormLabel>\n                        <FormControl\n                            type=\"text\"\n                            placeholder={this.state.projectID}\n                            readOnly\n                        />\n                        <FormText className=\"text-muted\">\n                            A universally unique identifier (uuid) for your\n                            project.\n                        </FormText>\n                    </FormGroup>\n\n                    <FormGroup className=\"short-form-entry\">\n                        <FormLabel>Country</FormLabel>\n                        <FormControl\n                            as=\"select\"\n                            value={this.state.country}\n                            onChange={(event) => {\n                                this.setState({ country: event.target.value });\n                            }}\n                        >\n                            {this.state.countryNames.map((country) => {\n                                return <option>{country}</option>;\n                            })}\n                        </FormControl>\n                    </FormGroup>\n\n                    <FormGroup className=\"short-form-entry\">\n                        <FormLabel>Major Region</FormLabel>\n                        <FormControl\n                            value={this.state.majorRegion}\n                            onChange={(event) =>\n                                this.setState({\n                                    majorRegion: event.target.value,\n                                })\n                            }\n                        ></FormControl>\n                        <FormText className=\"text-muted\">\n                            e.g. state/province\n                        </FormText>\n                    </FormGroup>\n\n                    <FormGroup className=\"short-form-entry\">\n                        <FormLabel>Minor Region</FormLabel>\n                        <FormControl\n                            value={this.state.minorRegion}\n                            onChange={(event) =>\n                                this.setState({\n                                    minorRegion: event.target.value,\n                                })\n                            }\n                        ></FormControl>\n                        <FormText className=\"text-muted\">e.g. county</FormText>\n                    </FormGroup>\n\n                    <FormGroup className=\"short-form-entry\">\n                        <FormLabel>Community Name</FormLabel>\n                        <FormControl\n                            value={this.state.communityName}\n                            onChange={(event) =>\n                                this.setState({\n                                    communityName: event.target.value,\n                                })\n                            }\n                        ></FormControl>\n                    </FormGroup>\n\n                    <FormGroup className=\"short-form-entry\">\n                        <FormLabel>Community Type</FormLabel>\n                        <FormControl\n                            value={this.state.communityType}\n                            onChange={(event) =>\n                                this.setState({\n                                    communityType: event.target.value,\n                                })\n                            }\n                        ></FormControl>\n                        <FormText className=\"text-muted\">\n                            e.g. village/sub-village\n                        </FormText>\n                    </FormGroup>\n\n                    <FormGroup className=\"short-form-entry\">\n                        <FormLabel>Date</FormLabel>\n                        <DatePicker\n                            selected={Date.parse(this.state.date)}\n                            onChange={(date) => this.setState({ date: date })}\n                        />\n                        <FormText className=\"text-muted\">\n                            The date the data-collection ended\n                        </FormText>\n                    </FormGroup>\n\n                    <FormGroup className=\"long-form-entry\">\n                        <FormLabel>Project Description</FormLabel>\n                        <FormControl\n                            as=\"textarea\"\n                            rows={4}\n                            value={this.state.description}\n                            onChange={(event) =>\n                                this.setState({\n                                    description: event.target.value,\n                                })\n                            }\n                        ></FormControl>\n                    </FormGroup>\n                </Form>\n                {/* lOCATION INFORMATION  */}\n\n                <div className=\"card-container\">\n                    <Card>\n                        <Card.Header className=\"bg-dark text-white\">\n                            <h2>Mapping</h2>\n                        </Card.Header>\n                        <Card.Body>\n                            The map below can be used to select your study\n                            region. We recommend that you set the approximate\n                            study location before going to the field. That way,\n                            the some information from the map can be cached for\n                            offline use. If there are any problems collecting\n                            geolocation offline, collect the rest of the data\n                            needed, save your progress, and fill in the mapping\n                            information when you once again have access to\n                            internet\n                        </Card.Body>\n                    </Card>\n                </div>\n                <div className=\"map-container\">\n                    <MapPolygon />\n                </div>\n            </div>\n        );\n    }\n}\n\nProjectInformation.contextType = AppContext;\n\nexport default ProjectInformation;\n","const countryList = [\n    { name: \"Afghanistan\", code: \"AF\" },\n    { name: \"Åland Islands\", code: \"AX\" },\n    { name: \"Albania\", code: \"AL\" },\n    { name: \"Algeria\", code: \"DZ\" },\n    { name: \"American Samoa\", code: \"AS\" },\n    { name: \"AndorrA\", code: \"AD\" },\n    { name: \"Angola\", code: \"AO\" },\n    { name: \"Anguilla\", code: \"AI\" },\n    { name: \"Antarctica\", code: \"AQ\" },\n    { name: \"Antigua and Barbuda\", code: \"AG\" },\n    { name: \"Argentina\", code: \"AR\" },\n    { name: \"Armenia\", code: \"AM\" },\n    { name: \"Aruba\", code: \"AW\" },\n    { name: \"Australia\", code: \"AU\" },\n    { name: \"Austria\", code: \"AT\" },\n    { name: \"Azerbaijan\", code: \"AZ\" },\n    { name: \"Bahamas\", code: \"BS\" },\n    { name: \"Bahrain\", code: \"BH\" },\n    { name: \"Bangladesh\", code: \"BD\" },\n    { name: \"Barbados\", code: \"BB\" },\n    { name: \"Belarus\", code: \"BY\" },\n    { name: \"Belgium\", code: \"BE\" },\n    { name: \"Belize\", code: \"BZ\" },\n    { name: \"Benin\", code: \"BJ\" },\n    { name: \"Bermuda\", code: \"BM\" },\n    { name: \"Bhutan\", code: \"BT\" },\n    { name: \"Bolivia\", code: \"BO\" },\n    { name: \"Bosnia and Herzegovina\", code: \"BA\" },\n    { name: \"Botswana\", code: \"BW\" },\n    { name: \"Bouvet Island\", code: \"BV\" },\n    { name: \"Brazil\", code: \"BR\" },\n    { name: \"British Indian Ocean Territory\", code: \"IO\" },\n    { name: \"Brunei Darussalam\", code: \"BN\" },\n    { name: \"Bulgaria\", code: \"BG\" },\n    { name: \"Burkina Faso\", code: \"BF\" },\n    { name: \"Burundi\", code: \"BI\" },\n    { name: \"Cambodia\", code: \"KH\" },\n    { name: \"Cameroon\", code: \"CM\" },\n    { name: \"Canada\", code: \"CA\" },\n    { name: \"Cape Verde\", code: \"CV\" },\n    { name: \"Cayman Islands\", code: \"KY\" },\n    { name: \"Central African Republic\", code: \"CF\" },\n    { name: \"Chad\", code: \"TD\" },\n    { name: \"Chile\", code: \"CL\" },\n    { name: \"China\", code: \"CN\" },\n    { name: \"Christmas Island\", code: \"CX\" },\n    { name: \"Cocos (Keeling) Islands\", code: \"CC\" },\n    { name: \"Colombia\", code: \"CO\" },\n    { name: \"Comoros\", code: \"KM\" },\n    { name: \"Congo\", code: \"CG\" },\n    { name: \"Congo, The Democratic Republic of the\", code: \"CD\" },\n    { name: \"Cook Islands\", code: \"CK\" },\n    { name: \"Costa Rica\", code: \"CR\" },\n    { name: \"Cote D'Ivoire\", code: \"CI\" },\n    { name: \"Croatia\", code: \"HR\" },\n    { name: \"Cuba\", code: \"CU\" },\n    { name: \"Cyprus\", code: \"CY\" },\n    { name: \"Czech Republic\", code: \"CZ\" },\n    { name: \"Denmark\", code: \"DK\" },\n    { name: \"Djibouti\", code: \"DJ\" },\n    { name: \"Dominica\", code: \"DM\" },\n    { name: \"Dominican Republic\", code: \"DO\" },\n    { name: \"Ecuador\", code: \"EC\" },\n    { name: \"Egypt\", code: \"EG\" },\n    { name: \"El Salvador\", code: \"SV\" },\n    { name: \"Equatorial Guinea\", code: \"GQ\" },\n    { name: \"Eritrea\", code: \"ER\" },\n    { name: \"Estonia\", code: \"EE\" },\n    { name: \"Ethiopia\", code: \"ET\" },\n    { name: \"Falkland Islands (Malvinas)\", code: \"FK\" },\n    { name: \"Faroe Islands\", code: \"FO\" },\n    { name: \"Fiji\", code: \"FJ\" },\n    { name: \"Finland\", code: \"FI\" },\n    { name: \"France\", code: \"FR\" },\n    { name: \"French Guiana\", code: \"GF\" },\n    { name: \"French Polynesia\", code: \"PF\" },\n    { name: \"French Southern Territories\", code: \"TF\" },\n    { name: \"Gabon\", code: \"GA\" },\n    { name: \"Gambia\", code: \"GM\" },\n    { name: \"Georgia\", code: \"GE\" },\n    { name: \"Germany\", code: \"DE\" },\n    { name: \"Ghana\", code: \"GH\" },\n    { name: \"Gibraltar\", code: \"GI\" },\n    { name: \"Greece\", code: \"GR\" },\n    { name: \"Greenland\", code: \"GL\" },\n    { name: \"Grenada\", code: \"GD\" },\n    { name: \"Guadeloupe\", code: \"GP\" },\n    { name: \"Guam\", code: \"GU\" },\n    { name: \"Guatemala\", code: \"GT\" },\n    { name: \"Guernsey\", code: \"GG\" },\n    { name: \"Guinea\", code: \"GN\" },\n    { name: \"Guinea-Bissau\", code: \"GW\" },\n    { name: \"Guyana\", code: \"GY\" },\n    { name: \"Haiti\", code: \"HT\" },\n    { name: \"Heard Island and Mcdonald Islands\", code: \"HM\" },\n    { name: \"Holy See (Vatican City State)\", code: \"VA\" },\n    { name: \"Honduras\", code: \"HN\" },\n    { name: \"Hong Kong\", code: \"HK\" },\n    { name: \"Hungary\", code: \"HU\" },\n    { name: \"Iceland\", code: \"IS\" },\n    { name: \"India\", code: \"IN\" },\n    { name: \"Indonesia\", code: \"ID\" },\n    { name: \"Iran, Islamic Republic Of\", code: \"IR\" },\n    { name: \"Iraq\", code: \"IQ\" },\n    { name: \"Ireland\", code: \"IE\" },\n    { name: \"Isle of Man\", code: \"IM\" },\n    { name: \"Israel\", code: \"IL\" },\n    { name: \"Italy\", code: \"IT\" },\n    { name: \"Jamaica\", code: \"JM\" },\n    { name: \"Japan\", code: \"JP\" },\n    { name: \"Jersey\", code: \"JE\" },\n    { name: \"Jordan\", code: \"JO\" },\n    { name: \"Kazakhstan\", code: \"KZ\" },\n    { name: \"Kenya\", code: \"KE\" },\n    { name: \"Kiribati\", code: \"KI\" },\n    { name: \"Korea, Democratic People's Republic of\", code: \"KP\" },\n    { name: \"Korea, Republic of\", code: \"KR\" },\n    { name: \"Kuwait\", code: \"KW\" },\n    { name: \"Kyrgyzstan\", code: \"KG\" },\n    { name: \"Lao People's Democratic Republic\", code: \"LA\" },\n    { name: \"Latvia\", code: \"LV\" },\n    { name: \"Lebanon\", code: \"LB\" },\n    { name: \"Lesotho\", code: \"LS\" },\n    { name: \"Liberia\", code: \"LR\" },\n    { name: \"Libyan Arab Jamahiriya\", code: \"LY\" },\n    { name: \"Liechtenstein\", code: \"LI\" },\n    { name: \"Lithuania\", code: \"LT\" },\n    { name: \"Luxembourg\", code: \"LU\" },\n    { name: \"Macao\", code: \"MO\" },\n    { name: \"Macedonia, The Former Yugoslav Republic of\", code: \"MK\" },\n    { name: \"Madagascar\", code: \"MG\" },\n    { name: \"Malawi\", code: \"MW\" },\n    { name: \"Malaysia\", code: \"MY\" },\n    { name: \"Maldives\", code: \"MV\" },\n    { name: \"Mali\", code: \"ML\" },\n    { name: \"Malta\", code: \"MT\" },\n    { name: \"Marshall Islands\", code: \"MH\" },\n    { name: \"Martinique\", code: \"MQ\" },\n    { name: \"Mauritania\", code: \"MR\" },\n    { name: \"Mauritius\", code: \"MU\" },\n    { name: \"Mayotte\", code: \"YT\" },\n    { name: \"Mexico\", code: \"MX\" },\n    { name: \"Micronesia, Federated States of\", code: \"FM\" },\n    { name: \"Moldova, Republic of\", code: \"MD\" },\n    { name: \"Monaco\", code: \"MC\" },\n    { name: \"Mongolia\", code: \"MN\" },\n    { name: \"Montserrat\", code: \"MS\" },\n    { name: \"Morocco\", code: \"MA\" },\n    { name: \"Mozambique\", code: \"MZ\" },\n    { name: \"Myanmar\", code: \"MM\" },\n    { name: \"Namibia\", code: \"NA\" },\n    { name: \"Nauru\", code: \"NR\" },\n    { name: \"Nepal\", code: \"NP\" },\n    { name: \"Netherlands\", code: \"NL\" },\n    { name: \"Netherlands Antilles\", code: \"AN\" },\n    { name: \"New Caledonia\", code: \"NC\" },\n    { name: \"New Zealand\", code: \"NZ\" },\n    { name: \"Nicaragua\", code: \"NI\" },\n    { name: \"Niger\", code: \"NE\" },\n    { name: \"Nigeria\", code: \"NG\" },\n    { name: \"Niue\", code: \"NU\" },\n    { name: \"Norfolk Island\", code: \"NF\" },\n    { name: \"Northern Mariana Islands\", code: \"MP\" },\n    { name: \"Norway\", code: \"NO\" },\n    { name: \"Oman\", code: \"OM\" },\n    { name: \"Pakistan\", code: \"PK\" },\n    { name: \"Palau\", code: \"PW\" },\n    { name: \"Palestinian Territory, Occupied\", code: \"PS\" },\n    { name: \"Panama\", code: \"PA\" },\n    { name: \"Papua New Guinea\", code: \"PG\" },\n    { name: \"Paraguay\", code: \"PY\" },\n    { name: \"Peru\", code: \"PE\" },\n    { name: \"Philippines\", code: \"PH\" },\n    { name: \"Pitcairn\", code: \"PN\" },\n    { name: \"Poland\", code: \"PL\" },\n    { name: \"Portugal\", code: \"PT\" },\n    { name: \"Puerto Rico\", code: \"PR\" },\n    { name: \"Qatar\", code: \"QA\" },\n    { name: \"Reunion\", code: \"RE\" },\n    { name: \"Romania\", code: \"RO\" },\n    { name: \"Russian Federation\", code: \"RU\" },\n    { name: \"RWANDA\", code: \"RW\" },\n    { name: \"Saint Helena\", code: \"SH\" },\n    { name: \"Saint Kitts and Nevis\", code: \"KN\" },\n    { name: \"Saint Lucia\", code: \"LC\" },\n    { name: \"Saint Pierre and Miquelon\", code: \"PM\" },\n    { name: \"Saint Vincent and the Grenadines\", code: \"VC\" },\n    { name: \"Samoa\", code: \"WS\" },\n    { name: \"San Marino\", code: \"SM\" },\n    { name: \"Sao Tome and Principe\", code: \"ST\" },\n    { name: \"Saudi Arabia\", code: \"SA\" },\n    { name: \"Senegal\", code: \"SN\" },\n    { name: \"Serbia and Montenegro\", code: \"CS\" },\n    { name: \"Seychelles\", code: \"SC\" },\n    { name: \"Sierra Leone\", code: \"SL\" },\n    { name: \"Singapore\", code: \"SG\" },\n    { name: \"Slovakia\", code: \"SK\" },\n    { name: \"Slovenia\", code: \"SI\" },\n    { name: \"Solomon Islands\", code: \"SB\" },\n    { name: \"Somalia\", code: \"SO\" },\n    { name: \"South Africa\", code: \"ZA\" },\n    { name: \"South Georgia and the South Sandwich Islands\", code: \"GS\" },\n    { name: \"Spain\", code: \"ES\" },\n    { name: \"Sri Lanka\", code: \"LK\" },\n    { name: \"Sudan\", code: \"SD\" },\n    { name: \"Suriname\", code: \"SR\" },\n    { name: \"Svalbard and Jan Mayen\", code: \"SJ\" },\n    { name: \"Swaziland\", code: \"SZ\" },\n    { name: \"Sweden\", code: \"SE\" },\n    { name: \"Switzerland\", code: \"CH\" },\n    { name: \"Syrian Arab Republic\", code: \"SY\" },\n    { name: \"Taiwan, Province of China\", code: \"TW\" },\n    { name: \"Tajikistan\", code: \"TJ\" },\n    { name: \"Tanzania, United Republic of\", code: \"TZ\" },\n    { name: \"Thailand\", code: \"TH\" },\n    { name: \"Timor-Leste\", code: \"TL\" },\n    { name: \"Togo\", code: \"TG\" },\n    { name: \"Tokelau\", code: \"TK\" },\n    { name: \"Tonga\", code: \"TO\" },\n    { name: \"Trinidad and Tobago\", code: \"TT\" },\n    { name: \"Tunisia\", code: \"TN\" },\n    { name: \"Turkey\", code: \"TR\" },\n    { name: \"Turkmenistan\", code: \"TM\" },\n    { name: \"Turks and Caicos Islands\", code: \"TC\" },\n    { name: \"Tuvalu\", code: \"TV\" },\n    { name: \"Uganda\", code: \"UG\" },\n    { name: \"Ukraine\", code: \"UA\" },\n    { name: \"United Arab Emirates\", code: \"AE\" },\n    { name: \"United Kingdom\", code: \"GB\" },\n    { name: \"United States\", code: \"US\" },\n    { name: \"United States Minor Outlying Islands\", code: \"UM\" },\n    { name: \"Uruguay\", code: \"UY\" },\n    { name: \"Uzbekistan\", code: \"UZ\" },\n    { name: \"Vanuatu\", code: \"VU\" },\n    { name: \"Venezuela\", code: \"VE\" },\n    { name: \"Viet Nam\", code: \"VN\" },\n    { name: \"Virgin Islands, British\", code: \"VG\" },\n    { name: \"Virgin Islands, U.S.\", code: \"VI\" },\n    { name: \"Wallis and Futuna\", code: \"WF\" },\n    { name: \"Western Sahara\", code: \"EH\" },\n    { name: \"Yemen\", code: \"YE\" },\n    { name: \"Zambia\", code: \"ZM\" },\n    { name: \"Zimbabwe\", code: \"ZW\" },\n];\n\nexport { countryList };\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\n\nimport axios from \"axios\";\n\n// import { TiTick } from \"react-icons/ti\";\n// import { ImCross } from \"react-icons/im\";\n\nimport {\n    Button,\n    FormFile,\n    Form,\n    FormGroup,\n    FormCheck,\n    FormControl,\n    Card,\n    FormLabel,\n} from \"react-bootstrap\";\n\nimport AppContext from \"../../AppContext\";\n\nimport \"./submit-data-component.css\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst projectSecret = uuidv4();\nclass ManageData extends Component {\n    //static contextType = AppContext;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            secretKey: projectSecret,\n            dataAvailability: \"Private\",\n            realOrTestProject: \"Test\",\n            dateAvailable: \"\",\n        };\n\n        this.fileOnload = this.fileOnload.bind(this);\n    }\n\n    componentDidMount() {\n        //this.initialiseState();\n\n        if (this.context.currentProject === undefined) {\n            this.context.currentProject = {};\n        }\n\n        if (this.context.currentProject.projectSecret === undefined) {\n            const newContext = _.cloneDeep(this.state);\n            this.context.currentProject.projectSecret = newContext;\n        }\n        if (this.context.currentProject.projectSecret !== undefined) {\n            const newState = _.cloneDeep(\n                this.context.currentProject.projectSecret\n            );\n            this.setState(newState);\n        }\n\n        console.log(this.state);\n        //console.log(navigator.onLine);\n    }\n    componentDidUpdate() {\n        console.log(this.state);\n        const newContext = _.cloneDeep(this.state);\n        this.context.currentProject.projectSecret = newContext;\n    }\n\n    makeDataPublic = () => {\n        if (this.state.dataAvailability === \"Share immediately\") {\n            let dateToSubmit = new Date();\n\n            this.setState({\n                dateAvailable: dateToSubmit,\n            });\n        }\n        if (this.state.dataAvailability === \"Share after one year\") {\n            let todaysDate = new Date();\n            const year = todaysDate.getFullYear();\n            const month = todaysDate.getMonth();\n            const day = todaysDate.getDate();\n            let dateToSubmit = new Date(year + 1, month, day);\n\n            this.setState({\n                dateAvailable: dateToSubmit,\n            });\n        }\n    };\n\n    checkAllFieldsComplete = () => {\n        if (this.context.currentProject === undefined) {\n            this.context.currentProject = {};\n        }\n\n        let agreeToSubmit = false;\n\n        if (this.state.dataAvailability !== \"Private\") {\n            agreeToSubmit = true;\n        }\n\n        if (\n            // Making sure all data is filled in\n            this.context.currentProject.agroEcoData !== undefined &&\n            this.context.currentProject.contextScores !== undefined &&\n            this.context.currentProject.location !== undefined &&\n            this.context.currentProject.pairWiseScores !== undefined &&\n            this.context.currentProject.participatoryMatrixScores !==\n                undefined &&\n            this.context.currentProject.projectInfo !== undefined &&\n            this.context.currentProject.results !== undefined &&\n            this.context.currentProject.projectSecret !== undefined &&\n            // Making sure all conditions are agreed\n            agreeToSubmit === true\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    submitData = () => {\n        const dataToSubmit = _.cloneDeep(this.context.currentProject);\n        axios({\n            method: \"post\",\n            //url: \"http://localhost:5000/api/projects/submit-data/\",\n            url: \"https://l-gorman.com/api/projects/submit-data/\",\n            data: dataToSubmit,\n            headers: {\n                accept: \"application/json\",\n                \"Access-Control-Allow-Origin\": \"*\",\n            },\n        })\n            .then((response) => {\n                alert(response.data);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    };\n\n    downLoadData = () => {\n        let dataToDownload = _.cloneDeep(this.context.currentProject);\n\n        return (\n            <a\n                type=\"button\"\n                href={`data:text/json;charset=utf-8,${encodeURIComponent(\n                    JSON.stringify(dataToDownload)\n                )}`}\n                download=\"filename.json\"\n            >\n                <Button className=\"bg-light text-dark\" variant=\"outline-dark \">\n                    Save Progress\n                </Button>\n            </a>\n        );\n    };\n\n    uploadData = () => {\n        return (\n            <div>\n                <FormFile\n                    className=\"button-primary\"\n                    onChange={this.fileUploadButton}\n                />\n            </div>\n        );\n    };\n\n    fileOnload = (event) => {\n        // The file's text will be printed here\n        // console.log(JSON.parse(event.target.result));\n        const jsonFile = JSON.parse(event.target.result);\n        this.context.currentProject = {};\n        this.context.currentProject = _.cloneDeep(jsonFile);\n\n        const newState = _.cloneDeep(this.context.currentProject.projectSecret);\n\n        this.setState(newState, () => {\n            this.makeDataPublic();\n        });\n\n        console.log(this.context);\n    };\n\n    fileUploadButton = (event) => {\n        //console.log(event.target.files[0]);\n        const file = event.target.files[0];\n        const reader = new FileReader();\n\n        reader.onload = this.fileOnload;\n        reader.readAsText(event.target.files[0]);\n    };\n\n    GetCorrectURL = () => {\n        // All the cases of potential undefined\n        if (this.context === undefined) {\n            return \"https://l-gorman.com/LegumeCHOICE\";\n        }\n\n        if (this.context.currentProject === undefined) {\n            return \"https://l-gorman.com/LegumeCHOICE\";\n        }\n\n        if (this.context.currentProject.projectInfo === undefined) {\n            return \"https://l-gorman.com/LegumeCHOICE\";\n        }\n        if (this.context.currentProject.projectInfo.projectName === undefined) {\n            return \"https://l-gorman.com/LegumeCHOICE\";\n        }\n\n        if (this.context.currentProject.projectInfo.projectName !== undefined) {\n            const projectName = this.context.currentProject.projectInfo\n                .projectName;\n            console.log(\"correct thing\");\n\n            const testOrGenuine = this.state.realOrTestProject;\n\n            if (testOrGenuine == \"Genuine\") {\n                return (\n                    \"https://l-gorman.com/LegumeCHOICE/IndividualProjects/\" +\n                    projectName\n                );\n            }\n            if (testOrGenuine == \"Test\") {\n                return (\n                    \"https://l-gorman.com/LegumeCHOICE/TestProjects/IndividualProjects/\" +\n                    projectName\n                );\n            }\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <h1>Manage Data</h1>\n                <div className=\"cards-container\">\n                    <Card className=\"card-style \">\n                        <Card.Header className=\"bg-dark text-white\">\n                            Save Project Progress\n                        </Card.Header>\n                        <Card.Body>\n                            <Card.Text>\n                                This application allows you to save your\n                                progress as a JSON file. At any point, you can\n                                upload this file into the application to\n                                continue collecting/editing your data\n                            </Card.Text>\n                            {this.downLoadData()}\n                        </Card.Body>\n                    </Card>\n                    <Card className=\"card-style\">\n                        <Card.Header className=\"bg-dark text-white\">\n                            Load Project\n                        </Card.Header>\n                        <Card.Body>\n                            <Card.Text>\n                                Here you can load in data from a previously\n                                saved project. This data must be stored as a\n                                JSON file.\n                            </Card.Text>\n                            <footer>\n                                <div className=\"upload-button\">\n                                    {this.uploadData()}\n                                </div>\n                            </footer>\n                        </Card.Body>\n                    </Card>\n\n                    <Card className=\"card-style\">\n                        <Card.Header className=\"bg-dark text-white\">\n                            Submit Data\n                        </Card.Header>\n                        <Card.Body>\n                            <Card.Text>\n                                Submit your data in order for it to be processed\n                                into csv format. Follow this&nbsp;\n                                <a\n                                    href=\"https://l-gorman.com/LegumeCHOICE/\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    link\n                                </a>\n                                &nbsp;to access publicly available legume CHOICE\n                                projects. To find data from your own project,\n                                Follow this&nbsp;\n                                <a\n                                    href={this.GetCorrectURL()}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    link.\n                                </a>\n                                &nbsp; Please not this link will only work once\n                                your data is publicly available.\n                                <br /> Data can only be submitted under the\n                                following conditions:\n                                <ul>\n                                    <li>\n                                        Project information, legume-information,\n                                        data-entry, and results have all been\n                                        checked (see progress on top bar)\n                                    </li>\n                                    <li>\n                                        You agree to make your data publicly\n                                        available for research.\n                                    </li>\n                                </ul>\n                            </Card.Text>\n                            <Form>\n                                <FormGroup>\n                                    <FormLabel>\n                                        Is this \"test\" data from app\n                                        exploration, or \"genuine\" data collected\n                                        from a focus group?\n                                    </FormLabel>\n                                    <FormControl\n                                        as=\"select\"\n                                        value={this.state.realOrTestProject}\n                                        onChange={(event) =>\n                                            this.setState({\n                                                realOrTestProject:\n                                                    event.target.value,\n                                            })\n                                        }\n                                    >\n                                        <option>Test</option>\n                                        <option>Genuine</option>\n                                    </FormControl>\n                                </FormGroup>\n                                <FormGroup>\n                                    <FormLabel>\n                                        Would you like to keep this data\n                                        private, make the data publicly\n                                        available immediately, or make it\n                                        publicly available after 1 year? For\n                                        data which is made publicly available,\n                                        no sensitive information is shared\n                                        (except with legumeCHOICE\n                                        administrators).\n                                    </FormLabel>\n                                    <FormControl\n                                        as=\"select\"\n                                        value={this.state.dataAvailability}\n                                        onChange={(event) =>\n                                            this.setState(\n                                                {\n                                                    dataAvailability:\n                                                        event.target.value,\n                                                },\n                                                () => {\n                                                    this.makeDataPublic();\n                                                }\n                                            )\n                                        }\n                                    >\n                                        <option>Private</option>\n                                        <option>Share immediately</option>\n                                        <option>Share after one year</option>\n                                    </FormControl>\n                                </FormGroup>\n                            </Form>\n                            {this.checkAllFieldsComplete() ? (\n                                <Button\n                                    className=\"bg-light text-dark\"\n                                    variant=\"outline-dark \"\n                                    onClick={this.submitData}\n                                >\n                                    Submit\n                                </Button>\n                            ) : (\n                                <Button\n                                    className=\"bg-light text-dark\"\n                                    variant=\"outline-dark \"\n                                    onClick={this.submitData}\n                                    disabled={true}\n                                >\n                                    Project not yet complete\n                                </Button>\n                            )}\n                        </Card.Body>\n                    </Card>\n                </div>\n            </div>\n        );\n    }\n}\nManageData.contextType = AppContext;\n\nexport default ManageData;\n","export const allLegumes = [\n    {\n        name: \"Pigeon pea (Cajanus cajan)\",\n        type: \"Grain legume perennial\",\n        food: 4,\n        feed: 2,\n        income: 3,\n        \"erosion-control\": 3,\n        fuel: 2,\n        \"soil-fertility\": 3,\n        land: 1,\n        labour: 2,\n        seed: 1,\n        \"inp-serv\": 1,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 530.0, max: 4030.0 }],\n        temp: [{ min: 16.0, max: 35.0 }],\n        alt: [{ min: 0.0, max: 2000.0 }],\n        soilpH: [{ min: 4.5, max: 8.0 }],\n    },\n    {\n        name:\n            \"Climbing beans (Phaseolus vulgaris), local types available in W Ethiopia, harvested several (4-5) years before reseeding)\",\n        type: \"Grain legume perennial\",\n        food: 4,\n        feed: 2,\n        income: 4,\n        \"erosion-control\": 1,\n        fuel: 0,\n        \"soil-fertility\": 2,\n        land: 1,\n        labour: 1,\n        seed: 1,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 2,\n        water: 3,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 600.0, max: 3000.0 }],\n        temp: [{ min: 6.0, max: 29.0 }],\n        alt: [{ min: 500.0, max: 2000.0 }],\n        soilpH: [{ min: 5.0, max: 7.0 }],\n    },\n    {\n        name: \"Climbing beans (Phaseolus vulgaris) annual type\",\n        type: \"Grain legume seasonal\",\n        food: 4,\n        feed: 2,\n        income: 4,\n        \"erosion-control\": 1,\n        fuel: 0,\n        \"soil-fertility\": 2,\n        land: 1,\n        labour: 3,\n        seed: 2,\n        \"inp-serv\": 3,\n        \"knowl-skill\": 3,\n        water: 3,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 600.0, max: 3000.0 }],\n        temp: [{ min: 6.0, max: 29.0 }],\n        alt: [{ min: 500.0, max: 2000.0 }],\n        soilpH: [{ min: 5.0, max: 7.0 }],\n    },\n    {\n        name: \"Bush bean (Phaseolus vulgaris)\",\n        type: \"Grain legume seasonal\",\n        food: 4,\n        feed: 1,\n        income: 4,\n        \"erosion-control\": 1,\n        fuel: 1,\n        \"soil-fertility\": 1,\n        land: 2,\n        labour: 3,\n        seed: 1,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 3,\n        water: 2,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 600.0, max: 3000.0 }],\n        temp: [{ min: 6.0, max: 29.0 }],\n        alt: [{ min: 500.0, max: 2000.0 }],\n        soilpH: [{ min: 5.0, max: 7.0 }],\n    },\n    {\n        name: \"Groundnuts (Arachis hypogaea L.)\",\n        type: \"Grain legume seasonal\",\n        food: 3,\n        feed: 2,\n        income: 4,\n        \"erosion-control\": 2,\n        fuel: 1,\n        \"soil-fertility\": 3,\n        land: 4,\n        labour: 4,\n        seed: 1,\n        \"inp-serv\": 3,\n        \"knowl-skill\": 3,\n        water: 2,\n        markets: 1,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 310.0, max: 3000.0 }],\n        temp: [{ min: 10.0, max: 45.0 }],\n        alt: [{ min: 0.0, max: 1600.0 }],\n        soilpH: [{ min: 4.0, max: 8.0 }],\n    },\n    {\n        name: \"Soybean grain type (Glycine max L.)\",\n        type: \"Grain legume seasonal\",\n        food: 3,\n        feed: 2,\n        income: 4,\n        \"erosion-control\": 2,\n        fuel: 1,\n        \"soil-fertility\": 2,\n        land: 3,\n        labour: 3,\n        seed: 2,\n        \"inp-serv\": 3,\n        \"knowl-skill\": 3,\n        water: 2,\n        markets: 4,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 700.0, max: 2000.0 }],\n        temp: [{ min: 10.0, max: 30.0 }],\n        alt: [{ min: 0.0, max: 1400.0 }],\n        soilpH: [{ min: 5.0, max: 7.0 }],\n    },\n    {\n        name: \"Soybean/dual purpose grain plus fodder (Glycine max L.)\",\n        type: \"Grain legume seasonal\",\n        food: 2,\n        feed: 2,\n        income: 4,\n        \"erosion-control\": 3,\n        fuel: 1,\n        \"soil-fertility\": 4,\n        land: 3,\n        labour: 3,\n        seed: 2,\n        \"inp-serv\": 3,\n        \"knowl-skill\": 3,\n        water: 2,\n        markets: 4,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 700.0, max: 2000.0 }],\n        temp: [{ min: 10.0, max: 30.0 }],\n        alt: [{ min: 0.0, max: 1400.0 }],\n        soilpH: [{ min: 5.0, max: 7.0 }],\n    },\n    {\n        name: \"Faba bean (Vicia faba L.) \",\n        type: \"Grain legume seasonal\",\n        food: 4,\n        feed: 2,\n        income: 4,\n        \"erosion-control\": 1,\n        fuel: 0,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 3,\n        seed: 4,\n        \"inp-serv\": 3,\n        \"knowl-skill\": 2,\n        water: 2,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 300.0, max: 2090.0 }],\n        temp: [{ min: 6.0, max: 28.0 }],\n        alt: [{ min: 1800.0, max: 3200.0 }],\n        soilpH: [{ min: 4.5, max: 8.3 }],\n    },\n    {\n        name: \"Cowpea \\u2013 grain type (Vigna unguiculata)\",\n        type: \"Grain legume seasonal\",\n        food: 4,\n        feed: 1,\n        income: 4,\n        \"erosion-control\": 1,\n        fuel: 0,\n        \"soil-fertility\": 2,\n        land: 2,\n        labour: 3,\n        seed: 2,\n        \"inp-serv\": 3,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 400.0, max: 2000.0 }],\n        temp: [{ min: 13.0, max: 28.0 }],\n        alt: [{ min: 0.0, max: 1500.0 }],\n        soilpH: [{ min: 4.3, max: 7.9 }],\n    },\n    {\n        name: \"Cowpea \\u2013 forage type (Vigna unguiculata)\",\n        type: \"Grain legume seasonal\",\n        food: 2,\n        feed: 4,\n        income: 2,\n        \"erosion-control\": 2,\n        fuel: 0,\n        \"soil-fertility\": 2,\n        land: 2,\n        labour: 3,\n        seed: 3,\n        \"inp-serv\": 3,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 3,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 400.0, max: 2000.0 }],\n        temp: [{ min: 13.0, max: 28.0 }],\n        alt: [{ min: 0.0, max: 1500.0 }],\n        soilpH: [{ min: 4.3, max: 7.9 }],\n    },\n    {\n        name: \"Bambara nut (Voandzou subterraneous)\",\n        type: \"Grain legume seasonal\",\n        food: 4,\n        feed: 0,\n        income: 0,\n        \"erosion-control\": 1,\n        fuel: 0,\n        \"soil-fertility\": 2,\n        land: 1,\n        labour: 1,\n        seed: 1,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 1,\n        water: 1,\n        markets: 2,\n        \"agroecology-source\": null,\n        rainfall: [{ min: null, max: null }],\n        temp: [{ min: null, max: null }],\n        alt: [{ min: null, max: null }],\n        soilpH: [{ min: null, max: null }],\n    },\n    {\n        name:\n            \"Chickpea (Cicer arietinum L.) \\u2013 desi type (for food)- following the main crop\",\n        type: \"Grain legume seasonal\",\n        food: 4,\n        feed: 2,\n        income: 4,\n        \"erosion-control\": 1,\n        fuel: 0,\n        \"soil-fertility\": 2,\n        land: 2,\n        labour: 3,\n        seed: 1,\n        \"inp-serv\": 3,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 600.0, max: 1500.0 }],\n        temp: [{ min: 7.0, max: 28.0 }],\n        alt: [{ min: 1170.0, max: 1900.0 }],\n        soilpH: [{ min: 5.0, max: 8.3 }],\n    },\n    {\n        name:\n            \"Chickpea (Cicer arietinum L.) \\u2013 kabuli type (for export)-main crop\",\n        type: \"Grain legume seasonal\",\n        food: 3,\n        feed: 2,\n        income: 4,\n        \"erosion-control\": 1,\n        fuel: 0,\n        \"soil-fertility\": 2,\n        land: 3,\n        labour: 3,\n        seed: 3,\n        \"inp-serv\": 3,\n        \"knowl-skill\": 3,\n        water: 1,\n        markets: 3,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 600.0, max: 1500.0 }],\n        temp: [{ min: 7.0, max: 28.0 }],\n        alt: [{ min: 1170.0, max: 1900.0 }],\n        soilpH: [{ min: 5.0, max: 8.3 }],\n    },\n    {\n        name: \"Green grams/Mung bean (Vigna radiata)\",\n        type: \"Grain legume seasonal\",\n        food: 4,\n        feed: 1,\n        income: 4,\n        \"erosion-control\": 1,\n        fuel: 0,\n        \"soil-fertility\": 1,\n        land: 2,\n        labour: 3,\n        seed: 1,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 1,\n        water: 2,\n        markets: 3,\n        \"agroecology-source\": null,\n        rainfall: [{ min: null, max: null }],\n        temp: [{ min: null, max: null }],\n        alt: [{ min: null, max: null }],\n        soilpH: [{ min: null, max: null }],\n    },\n    {\n        name: \"Lentils (Lens culinaris Medik.)\",\n        type: \"Grain legume seasonal\",\n        food: 4,\n        feed: 3,\n        income: 4,\n        \"erosion-control\": 1,\n        fuel: 0,\n        \"soil-fertility\": 2,\n        land: 2,\n        labour: 3,\n        seed: 2,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 280.0, max: 2430.0 }],\n        temp: [{ min: 6.0, max: 27.0 }],\n        alt: [{ min: 1000.0, max: 3800.0 }],\n        soilpH: [{ min: 4.5, max: 8.2 }],\n    },\n    {\n        name: \"Lupins \\u2013 Sweet lupin (new), traditional (Et)\",\n        type: \"Grain legume seasonal\",\n        food: 2,\n        feed: 1,\n        income: 3,\n        \"erosion-control\": 2,\n        fuel: 1,\n        \"soil-fertility\": 4,\n        land: 1,\n        labour: 1,\n        seed: 2,\n        \"inp-serv\": 0,\n        \"knowl-skill\": 1,\n        water: 1,\n        markets: 3,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 350.0, max: 1660.0 }],\n        temp: [{ min: 6.0, max: 26.0 }],\n        alt: [{ min: 1600.0, max: 3000.0 }],\n        soilpH: [{ min: 5.0, max: 7.0 }],\n    },\n    {\n        name:\n            \"Field Pea (Pisum sativum L), adapted to high rainfall environment\",\n        type: \"Grain legume seasonal\",\n        food: 4,\n        feed: 3,\n        income: 4,\n        \"erosion-control\": 2,\n        fuel: 0,\n        \"soil-fertility\": 2,\n        land: 3,\n        labour: 2,\n        seed: 2,\n        \"inp-serv\": 1,\n        \"knowl-skill\": 2,\n        water: 3,\n        markets: 1,\n        \"agroecology-source\": null,\n        rainfall: [{ min: null, max: null }],\n        temp: [{ min: null, max: null }],\n        alt: [{ min: null, max: null }],\n        soilpH: [{ min: null, max: null }],\n    },\n    {\n        name:\n            \"Field pea (Pisum absynicum var. sativum)-adapted to low rainfall environment\",\n        type: \"Grain legume seasonal\",\n        food: 4,\n        feed: 3,\n        income: 3,\n        \"erosion-control\": 2,\n        fuel: 1,\n        \"soil-fertility\": 2,\n        land: 2,\n        labour: 2,\n        seed: 3,\n        \"inp-serv\": 1,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 2,\n        \"agroecology-source\": null,\n        rainfall: [{ min: null, max: null }],\n        temp: [{ min: null, max: null }],\n        alt: [{ min: null, max: null }],\n        soilpH: [{ min: null, max: null }],\n    },\n    {\n        name: \"Grass pea \\u2013 (Lathyrus spp)\",\n        type: \"Grain legume seasonal\",\n        food: 3,\n        feed: 1,\n        income: 3,\n        \"erosion-control\": 1,\n        fuel: 0,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 2,\n        seed: 1,\n        \"inp-serv\": 1,\n        \"knowl-skill\": 1,\n        water: 1,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 320.0, max: 1360.0 }],\n        temp: [{ min: 5.0, max: 27.0 }],\n        alt: [{ min: 800.0, max: 3000.0 }],\n        soilpH: [{ min: 4.5, max: 8.3 }],\n    },\n    {\n        name: \"Cluster bean (Cyamopsis tetragonoloba L.)\",\n        type: \"Grain legume seasonal\",\n        food: 3,\n        feed: 1,\n        income: 3,\n        \"erosion-control\": 1,\n        fuel: 0,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 3,\n        seed: 4,\n        \"inp-serv\": 3,\n        \"knowl-skill\": 2,\n        water: 2,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 380.0, max: 2410.0 }],\n        temp: [{ min: 12.0, max: 35.0 }],\n        alt: [{ min: 0.0, max: 1000.0 }],\n        soilpH: [{ min: 5.3, max: 8.3 }],\n    },\n    {\n        name: \"Dolichos lablab (Lablab purpureus)- for grain\",\n        type: \"Grain legume seasonal\",\n        food: 4,\n        feed: 4,\n        income: 3,\n        \"erosion-control\": 2,\n        fuel: 1,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 3,\n        seed: 2,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 3,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 600.0, max: 2500.0 }],\n        temp: [{ min: 15.0, max: 35.0 }],\n        alt: [{ min: 0.0, max: 2100.0 }],\n        soilpH: [{ min: 4.5, max: 7.8 }],\n    },\n    {\n        name: \"French beans (Phaseolus vulgaris)\",\n        type: \"Grain legume seasonal\",\n        food: 4,\n        feed: 0,\n        income: 4,\n        \"erosion-control\": 1,\n        fuel: 0,\n        \"soil-fertility\": 1,\n        land: 2,\n        labour: 3,\n        seed: 4,\n        \"inp-serv\": 4,\n        \"knowl-skill\": 3,\n        water: 4,\n        markets: 4,\n        \"agroecology-source\": null,\n        rainfall: [{ min: null, max: null }],\n        temp: [{ min: null, max: null }],\n        alt: [{ min: null, max: null }],\n        soilpH: [{ min: null, max: null }],\n    },\n    {\n        name: \"Desmodium silverleaf (Desmodium uncinatum)\",\n        type:\n            \"Herbaceous legumes - Perennial/regrowth (ability regrowth after seasonal harvesting)\",\n        food: 0,\n        feed: 4,\n        income: 2,\n        \"erosion-control\": 3,\n        fuel: 0,\n        \"soil-fertility\": 3,\n        land: 3,\n        labour: 1,\n        seed: 3,\n        \"inp-serv\": 1,\n        \"knowl-skill\": 2,\n        water: 2,\n        markets: 3,\n        \"agroecology-source\": \"SoFT\",\n        rainfall: [{ min: 750.0, max: 2400.0 }],\n        temp: [{ min: 3.0, max: 35.0 }],\n        alt: [{ min: 0.0, max: 2500.0 }],\n        soilpH: [{ min: 6.5, max: 7.5 }],\n    },\n    {\n        name: \"Clover (Trifolium)\",\n        type:\n            \"Herbaceous legumes - Perennial/regrowth (ability regrowth after seasonal harvesting)\",\n        food: 0,\n        feed: 4,\n        income: 1,\n        \"erosion-control\": 2,\n        fuel: 0,\n        \"soil-fertility\": 2,\n        land: 1,\n        labour: 3,\n        seed: 3,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 3,\n        water: 3,\n        markets: 0,\n        \"agroecology-source\": null,\n        rainfall: [{ min: null, max: null }],\n        temp: [{ min: null, max: null }],\n        alt: [{ min: null, max: null }],\n        soilpH: [{ min: null, max: null }],\n    },\n    {\n        name: \"Alfalfa/lucerne (Medicago sativa)\",\n        type:\n            \"Herbaceous legumes - Perennial/regrowth (ability regrowth after seasonal harvesting)\",\n        food: 0,\n        feed: 3,\n        income: 2,\n        \"erosion-control\": 3,\n        fuel: 0,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 3,\n        seed: 4,\n        \"inp-serv\": 3,\n        \"knowl-skill\": 2,\n        water: 2,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 500.0, max: 2700.0 }],\n        temp: [{ min: 4.0, max: 27.0 }],\n        alt: [{ min: 300.0, max: 3000.0 }],\n        soilpH: [{ min: 5.5, max: 8.8 }],\n    },\n    {\n        name: \"Stylosanthes guianensis - semi-erect -forage type\",\n        type:\n            \"Herbaceous legumes - Perennial/regrowth (ability regrowth after seasonal harvesting)\",\n        food: 0,\n        feed: 4,\n        income: 0,\n        \"erosion-control\": 3,\n        fuel: 0,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 3,\n        seed: 4,\n        \"inp-serv\": 3,\n        \"knowl-skill\": 2,\n        water: 2,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 500.0, max: 2000.0 }],\n        temp: [{ min: 15.0, max: 27.0 }],\n        alt: [{ min: 0.0, max: 2000.0 }],\n        soilpH: [{ min: 4.0, max: 7.7 }],\n    },\n    {\n        name: \"Stylosanthes hamata - bush/branching type-forage type\",\n        type:\n            \"Herbaceous legumes - Perennial/regrowth (ability regrowth after seasonal harvesting)\",\n        food: 0,\n        feed: 4,\n        income: 0,\n        \"erosion-control\": 3,\n        fuel: 0,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 3,\n        seed: 4,\n        \"inp-serv\": 3,\n        \"knowl-skill\": 2,\n        water: 2,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 600.0, max: 1700.0 }],\n        temp: [{ min: 22.0, max: 30.0 }],\n        alt: [{ min: 0.0, max: 500.0 }],\n        soilpH: [{ min: 4.0, max: 6.0 }],\n    },\n    {\n        name: \"Stylosanthes scabra -erect - forage type\",\n        type:\n            \"Herbaceous legumes - Perennial/regrowth (ability regrowth after seasonal harvesting)\",\n        food: 0,\n        feed: 4,\n        income: 0,\n        \"erosion-control\": 3,\n        fuel: 0,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 3,\n        seed: 4,\n        \"inp-serv\": 3,\n        \"knowl-skill\": 2,\n        water: 2,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 500.0, max: 1700.0 }],\n        temp: [{ min: 20.0, max: 30.0 }],\n        alt: [{ min: 0.0, max: 600.0 }],\n        soilpH: [{ min: 4.0, max: 7.0 }],\n    },\n    {\n        name: \"Hairy Vetch (Vicia villosa )\",\n        type:\n            \"Herbaceous legumes - Seasonal/no-regrowth (harvest after one season, then need reseeding)\",\n        food: 0,\n        feed: 4,\n        income: 0,\n        \"erosion-control\": 3,\n        fuel: 0,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 3,\n        seed: 4,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 3,\n        water: 3,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 310.0, max: 1660.0 }],\n        temp: [{ min: 4.0, max: 21.0 }],\n        alt: [{ min: 1800.0, max: 3000.0 }],\n        soilpH: [{ min: 4.9, max: 8.2 }],\n    },\n    {\n        name: \"Vicia dasycarpa\",\n        type:\n            \"Herbaceous legumes - Seasonal/no-regrowth (harvest after one season, then need reseeding)\",\n        food: 0,\n        feed: 4,\n        income: 0,\n        \"erosion-control\": 3,\n        fuel: 0,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 3,\n        seed: 4,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 3,\n        water: 3,\n        markets: 2,\n        \"agroecology-source\": null,\n        rainfall: [{ min: null, max: null }],\n        temp: [{ min: null, max: null }],\n        alt: [{ min: null, max: null }],\n        soilpH: [{ min: null, max: null }],\n    },\n    {\n        name: \"Velvet bean (Mucuna pruriens) \",\n        type:\n            \"Herbaceous legumes - Seasonal/no-regrowth (harvest after one season, then need reseeding)\",\n        food: 0,\n        feed: 1,\n        income: 0,\n        \"erosion-control\": 3,\n        fuel: 0,\n        \"soil-fertility\": 4,\n        land: 3,\n        labour: 2,\n        seed: 3,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 4,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 650.0, max: 3000.0 }],\n        temp: [{ min: 15.0, max: 35.0 }],\n        alt: [{ min: 0.0, max: 2100.0 }],\n        soilpH: [{ min: 4.5, max: 7.7 }],\n    },\n    {\n        name: \"Lablab- forage type (Lablab purpureus)\",\n        type:\n            \"Herbaceous legumes - Seasonal/no-regrowth (harvest after one season, then need reseeding)\",\n        food: 3,\n        feed: 4,\n        income: 3,\n        \"erosion-control\": 2,\n        fuel: 1,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 3,\n        seed: 2,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 2,\n        water: 2,\n        markets: 3,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 600.0, max: 2500.0 }],\n        temp: [{ min: 15.0, max: 35.0 }],\n        alt: [{ min: 0.0, max: 2100.0 }],\n        soilpH: [{ min: 4.5, max: 7.8 }],\n    },\n    {\n        name: \"Crotolaria juncea\",\n        type:\n            \"Herbaceous legumes - Seasonal/no-regrowth (harvest after one season, then need reseeding)\",\n        food: 0,\n        feed: 1,\n        income: 0,\n        \"erosion-control\": 3,\n        fuel: 0,\n        \"soil-fertility\": 4,\n        land: 2,\n        labour: 3,\n        seed: 2,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 2,\n        water: 2,\n        markets: 3,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 490.0, max: 4290.0 }],\n        temp: [{ min: 8.0, max: 35.0 }],\n        alt: [{ min: 0.0, max: 2500.0 }],\n        soilpH: [{ min: 4.5, max: 7.5 }],\n    },\n    {\n        name: \"Calliandra calothyrus\",\n        type: \"Tree legumes - coppicing\",\n        food: 0,\n        feed: 4,\n        income: 2,\n        \"erosion-control\": 4,\n        fuel: 3,\n        \"soil-fertility\": 3,\n        land: 1,\n        labour: 1,\n        seed: 3,\n        \"inp-serv\": 1,\n        \"knowl-skill\": 2,\n        water: 2,\n        markets: 3,\n        \"agroecology-source\": \"SoFT\",\n        rainfall: [{ min: 1200.0, max: 4290.0 }],\n        temp: [{ min: 10.0, max: 35.0 }],\n        alt: [{ min: 0.0, max: 2000.0 }],\n        soilpH: [{ min: 4.5, max: 7.5 }],\n    },\n    {\n        name: \"Gliricidia sepium\",\n        type: \"Tree legumes - coppicing\",\n        food: 0,\n        feed: 3,\n        income: 1,\n        \"erosion-control\": 4,\n        fuel: 4,\n        \"soil-fertility\": 4,\n        land: 2,\n        labour: 2,\n        seed: 3,\n        \"inp-serv\": 1,\n        \"knowl-skill\": 1,\n        water: 1,\n        markets: 4,\n        \"agroecology-source\": \"SoFT\",\n        rainfall: [{ min: 800.0, max: 4000.0 }],\n        temp: [{ min: 15.0, max: 35.0 }],\n        alt: [{ min: 0.0, max: 2000.0 }],\n        soilpH: [{ min: 4.3, max: 8.0 }],\n    },\n    {\n        name: \"Leucaena leucocephala\",\n        type: \"Tree legumes - coppicing\",\n        food: 0,\n        feed: 4,\n        income: 0,\n        \"erosion-control\": 4,\n        fuel: 4,\n        \"soil-fertility\": 4,\n        land: 2,\n        labour: 2,\n        seed: 1,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 3,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 500.0, max: 4100.0 }],\n        temp: [{ min: 15.0, max: 35.0 }],\n        alt: [{ min: 0.0, max: 1350.0 }],\n        soilpH: [{ min: 4.6, max: 8.7 }],\n    },\n    {\n        name: \"Leucaena trichandra\",\n        type: \"Tree legumes - coppicing\",\n        food: 0,\n        feed: 4,\n        income: 2,\n        \"erosion-control\": 3,\n        fuel: 4,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 2,\n        seed: 1,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 3,\n        \"agroecology-source\": \"SoFT\",\n        rainfall: [{ min: 900.0, max: 3500.0 }],\n        temp: [{ min: 10.0, max: 35.0 }],\n        alt: [{ min: 0.0, max: 2000.0 }],\n        soilpH: [{ min: 5.0, max: 8.7 }],\n    },\n    {\n        name: \"Leucaena diversifolia\",\n        type: \"Tree legumes - coppicing\",\n        food: 0,\n        feed: 4,\n        income: 2,\n        \"erosion-control\": 3,\n        fuel: 4,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 2,\n        seed: 1,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 3,\n        \"agroecology-source\": \"SoFT\",\n        rainfall: [{ min: 500.0, max: 4000.0 }],\n        temp: [{ min: 3.0, max: 35.0 }],\n        alt: [{ min: 0.0, max: 2000.0 }],\n        soilpH: [{ min: 5.0, max: 8.7 }],\n    },\n    {\n        name: \"Tree lucerne (Chamaecytisus palmensis)\",\n        type: \"Tree legumes \\u2013 coppicing\",\n        food: 0,\n        feed: 4,\n        income: 2,\n        \"erosion-control\": 3,\n        fuel: 4,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 2,\n        seed: 1,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 3,\n        \"agroecology-source\": \"SoFT\",\n        rainfall: [{ min: 300.0, max: 1600.0 }],\n        temp: [{ min: 3.0, max: 28.0 }],\n        alt: [{ min: 1000.0, max: 2500.0 }],\n        soilpH: [{ min: 5.0, max: 8.7 }],\n    },\n    {\n        name: \"Sesbania sesban\",\n        type: \"Tree legumes \\u2013 non coppicing\",\n        food: 0,\n        feed: 4,\n        income: 2,\n        \"erosion-control\": 4,\n        fuel: 3,\n        \"soil-fertility\": 3,\n        land: 1,\n        labour: 2,\n        seed: 1,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 2,\n        water: 2,\n        markets: 3,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 500.0, max: 2500.0 }],\n        temp: [{ min: 15.0, max: 30.0 }],\n        alt: [{ min: 0.0, max: 2300.0 }],\n        soilpH: [{ min: 5.0, max: 7.5 }],\n    },\n    {\n        name: \"Sesbania grandiflora\",\n        type: \"Tree legumes \\u2013 non coppicing\",\n        food: 0,\n        feed: 3,\n        income: 2,\n        \"erosion-control\": 3,\n        fuel: 3,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 2,\n        seed: 1,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 3,\n        \"agroecology-source\": \"SoFT\",\n        rainfall: [{ min: 700.0, max: 3000.0 }],\n        temp: [{ min: 22.0, max: 35.0 }],\n        alt: [{ min: 0.0, max: 1000.0 }],\n        soilpH: [{ min: 4.5, max: 8.7 }],\n    },\n    {\n        name: \"Tephrosia (Tephrosia vogelii)\",\n        type: \"Tree legumes \\u2013 non coppicing\",\n        food: 0,\n        feed: 0,\n        income: 2,\n        \"erosion-control\": 3,\n        fuel: 4,\n        \"soil-fertility\": 4,\n        land: 2,\n        labour: 3,\n        seed: 2,\n        \"inp-serv\": 1,\n        \"knowl-skill\": 1,\n        water: 1,\n        markets: 2,\n        \"agroecology-source\": \"Lexsys\",\n        rainfall: [{ min: 870.0, max: 2670.0 }],\n        temp: [{ min: 13.0, max: 29.0 }],\n        alt: [{ min: 0.0, max: 2100.0 }],\n        soilpH: [{ min: 4.5, max: 6.5 }],\n    },\n    {\n        name: \"Faidherbia albidia\",\n        type: \"Tree legumes \\u2013 non coppicing\",\n        food: 0,\n        feed: 3,\n        income: 2,\n        \"erosion-control\": 3,\n        fuel: 3,\n        \"soil-fertility\": 4,\n        land: 2,\n        labour: 2,\n        seed: 1,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 3,\n        \"agroecology-source\": null,\n        rainfall: [{ min: null, max: null }],\n        temp: [{ min: null, max: null }],\n        alt: [{ min: null, max: null }],\n        soilpH: [{ min: null, max: null }],\n    },\n    {\n        name: \"Acacia angustissima\",\n        type: \"Tree legumes \\u2013 non coppicing\",\n        food: 0,\n        feed: 2,\n        income: 3,\n        \"erosion-control\": 3,\n        fuel: 4,\n        \"soil-fertility\": 3,\n        land: 2,\n        labour: 2,\n        seed: 1,\n        \"inp-serv\": 2,\n        \"knowl-skill\": 2,\n        water: 1,\n        markets: 3,\n        \"agroecology-source\": \"SoFT\",\n        rainfall: [{ min: 800.0, max: 3000.0 }],\n        temp: [{ min: 10.0, max: 35.0 }],\n        alt: [{ min: 0.0, max: 2000.0 }],\n        soilpH: [{ min: 5.0, max: 8.7 }],\n    },\n];\n","import { allLegumes } from \"./legume-information-clean\";\n\nconst legumeTypes = [];\nconst sources = [];\nallLegumes.map((legume) => {\n    if (!legumeTypes.includes(legume.type)) {\n        legumeTypes.push(legume.type);\n    }\n    if (\n        !sources.includes(legume[\"agroecology-source\"]) &&\n        legume[\"agroecology-source\"] !== null\n    ) {\n        sources.push(legume[\"agroecology-source\"]);\n    }\n});\n\nconst newLegume = {\n    name: \"Sample Legume\",\n    type: \"e.g. Grain legume perennial\",\n    food: 2,\n    feed: 2,\n    income: 2,\n    \"erosion-control\": 2,\n    fuel: 2,\n    \"soil-fertility\": 2,\n    land: 1,\n    labour: 2,\n    seed: 1,\n    \"inp-serv\": 1,\n    \"knowl-skill\": 2,\n    water: 1,\n    markets: 2,\n\n    temp: [{ min: 16.0, max: 35.0 }],\n    alt: [{ min: 0.0, max: 2000.0 }],\n    soilpH: [{ min: 4.5, max: 8.0 }],\n    rainfall: [{ min: 530.0, max: 4030.0 }],\n    source: \"Lexsys\",\n};\n\nconst legumesData = {\n    allLegumes: allLegumes,\n    legumeTypes: legumeTypes,\n    sources: sources,\n    newLegume: newLegume,\n    blankLegume: newLegume,\n    agroEcoData: [\n        {\n            name: \"Rainfall (mm/year)\",\n            label: \"rainfall\",\n        },\n        {\n            name: \"Temparature (mean °C/month)\",\n            label: \"temp\",\n        },\n        {\n            name: \"Altitude (average masl)\",\n            label: \"alt\",\n        },\n        {\n            name: \"Soil pH\",\n            label: \"soilpH\",\n        },\n    ],\n    provisionData: [\n        {\n            name: \"Food\",\n            label: \"food\",\n        },\n        {\n            name: \"Feed\",\n            label: \"feed\",\n        },\n        {\n            name: \"Income\",\n            label: \"income\",\n        },\n        {\n            name: \"Erosion Control\",\n            label: \"erosion-control\",\n        },\n        {\n            name: \"Fuel\",\n            label: \"fuel\",\n        },\n        {\n            name: \"Soil Fertility\",\n            label: \"soil-fertility\",\n        },\n    ],\n    requirements: [\n        {\n            name: \"Land\",\n            label: \"land\",\n        },\n        {\n            name: \"Labour\",\n            label: \"labour\",\n        },\n        {\n            name: \"Seed\",\n            label: \"seed\",\n        },\n        {\n            name: \"Inputs and Services\",\n            label: \"inp-serv\",\n        },\n        {\n            name: \"Knowledge and Skills\",\n            label: \"knowl-skill\",\n        },\n        {\n            name: \"Water\",\n            label: \"water\",\n        },\n        {\n            name: \"Markets\",\n            label: \"markets\",\n        },\n    ],\n};\n\nexport { legumesData };\n","import React, { Component } from \"react\";\n\nimport {\n    Form,\n    FormGroup,\n    FormLabel,\n    FormControl,\n    Table,\n    Card,\n    Button,\n    FormText,\n} from \"react-bootstrap\";\n\nimport \"./legumes-component.css\";\n\nimport _ from \"lodash\";\n\nimport AppContext from \"../../AppContext\";\n\nimport { legumesData } from \"./legume-data\";\n\nclass LegumesComponent extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = legumesData;\n        this.state.filter = \"Functions\";\n    }\n\n    componentDidMount() {\n        if (this.context.currentProject === undefined) {\n            this.context.currentProject = {};\n        }\n        if (this.context.currentProject.legumeData !== undefined) {\n            const newState = _.cloneDeep(\n                this.context.currentProject.legumeData\n            );\n            this.setState(newState);\n        } else {\n            const newContext = _.cloneDeep(this.state);\n            this.context.currentProject.legumeData = newContext;\n        }\n\n        console.log(this.state);\n        console.log(this.context);\n    }\n    componentDidUpdate() {\n        const newContext = _.cloneDeep(this.state);\n        this.context.currentProject.legumeData = newContext;\n\n        console.log(this.state);\n        console.log(this.context);\n    }\n\n    LegumeFunctionsTable = () => {\n        return (\n            <Table striped bordered hover>\n                <thead>\n                    <th>Name</th>\n                    {this.state.provisionData.map((provisionVariable) => {\n                        return <th>{provisionVariable.name}</th>;\n                    })}\n                </thead>\n                <tbody>\n                    {this.SortLegumes().map((legume) => {\n                        return (\n                            <tr>\n                                <td>{legume.name}</td>\n                                {this.state.provisionData.map(\n                                    (provisionVariable) => {\n                                        return (\n                                            <td>\n                                                {\n                                                    legume[\n                                                        provisionVariable.label\n                                                    ]\n                                                }\n                                            </td>\n                                        );\n                                    }\n                                )}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    };\n    LegumeRequirementsTable = () => {\n        return (\n            <Table striped bordered hover>\n                <thead>\n                    <th>Name</th>\n                    {this.state.requirements.map((requirement) => {\n                        return <th>{requirement.name}</th>;\n                    })}\n                </thead>\n                <tbody>\n                    {this.SortLegumes().map((legume) => {\n                        return (\n                            <tr>\n                                <td>{legume.name}</td>\n                                {this.state.requirements.map((requirement) => {\n                                    return <td>{legume[requirement.label]}</td>;\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    };\n    LegumeAgroEcoTable = () => {\n        return (\n            <Table className=\"legume-table\" striped bordered hover>\n                <thead>\n                    <th>Name</th>\n                    {this.state.agroEcoData.map((agroEcoVariable) => {\n                        return (\n                            <>\n                                <th>{\"Min \" + agroEcoVariable.name}</th>\n                                <th>{\"Max \" + agroEcoVariable.name}</th>\n                            </>\n                        );\n                    })}\n                </thead>\n\n                <tbody>\n                    {this.SortLegumes().map((legume) => {\n                        return (\n                            <tr>\n                                <td>{legume.name}</td>\n                                {this.state.agroEcoData.map(\n                                    (agroEcoVariable) => {\n                                        return (\n                                            <>\n                                                <td>\n                                                    {\n                                                        legume[\n                                                            agroEcoVariable\n                                                                .label\n                                                        ][0].min\n                                                    }\n                                                </td>\n                                                <td>\n                                                    {\n                                                        legume[\n                                                            agroEcoVariable\n                                                                .label\n                                                        ][0].max\n                                                    }\n                                                </td>\n                                            </>\n                                        );\n                                    }\n                                )}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    };\n\n    LegumeTableAll = () => {\n        if (this.state.filter === \"Functions\") {\n            return this.LegumeFunctionsTable();\n        }\n        if (this.state.filter === \"Requirements\") {\n            return this.LegumeRequirementsTable();\n        }\n        if (this.state.filter === \"AgroEcological\") {\n            return this.LegumeAgroEcoTable();\n        }\n    };\n\n    addLegume = () => {\n        const allLegumes = _.cloneDeep(this.state.allLegumes);\n        const newLegume = _.cloneDeep(this.state.newLegume);\n        const blankLegume = _.cloneDeep(this.state.blankLegume);\n        allLegumes.push(newLegume);\n\n        this.setState({\n            allLegumes: allLegumes,\n            newLegume: blankLegume,\n        });\n\n        console.log(\"add legume\");\n    };\n\n    SortLegumes = () => {\n        const legumesList = _.cloneDeep(this.state.allLegumes);\n        const sortedLegumes = legumesList.sort(function (a, b) {\n            if (a.name.toLowerCase() < b.name.toLowerCase()) {\n                return -1;\n            }\n            if (a.name.toLowerCase() > b.name.toLowerCase()) {\n                return 1;\n            }\n            return 0;\n        });\n\n        return sortedLegumes;\n    };\n\n    LegumeDetailsForm = () => {\n        return (\n            <Form className=\"form-display\">\n                <FormGroup className=\"short-form-entry\">\n                    <FormLabel>Legume Name</FormLabel>\n                    <FormControl\n                        type=\"text\"\n                        value={this.state.newLegume.name}\n                        onChange={(event) =>\n                            this.setState((prevState) => {\n                                return {\n                                    ...prevState,\n                                    newLegume: {\n                                        ...prevState.newLegume,\n                                        name: event.target.value,\n                                    },\n                                };\n                            })\n                        }\n                    />\n                </FormGroup>\n                <FormGroup className=\"short-form-entry\">\n                    <FormLabel>Legume Type</FormLabel>\n                    <FormControl\n                        as=\"select\"\n                        value={this.state.newLegume.type}\n                        onChange={(event) =>\n                            this.setState((prevState) => {\n                                return {\n                                    ...prevState,\n                                    newLegume: {\n                                        ...prevState.newLegume,\n                                        type: event.target.value,\n                                    },\n                                };\n                            })\n                        }\n                    >\n                        {this.state.legumeTypes.map((legumetype) => {\n                            return <option>{legumetype}</option>;\n                        })}\n                    </FormControl>\n                </FormGroup>\n                <FormGroup className=\"short-form-entry\">\n                    <FormLabel>Legume Type</FormLabel>\n                    <FormControl\n                        as=\"select\"\n                        value={this.state.newLegume.source}\n                        onChange={(event) =>\n                            this.setState((prevState) => {\n                                return {\n                                    ...prevState,\n                                    newLegume: {\n                                        ...prevState.newLegume,\n                                        source: event.target.value,\n                                    },\n                                };\n                            })\n                        }\n                    >\n                        {this.state.sources.map((source) => {\n                            return <option>{source}</option>;\n                        })}\n                    </FormControl>\n                    <FormText>\n                        Where you obtained your legume information\n                    </FormText>\n                </FormGroup>\n            </Form>\n        );\n    };\n    LegumeFunctionsForm = () => {\n        return (\n            <Form className=\"form-display\">\n                {this.state.provisionData.map((provisionType) => {\n                    return (\n                        <FormGroup className=\"short-form-entry\">\n                            <FormLabel>{provisionType.name}</FormLabel>\n                            <FormControl\n                                type=\"number\"\n                                value={\n                                    this.state.newLegume[provisionType.label]\n                                }\n                                min={0}\n                                max={4}\n                                onChange={(event) =>\n                                    this.setState((prevState) => {\n                                        return {\n                                            ...prevState,\n                                            newLegume: {\n                                                ...prevState.newLegume,\n                                                [provisionType.label]: parseInt(\n                                                    event.target.value\n                                                ),\n                                            },\n                                        };\n                                    })\n                                }\n                            />\n                        </FormGroup>\n                    );\n                })}\n            </Form>\n        );\n    };\n    LegumeRequirmentsForm = () => {\n        return (\n            <Form className=\"form-display\">\n                {this.state.requirements.map((requirement) => {\n                    return (\n                        <FormGroup className=\"short-form-entry\">\n                            <FormLabel>{requirement.name}</FormLabel>\n                            <FormControl\n                                type=\"number\"\n                                value={this.state.newLegume[requirement.label]}\n                                min={0}\n                                max={4}\n                                onChange={(event) =>\n                                    this.setState((prevState) => {\n                                        return {\n                                            ...prevState,\n                                            newLegume: {\n                                                ...prevState.newLegume,\n                                                [requirement.label]: parseInt(\n                                                    event.target.value\n                                                ),\n                                            },\n                                        };\n                                    })\n                                }\n                            />\n                        </FormGroup>\n                    );\n                })}\n                ;\n            </Form>\n        );\n    };\n\n    changeAgroEcoValue = (event, props) => {\n        console.log(props);\n        const arrayToChange = _.cloneDeep(\n            this.state.newLegume[props.variable.label]\n        );\n        arrayToChange[0][props.minmax] = parseFloat(event.target.value);\n\n        console.log(arrayToChange);\n        this.setState((prevState) => {\n            return {\n                ...prevState,\n                newLegume: {\n                    ...prevState.newLegume,\n                    [props.variable.label]: arrayToChange,\n                },\n            };\n        });\n    };\n    AgroEcoForm = () => {\n        return (\n            <Form className=\"form-display\">\n                {this.state.agroEcoData.map((agroEcovariable) => {\n                    return (\n                        <>\n                            <FormGroup className=\"short-form-entry\">\n                                <FormLabel>\n                                    Minimum {agroEcovariable.name}\n                                </FormLabel>\n                                <FormControl\n                                    type=\"number\"\n                                    value={\n                                        this.state.newLegume[\n                                            agroEcovariable.label\n                                        ][0].min\n                                    }\n                                    onChange={(event) => {\n                                        this.changeAgroEcoValue(event, {\n                                            minmax: \"min\",\n                                            variable: agroEcovariable,\n                                        });\n                                    }}\n                                />\n                            </FormGroup>\n                            <FormGroup className=\"short-form-entry\">\n                                <FormLabel>\n                                    Maximum {agroEcovariable.name}\n                                </FormLabel>\n                                <FormControl\n                                    type=\"number\"\n                                    value={\n                                        this.state.newLegume[\n                                            agroEcovariable.label\n                                        ][0].max\n                                    }\n                                    onChange={(event) =>\n                                        this.changeAgroEcoValue(event, {\n                                            minmax: \"max\",\n                                            variable: agroEcovariable,\n                                        })\n                                    }\n                                />\n                            </FormGroup>\n                        </>\n                    );\n                })}\n                ;\n            </Form>\n        );\n    };\n\n    LegumeForm = () => {\n        return (\n            <div className=\"card-container\">\n                <h1>Add Legumes</h1>\n\n                <Card>\n                    <Card.Header className=\"bg-dark text-white\">\n                        <h4>Legume Details</h4>\n                    </Card.Header>\n                </Card>\n                {this.LegumeDetailsForm()}\n                <Card>\n                    <Card.Header className=\"bg-dark text-white\">\n                        <h4>\n                            Primary Legume Functions (0-4): 0 low provision, 4\n                            high provision\n                        </h4>\n                    </Card.Header>\n                </Card>\n\n                {this.LegumeFunctionsForm()}\n                <Card>\n                    <Card.Header className=\"bg-dark text-white\">\n                        <h4>\n                            Legume Requirments (0-4): 0 low requirments, 4 high\n                            requirements\n                        </h4>\n                    </Card.Header>\n                </Card>\n\n                {this.LegumeRequirmentsForm()}\n                <Card>\n                    <Card.Header className=\"bg-dark text-white\">\n                        <h4>Agroecological Requirments</h4>\n                    </Card.Header>\n                </Card>\n\n                {this.AgroEcoForm()}\n                <Button\n                    onClick={() => this.addLegume()}\n                    className=\"legume-button\"\n                >\n                    Add Legume\n                </Button>\n            </div>\n        );\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"card-container\">\n                    {this.LegumeForm()}\n                    <Card>\n                        <Card.Header className=\"bg-dark text-white\">\n                            <h2>Legumes</h2>\n                        </Card.Header>\n                        <Card.Body>\n                            <Form>\n                                <FormLabel>\n                                    Filter Legume Characteristics\n                                </FormLabel>\n                                <FormControl\n                                    as=\"select\"\n                                    onChange={(event) => {\n                                        this.setState({\n                                            filter: event.target.value,\n                                        });\n                                    }}\n                                >\n                                    <option>Functions</option>\n                                    <option>Requirements</option>\n                                    <option>AgroEcological</option>\n                                </FormControl>\n                            </Form>\n                        </Card.Body>\n                    </Card>\n                </div>\n                {this.LegumeTableAll()}\n            </div>\n        );\n    }\n}\nLegumesComponent.contextType = AppContext;\n\nexport default LegumesComponent;\n","import React, { Component } from \"react\";\n\nimport { AiOutlineDatabase, AiFillHome, AiOutlineSend } from \"react-icons/ai\";\nimport { BsFolder } from \"react-icons/bs\";\nimport { IoIosInformationCircleOutline } from \"react-icons/io\";\nimport { RiUserSettingsLine } from \"react-icons/ri\";\nimport { VscAccount } from \"react-icons/vsc\";\nimport { FaLeaf, FaDatabase } from \"react-icons/fa\";\nimport { GoGraph, GoSettings } from \"react-icons/go\";\nimport Home from \"../home-component/home-component\";\nimport Admin from \"../admin-data-entry-component/admin-data-entry-component\";\nimport Login from \"../login-component/login-component\";\nimport DataEntry from \"../data-entry-component/data-entry-component\";\nimport Results from \"../results-component/results-component\";\nimport ViewContext from \"../view-context-component/view-context-component\";\nimport ProjectInformation from \"../project-information-component/project-information-component\";\nimport ManageData from \"../submit-data-component/submit-data-component\";\nimport LegumesComponent from \"../legumes-component/legumes-component\";\n\n// Set the icon size for the imported icons\nconst iconSize = 30;\n\nconst sidebarlinkcName = \"sidebar-nav-link\";\n\nconst SidebarData = [\n    {\n        title: \"1. Information\",\n        routeKey: \"information-route\",\n        component: <Home />,\n        path: \"/info\",\n        icon: <IoIosInformationCircleOutline size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n    {\n        title: \"2. Project Information\",\n        routeKey: \"project-info-route\",\n        component: <ProjectInformation />,\n        path: \"/project-info\",\n\n        icon: <GoSettings size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n    {\n        title: \"3. Legumes\",\n        routeKey: \"legume-route\",\n        component: <LegumesComponent />,\n        path: \"/legumes\",\n\n        icon: <FaLeaf size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n    {\n        title: \"4. Data Entry\",\n        routeKey: \"data-entry-route\",\n        component: <DataEntry />,\n        path: \"/data-entry\",\n\n        icon: <AiOutlineDatabase size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n\n    {\n        title: \"5. Results\",\n        routeKey: \"results-route\",\n        component: <Results />,\n        path: \"/results\",\n\n        icon: <GoGraph size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n\n    {\n        title: \"6. Manage Data\",\n        routeKey: \"manage-data-route\",\n        component: <ManageData />,\n        path: \"/manage-data\",\n        icon: <BsFolder size={iconSize} />,\n        cName: sidebarlinkcName,\n    },\n\n    // {\n    //     title: \"View App Data\",\n    //     routeKey: \"app-data-route\",\n    //     component: <ViewContext />,\n    //     path: \"/app-data\",\n    //     icon: <FaDatabase size={iconSize} />,\n    //     cName: sidebarlinkcName,\n    // },\n];\n\nexport default SidebarData;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { IoIosArrowBack } from \"react-icons/io\";\nimport { AiOutlineMenu, AiOutlineClose } from \"react-icons/ai\";\nimport { BsCheck } from \"react-icons/bs\";\nimport \"./sidebar-component.css\";\nimport SidebarData from \"./sidebar-data\";\n\nimport _ from \"lodash\";\nimport AppContext from \"../../AppContext\";\n\n/*\nThis sidebar renders depending on the contents of sidebar-data. The top-bar renders \ndepending on the app context (which is shared through out all of the components).\nIn order for the top-bar to update, the menu button has to be pressed\n*/\n\nclass Sidebar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Setting the initial state to closed\n        this.state = {\n            sideBarOpen: false,\n            project: \"?\",\n            projectInformationComplete: false,\n            legumesComplete: false,\n            dataEntryComplete: false,\n            resultsComplete: false,\n        };\n    }\n\n    /* This updates the top-bar variables based on the context. It checks to see if each of the individual\n    context items are defined*/\n    initialiseContext() {\n        let newProject = \"?\";\n        console.log(this.context);\n        if (this.context.currentProject === undefined) {\n            this.context.currentProject = {};\n        }\n        if (this.context.currentProject.projectInfo !== undefined) {\n            newProject = _.cloneDeep(\n                this.context.currentProject.projectInfo.projectName\n            );\n        }\n\n        let projectInfoState = false;\n        if (this.context.currentProject.projectInfo !== undefined) {\n            projectInfoState = true;\n        }\n\n        let legumeState = false;\n        if (this.context.currentProject.legumeData !== undefined) {\n            legumeState = true;\n        }\n\n        let dataEntryState = false;\n        if (\n            this.context.currentProject.contextScores !== undefined &&\n            this.context.currentProject.agroEcoData !== undefined &&\n            this.context.currentProject.pairWiseScores !== undefined &&\n            this.context.currentProject.participatoryMatrixScores !== undefined\n        ) {\n            dataEntryState = true;\n        }\n        let resultsState = false;\n        if (this.context.currentProject.results !== undefined) {\n            resultsState = true;\n        }\n\n        this.setState({\n            project: newProject,\n            dataEntryComplete: dataEntryState,\n            projectInformationComplete: projectInfoState,\n            resultsComplete: resultsState,\n            legumesComplete: legumeState,\n        });\n    }\n\n    // When this function is trigered, state of the side-bar is change, which triggers a change in the css\n    toggleSidebar = () => {\n        this.setState(\n            {\n                sideBarOpen: !this.state.sideBarOpen,\n            },\n            () => this.initialiseContext()\n        );\n    };\n\n    // All of the information for the top-bar\n    returnTopBarInformation = () => {\n        return (\n            <div className=\"top-bar-items\">\n                <p className=\"top-bar-text\">Project: {this.state.project}</p>\n\n                <p className=\"top-bar-text\">\n                    Project Information:{\" \"}\n                    {this.state.projectInformationComplete ? (\n                        <BsCheck size={40} />\n                    ) : (\n                        \"?\"\n                    )}\n                </p>\n                <p className=\"top-bar-text\">\n                    Legume Information:{\" \"}\n                    {this.state.legumesComplete ? <BsCheck size={40} /> : \"?\"}\n                </p>\n                <p className=\"top-bar-text\">\n                    Data Entry:{\" \"}\n                    {this.state.dataEntryComplete ? <BsCheck size={40} /> : \"?\"}\n                </p>\n                <p className=\"top-bar-text\">\n                    Results:{\" \"}\n                    {this.state.resultsComplete ? <BsCheck size={40} /> : \"?\"}\n                </p>\n            </div>\n        );\n    };\n\n    render() {\n        return (\n            <div className=\"container_row\">\n                <div className=\"top-bar\">\n                    <a onClick={this.toggleSidebar}>\n                        <AiOutlineMenu size={50} color=\"white\" />\n                    </a>\n                    {this.returnTopBarInformation()}\n                </div>\n\n                <div\n                    className={\n                        this.state.sideBarOpen\n                            ? \"sidebar-container active\"\n                            : \"sidebar-container\"\n                    }\n                >\n                    <div\n                        key=\"sidebar-header \"\n                        className=\"sidebar-header-container\"\n                    >\n                        <h2>LegumeCHOICE</h2>\n\n                        <a onClick={this.toggleSidebar}>\n                            <div className=\"close-menu-icon\">\n                                <IoIosArrowBack size={40} color=\"white\" />\n                            </div>\n                        </a>\n                    </div>\n\n                    <div>\n                        <ul className=\"sidebar-list\">\n                            {SidebarData.map((item, index) => {\n                                return (\n                                    <Link\n                                        key={index + \"-link-item\"}\n                                        className={item.cName}\n                                        to={item.path}\n                                        onClick={this.toggleSidebar}\n                                    >\n                                        <div>\n                                            <li\n                                                className=\"sidebar-list-item\"\n                                                key={index + \"-list-item\"}\n                                            >\n                                                <span className=\"side-bar-link-icon\">\n                                                    {item.icon}\n                                                </span>\n                                                <span className=\"side-bar-link-text\">\n                                                    {item.title}\n                                                </span>\n                                            </li>\n                                        </div>\n                                    </Link>\n                                );\n                            })}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nSidebar.contextType = AppContext;\n\nexport default Sidebar;\n","import React from \"react\";\n\n/* This is the main component for loading the application. It can be split into two primary components \n1. We have the sidebar component, (found in the components folder). This includes the sidebar, and the topbar. It stays \nfixed on the page.\n2. We have the page component. This is a space which is preserved for loading each of the individual pages as they are loaded.*/\n\nimport {\n    //BrowserRouter as Router,\n    HashRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\n\nimport Sidebar from \"./components/sidebar-component/sidebar-component\";\n\n// In this location, we have all of the details of each of the individual components\nimport SidebarData from \"./components/sidebar-component/sidebar-data\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AppContext from \"./AppContext\";\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router>\n                <div>\n                    {/* Context provider specifies which components should have access to the context */}\n                    <AppContext.Provider value={{}}>\n                        <Sidebar />\n                        <div className=\"outer-page-container\">\n                            <div className=\"inner-page-container\">\n                                <Switch>\n                                    {SidebarData.map((item) => {\n                                        // Return Each of the components and their specified routes\n                                        return (\n                                            <Route\n                                                exact\n                                                path={item.path}\n                                                key={item.routeKey}\n                                            >\n                                                {item.component}\n                                            </Route>\n                                        );\n                                    })}\n                                    <Redirect exact from=\"/\" to=\"/info\" />\n                                </Switch>\n                            </div>\n                        </div>\n                    </AppContext.Provider>\n                </div>\n            </Router>\n        );\n    }\n}\n\nApp.contextType = AppContext;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register(\"service-worker.js\");\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}